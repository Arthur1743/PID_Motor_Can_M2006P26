
Winch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08008370  08008370  00009370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087ac  080087ac  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080087ac  080087ac  000097ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087b4  080087b4  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087b4  080087b4  000097b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087b8  080087b8  000097b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080087bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          00000308  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004dc  200004dc  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fe7c  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002455  00000000  00000000  0001a080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  0001c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b88  00000000  00000000  0001d3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229c8  00000000  00000000  0001df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110d1  00000000  00000000  00040900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfbdf  00000000  00000000  000519d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001215b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000051e0  00000000  00000000  001215f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  001267d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008358 	.word	0x08008358

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008358 	.word	0x08008358

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b9a0 	b.w	8000f14 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f83c 	bl	8000c58 <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__aeabi_d2lz>:
 8000bec:	b538      	push	{r3, r4, r5, lr}
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	460d      	mov	r5, r1
 8000bf6:	f7ff ff71 	bl	8000adc <__aeabi_dcmplt>
 8000bfa:	b928      	cbnz	r0, 8000c08 <__aeabi_d2lz+0x1c>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	4629      	mov	r1, r5
 8000c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c04:	f000 b80a 	b.w	8000c1c <__aeabi_d2ulz>
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c0e:	f000 f805 	bl	8000c1c <__aeabi_d2ulz>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
 8000c1a:	bf00      	nop

08000c1c <__aeabi_d2ulz>:
 8000c1c:	b5d0      	push	{r4, r6, r7, lr}
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <__aeabi_d2ulz+0x34>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	4606      	mov	r6, r0
 8000c24:	460f      	mov	r7, r1
 8000c26:	f7ff fce7 	bl	80005f8 <__aeabi_dmul>
 8000c2a:	f7ff ffa7 	bl	8000b7c <__aeabi_d2uiz>
 8000c2e:	4604      	mov	r4, r0
 8000c30:	f7ff fc68 	bl	8000504 <__aeabi_ui2d>
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <__aeabi_d2ulz+0x38>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f7ff fcde 	bl	80005f8 <__aeabi_dmul>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4630      	mov	r0, r6
 8000c42:	4639      	mov	r1, r7
 8000c44:	f7ff fb20 	bl	8000288 <__aeabi_dsub>
 8000c48:	f7ff ff98 	bl	8000b7c <__aeabi_d2uiz>
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c50:	3df00000 	.word	0x3df00000
 8000c54:	41f00000 	.word	0x41f00000

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	460c      	mov	r4, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d14e      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c64:	4694      	mov	ip, r2
 8000c66:	458c      	cmp	ip, r1
 8000c68:	4686      	mov	lr, r0
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	d962      	bls.n	8000d36 <__udivmoddi4+0xde>
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0320 	rsb	r3, r2, #32
 8000c76:	4091      	lsls	r1, r2
 8000c78:	fa20 f303 	lsr.w	r3, r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	4319      	orrs	r1, r3
 8000c82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f f68c 	uxth.w	r6, ip
 8000c8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb07 1114 	mls	r1, r7, r4, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb04 f106 	mul.w	r1, r4, r6
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cae:	f080 8112 	bcs.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 810f 	bls.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb8:	3c02      	subs	r4, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f606 	mul.w	r6, r0, r6
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x94>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cde:	f080 80fc 	bcs.w	8000eda <__udivmoddi4+0x282>
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	f240 80f9 	bls.w	8000eda <__udivmoddi4+0x282>
 8000ce8:	4463      	add	r3, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	b11d      	cbz	r5, 8000cfe <__udivmoddi4+0xa6>
 8000cf6:	40d3      	lsrs	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d905      	bls.n	8000d12 <__udivmoddi4+0xba>
 8000d06:	b10d      	cbz	r5, 8000d0c <__udivmoddi4+0xb4>
 8000d08:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e7f5      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d12:	fab3 f183 	clz	r1, r3
 8000d16:	2900      	cmp	r1, #0
 8000d18:	d146      	bne.n	8000da8 <__udivmoddi4+0x150>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xcc>
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	f0c0 80f0 	bcc.w	8000f04 <__udivmoddi4+0x2ac>
 8000d24:	1a86      	subs	r6, r0, r2
 8000d26:	eb64 0303 	sbc.w	r3, r4, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d0e6      	beq.n	8000cfe <__udivmoddi4+0xa6>
 8000d30:	e9c5 6300 	strd	r6, r3, [r5]
 8000d34:	e7e3      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	f040 8090 	bne.w	8000e5c <__udivmoddi4+0x204>
 8000d3c:	eba1 040c 	sub.w	r4, r1, ip
 8000d40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d44:	fa1f f78c 	uxth.w	r7, ip
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb08 4416 	mls	r4, r8, r6, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb07 f006 	mul.w	r0, r7, r6
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x11c>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x11a>
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	f200 80cd 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d72:	4626      	mov	r6, r4
 8000d74:	1a1c      	subs	r4, r3, r0
 8000d76:	fa1f f38e 	uxth.w	r3, lr
 8000d7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb00 f707 	mul.w	r7, r0, r7
 8000d8a:	429f      	cmp	r7, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x148>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x146>
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	f200 80b0 	bhi.w	8000efe <__udivmoddi4+0x2a6>
 8000d9e:	4620      	mov	r0, r4
 8000da0:	1bdb      	subs	r3, r3, r7
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	e7a5      	b.n	8000cf4 <__udivmoddi4+0x9c>
 8000da8:	f1c1 0620 	rsb	r6, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 f706 	lsr.w	r7, r2, r6
 8000db2:	431f      	orrs	r7, r3
 8000db4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dbc:	ea43 030c 	orr.w	r3, r3, ip
 8000dc0:	40f4      	lsrs	r4, r6
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	0c38      	lsrs	r0, r7, #16
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dd0:	fa1f fc87 	uxth.w	ip, r7
 8000dd4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ddc:	fb0e f90c 	mul.w	r9, lr, ip
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	fa02 f201 	lsl.w	r2, r2, r1
 8000de6:	d90a      	bls.n	8000dfe <__udivmoddi4+0x1a6>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dee:	f080 8084 	bcs.w	8000efa <__udivmoddi4+0x2a2>
 8000df2:	45a1      	cmp	r9, r4
 8000df4:	f240 8081 	bls.w	8000efa <__udivmoddi4+0x2a2>
 8000df8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	eba4 0409 	sub.w	r4, r4, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1d2>
 8000e1a:	193c      	adds	r4, r7, r4
 8000e1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e20:	d267      	bcs.n	8000ef2 <__udivmoddi4+0x29a>
 8000e22:	45a4      	cmp	ip, r4
 8000e24:	d965      	bls.n	8000ef2 <__udivmoddi4+0x29a>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e32:	eba4 040c 	sub.w	r4, r4, ip
 8000e36:	429c      	cmp	r4, r3
 8000e38:	46ce      	mov	lr, r9
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	d351      	bcc.n	8000ee2 <__udivmoddi4+0x28a>
 8000e3e:	d04e      	beq.n	8000ede <__udivmoddi4+0x286>
 8000e40:	b155      	cbz	r5, 8000e58 <__udivmoddi4+0x200>
 8000e42:	ebb8 030e 	subs.w	r3, r8, lr
 8000e46:	eb64 040c 	sbc.w	r4, r4, ip
 8000e4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4e:	40cb      	lsrs	r3, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	40cc      	lsrs	r4, r1
 8000e54:	e9c5 6400 	strd	r6, r4, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e750      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f103 	lsr.w	r1, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	fa24 f303 	lsr.w	r3, r4, r3
 8000e6c:	4094      	lsls	r4, r2
 8000e6e:	430c      	orrs	r4, r1
 8000e70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e78:	fa1f f78c 	uxth.w	r7, ip
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3110 	mls	r1, r8, r0, r3
 8000e84:	0c23      	lsrs	r3, r4, #16
 8000e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8a:	fb00 f107 	mul.w	r1, r0, r7
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x24c>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e9a:	d22c      	bcs.n	8000ef6 <__udivmoddi4+0x29e>
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	d92a      	bls.n	8000ef6 <__udivmoddi4+0x29e>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eac:	fb08 3311 	mls	r3, r8, r1, r3
 8000eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb4:	fb01 f307 	mul.w	r3, r1, r7
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x276>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ec4:	d213      	bcs.n	8000eee <__udivmoddi4+0x296>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d911      	bls.n	8000eee <__udivmoddi4+0x296>
 8000eca:	3902      	subs	r1, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	1ae4      	subs	r4, r4, r3
 8000ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed4:	e739      	b.n	8000d4a <__udivmoddi4+0xf2>
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	e6f0      	b.n	8000cbc <__udivmoddi4+0x64>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e706      	b.n	8000cec <__udivmoddi4+0x94>
 8000ede:	45c8      	cmp	r8, r9
 8000ee0:	d2ae      	bcs.n	8000e40 <__udivmoddi4+0x1e8>
 8000ee2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7a8      	b.n	8000e40 <__udivmoddi4+0x1e8>
 8000eee:	4631      	mov	r1, r6
 8000ef0:	e7ed      	b.n	8000ece <__udivmoddi4+0x276>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e799      	b.n	8000e2a <__udivmoddi4+0x1d2>
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	e7d4      	b.n	8000ea4 <__udivmoddi4+0x24c>
 8000efa:	46d6      	mov	lr, sl
 8000efc:	e77f      	b.n	8000dfe <__udivmoddi4+0x1a6>
 8000efe:	4463      	add	r3, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74d      	b.n	8000da0 <__udivmoddi4+0x148>
 8000f04:	4606      	mov	r6, r0
 8000f06:	4623      	mov	r3, r4
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e70f      	b.n	8000d2c <__udivmoddi4+0xd4>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	e730      	b.n	8000d74 <__udivmoddi4+0x11c>
 8000f12:	bf00      	nop

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <PID_INIT>:
* @par Reference     : 
*/
#include "pid.h"


void PID_INIT(PID_PARA *pid, float target, float sample_time, float outmax, float outmin, float kp, float ki, float kd) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	61f8      	str	r0, [r7, #28]
 8000f20:	ed87 0a06 	vstr	s0, [r7, #24]
 8000f24:	edc7 0a05 	vstr	s1, [r7, #20]
 8000f28:	ed87 1a04 	vstr	s2, [r7, #16]
 8000f2c:	edc7 1a03 	vstr	s3, [r7, #12]
 8000f30:	ed87 2a02 	vstr	s4, [r7, #8]
 8000f34:	edc7 2a01 	vstr	s5, [r7, #4]
 8000f38:	ed87 3a00 	vstr	s6, [r7]
    // Thiết lập các tham số PID
    pid->target = target;
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	601a      	str	r2, [r3, #0]
    pid->T = sample_time;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	619a      	str	r2, [r3, #24]
    pid->MaxOutput = outmax;
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->MinOutput = outmin;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->kp = kp;
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	60da      	str	r2, [r3, #12]
    pid->ki = ki;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	611a      	str	r2, [r3, #16]
    pid->kd = kd;
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	615a      	str	r2, [r3, #20]

    // Khởi tạo các giá trị ban đầu
    pid->output = 0;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
    pid->output_last = 0;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
    pid->last_error1 = 0;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    pid->last_error2 = 0;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error = 0;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
}
 8000f8e:	bf00      	nop
 8000f90:	3724      	adds	r7, #36	@ 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <PID_CONTROLLER>:

void PID_CONTROLLER(PID_PARA *pid, float measure) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	ed87 0a00 	vstr	s0, [r7]
    // Caculation error
    pid->measure = measure;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	605a      	str	r2, [r3, #4]
    pid->error = pid->target - pid->measure;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	ed93 7a00 	vldr	s14, [r3]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	edc3 7a02 	vstr	s15, [r3, #8]

    // Deadband check
    float deadband = 0.5;
 8000fc4:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8000fc8:	617b      	str	r3, [r7, #20]
    if (ABS(pid->error) < deadband) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	dd03      	ble.n	8000fe2 <PID_CONTROLLER+0x46>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fe0:	e004      	b.n	8000fec <PID_CONTROLLER+0x50>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fe8:	eef1 7a67 	vneg.f32	s15, s15
 8000fec:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff8:	f100 808b 	bmi.w	8001112 <PID_CONTROLLER+0x176>
        return; 
    }

    // 
    float incKp = pid->kp * (pid->error - pid->last_error1);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	ed93 7a03 	vldr	s14, [r3, #12]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	edd3 6a02 	vldr	s13, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800100e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001016:	edc7 7a04 	vstr	s15, [r7, #16]
    float incKi = pid->ki * pid->T / 2.0f * (pid->error + pid->last_error1);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	edd3 7a06 	vldr	s15, [r3, #24]
 8001026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800102e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	edd3 6a02 	vldr	s13, [r3, #8]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800103e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001046:	edc7 7a03 	vstr	s15, [r7, #12]
    float incKd = (pid->T > 0) ? (pid->kd / pid->T * (pid->error - 2 * pid->last_error1 + pid->last_error2)) : 0;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001050:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001058:	dd19      	ble.n	800108e <PID_CONTROLLER+0xf2>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	edd3 6a05 	vldr	s13, [r3, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	edd3 7a06 	vldr	s15, [r3, #24]
 8001066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001076:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800107a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	e001      	b.n	8001092 <PID_CONTROLLER+0xf6>
 800108e:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8001120 <PID_CONTROLLER+0x184>
 8001092:	edc7 7a02 	vstr	s15, [r7, #8]

    // Tổng hợp các thành phần để có đầu ra mới
    pid->output = pid->output_last + incKp + incKi + incKd;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	ed93 7a08 	vldr	s14, [r3, #32]
 800109c:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	edc3 7a07 	vstr	s15, [r3, #28]

    // Limit output
    if (pid->output > pid->MaxOutput) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	ed93 7a07 	vldr	s14, [r3, #28]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80010c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	dd04      	ble.n	80010da <PID_CONTROLLER+0x13e>
        pid->output = pid->MaxOutput;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	61da      	str	r2, [r3, #28]
 80010d8:	e00e      	b.n	80010f8 <PID_CONTROLLER+0x15c>
    } else if (pid->output < pid->MinOutput) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80010e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	d503      	bpl.n	80010f8 <PID_CONTROLLER+0x15c>
        pid->output = pid->MinOutput;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	61da      	str	r2, [r3, #28]
    }

    // Store history value 
    pid->last_error2 = pid->last_error1;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->last_error1 = pid->error;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	62da      	str	r2, [r3, #44]	@ 0x2c
    pid->output_last = pid->output;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69da      	ldr	r2, [r3, #28]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	621a      	str	r2, [r3, #32]
 8001110:	e000      	b.n	8001114 <PID_CONTROLLER+0x178>
        return; 
 8001112:	bf00      	nop
}
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	00000000 	.word	0x00000000

08001124 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	@ (8001150 <HAL_UART_RxCpltCallback+0x2c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d107      	bne.n	8001146 <HAL_UART_RxCpltCallback+0x22>
    {
        _flag_rx=1;
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <HAL_UART_RxCpltCallback+0x30>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart1, (uint8_t*) rxBuffer, RX_BUFFER_SIZE);
 800113c:	220a      	movs	r2, #10
 800113e:	4906      	ldr	r1, [pc, #24]	@ (8001158 <HAL_UART_RxCpltCallback+0x34>)
 8001140:	4806      	ldr	r0, [pc, #24]	@ (800115c <HAL_UART_RxCpltCallback+0x38>)
 8001142:	f003 f958 	bl	80043f6 <HAL_UART_Receive_IT>
    }
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40011000 	.word	0x40011000
 8001154:	200001fe 	.word	0x200001fe
 8001158:	200001f4 	.word	0x200001f4
 800115c:	200002ac 	.word	0x200002ac

08001160 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001168:	2140      	movs	r1, #64	@ 0x40
 800116a:	4803      	ldr	r0, [pc, #12]	@ (8001178 <HAL_UART_TxCpltCallback+0x18>)
 800116c:	f002 f87b 	bl	8003266 <HAL_GPIO_TogglePin>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40020000 	.word	0x40020000

0800117c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	@ 0x38
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1c      	ldr	r2, [pc, #112]	@ (80011fc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d132      	bne.n	80011f4 <HAL_TIM_PeriodElapsedCallback+0x78>
    {
    	char buffer[30];
    	int length = snprintf(buffer, sizeof(buffer), "%d@%d#", (uint16_t)velocity_outshaft, feedback.current_mA);
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001198:	ee17 3a90 	vmov	r3, s15
 800119c:	b29b      	uxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80011a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011a6:	f107 000c 	add.w	r0, r7, #12
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	4613      	mov	r3, r2
 80011ae:	4a16      	ldr	r2, [pc, #88]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80011b0:	211e      	movs	r1, #30
 80011b2:	f004 ff67 	bl	8006084 <sniprintf>
 80011b6:	62f8      	str	r0, [r7, #44]	@ 0x2c

         if (length < 0 || length >= sizeof(buffer))
 80011b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db02      	blt.n	80011c4 <HAL_TIM_PeriodElapsedCallback+0x48>
 80011be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011c0:	2b1d      	cmp	r3, #29
 80011c2:	d904      	bls.n	80011ce <HAL_TIM_PeriodElapsedCallback+0x52>
         {
             HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // Có thể thay đổi logic nếu cần
 80011c4:	2140      	movs	r1, #64	@ 0x40
 80011c6:	4811      	ldr	r0, [pc, #68]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011c8:	f002 f84d 	bl	8003266 <HAL_GPIO_TogglePin>
 80011cc:	e00f      	b.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x72>
         }
         else
         {
             if (HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, 1000) != HAL_OK)
 80011ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f107 010c 	add.w	r1, r7, #12
 80011d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011dc:	f003 f880 	bl	80042e0 <HAL_UART_Transmit>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_TIM_PeriodElapsedCallback+0x72>
             {
                 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7); // Bật/tắt pin trong trư�?ng hợp lỗi truy�?n
 80011e6:	2180      	movs	r1, #128	@ 0x80
 80011e8:	4808      	ldr	r0, [pc, #32]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011ea:	f002 f83c 	bl	8003266 <HAL_GPIO_TogglePin>
             }
         }
        start=1;
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
    }
}
 80011f4:	bf00      	nop
 80011f6:	3730      	adds	r7, #48	@ 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40001000 	.word	0x40001000
 8001200:	20000380 	.word	0x20000380
 8001204:	20000364 	.word	0x20000364
 8001208:	08008370 	.word	0x08008370
 800120c:	40020000 	.word	0x40020000
 8001210:	200002ac 	.word	0x200002ac
 8001214:	20000238 	.word	0x20000238

08001218 <process>:
void process()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
    char *token;
    if(strlen((const char *)rxBuffer) < 2)
 800121e:	481f      	ldr	r0, [pc, #124]	@ (800129c <process+0x84>)
 8001220:	f7fe ffd6 	bl	80001d0 <strlen>
 8001224:	4603      	mov	r3, r0
 8001226:	2b01      	cmp	r3, #1
 8001228:	d818      	bhi.n	800125c <process+0x44>
     {
        if (rxBuffer[0] == '0')
 800122a:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <process+0x84>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b30      	cmp	r3, #48	@ 0x30
 8001230:	d106      	bne.n	8001240 <process+0x28>
        {
        	 run=1;
 8001232:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <process+0x88>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
        	 HAL_TIM_Base_Start_IT(&htim6);
 8001238:	481a      	ldr	r0, [pc, #104]	@ (80012a4 <process+0x8c>)
 800123a:	f002 fd3d 	bl	8003cb8 <HAL_TIM_Base_Start_IT>
				_cur2 = atof(token);
			}
    	}

    }
}
 800123e:	e029      	b.n	8001294 <process+0x7c>
        else if (rxBuffer[0] == '1')
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <process+0x84>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b31      	cmp	r3, #49	@ 0x31
 8001246:	d125      	bne.n	8001294 <process+0x7c>
            _cur2=0;
 8001248:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <process+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]
            run=0;
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <process+0x88>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
            HAL_TIM_Base_Stop(&htim6);
 8001254:	4813      	ldr	r0, [pc, #76]	@ (80012a4 <process+0x8c>)
 8001256:	f002 fd08 	bl	8003c6a <HAL_TIM_Base_Stop>
}
 800125a:	e01b      	b.n	8001294 <process+0x7c>
    	if (strchr((const char *)rxBuffer, ';') != NULL)
 800125c:	213b      	movs	r1, #59	@ 0x3b
 800125e:	480f      	ldr	r0, [pc, #60]	@ (800129c <process+0x84>)
 8001260:	f004 ff8f 	bl	8006182 <strchr>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d014      	beq.n	8001294 <process+0x7c>
    		token = strtok((char *)rxBuffer, ";");
 800126a:	4910      	ldr	r1, [pc, #64]	@ (80012ac <process+0x94>)
 800126c:	480b      	ldr	r0, [pc, #44]	@ (800129c <process+0x84>)
 800126e:	f004 ffa7 	bl	80061c0 <strtok>
 8001272:	6078      	str	r0, [r7, #4]
			if (token != NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00c      	beq.n	8001294 <process+0x7c>
				_cur2 = atof(token);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f004 f82c 	bl	80052d8 <atof>
 8001280:	ec53 2b10 	vmov	r2, r3, d0
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fc50 	bl	8000b2c <__aeabi_d2iz>
 800128c:	4603      	mov	r3, r0
 800128e:	b21a      	sxth	r2, r3
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <process+0x90>)
 8001292:	801a      	strh	r2, [r3, #0]
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200001f4 	.word	0x200001f4
 80012a0:	200001ff 	.word	0x200001ff
 80012a4:	20000264 	.word	0x20000264
 80012a8:	200001f0 	.word	0x200001f0
 80012ac:	08008378 	.word	0x08008378

080012b0 <clear>:
void clear()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	memset(rxBuffer, 0, sizeof(rxBuffer));
 80012b4:	220a      	movs	r2, #10
 80012b6:	2100      	movs	r1, #0
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <clear+0x14>)
 80012ba:	f004 ff5a 	bl	8006172 <memset>
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200001f4 	.word	0x200001f4

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012cc:	f000 fd98 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d0:	f000 f87a 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d4:	f000 f978 	bl	80015c8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80012d8:	f000 f8e0 	bl	800149c <MX_CAN1_Init>
  MX_TIM6_Init();
 80012dc:	f000 f914 	bl	8001508 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80012e0:	f000 f948 	bl	8001574 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80012e4:	4829      	ldr	r0, [pc, #164]	@ (800138c <main+0xc4>)
 80012e6:	f000 ffd9 	bl	800229c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012ea:	2102      	movs	r1, #2
 80012ec:	4827      	ldr	r0, [pc, #156]	@ (800138c <main+0xc4>)
 80012ee:	f001 fa0b 	bl	8002708 <HAL_CAN_ActivateNotification>
//  HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
  CAN_FilterConfig();
 80012f2:	f000 fb03 	bl	80018fc <CAN_FilterConfig>
  HAL_UART_Receive_IT(&huart1, (uint8_t*) rxBuffer, RX_BUFFER_SIZE);
 80012f6:	220a      	movs	r2, #10
 80012f8:	4925      	ldr	r1, [pc, #148]	@ (8001390 <main+0xc8>)
 80012fa:	4826      	ldr	r0, [pc, #152]	@ (8001394 <main+0xcc>)
 80012fc:	f003 f87b 	bl	80043f6 <HAL_UART_Receive_IT>
  memset(&feedback,0,sizeof(feedback));
 8001300:	2214      	movs	r2, #20
 8001302:	2100      	movs	r1, #0
 8001304:	4824      	ldr	r0, [pc, #144]	@ (8001398 <main+0xd0>)
 8001306:	f004 ff34 	bl	8006172 <memset>
//  HAL_TIM_Base_Start_IT(&htim6);
  PID_INIT(&pid,set,0.01,1000,0,7.582,16,0.038);
 800130a:	4b24      	ldr	r3, [pc, #144]	@ (800139c <main+0xd4>)
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	ed9f 3a23 	vldr	s6, [pc, #140]	@ 80013a0 <main+0xd8>
 8001314:	eef3 2a00 	vmov.f32	s5, #48	@ 0x41800000  16.0
 8001318:	ed9f 2a22 	vldr	s4, [pc, #136]	@ 80013a4 <main+0xdc>
 800131c:	eddf 1a22 	vldr	s3, [pc, #136]	@ 80013a8 <main+0xe0>
 8001320:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 80013ac <main+0xe4>
 8001324:	eddf 0a22 	vldr	s1, [pc, #136]	@ 80013b0 <main+0xe8>
 8001328:	eeb0 0a67 	vmov.f32	s0, s15
 800132c:	4821      	ldr	r0, [pc, #132]	@ (80013b4 <main+0xec>)
 800132e:	f7ff fdf3 	bl	8000f18 <PID_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   if(_flag_rx==1)
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <main+0xf0>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <main+0x80>
	   {
		   //xu ly tai day
		   process();
 800133a:	f7ff ff6d 	bl	8001218 <process>
		   clear();
 800133e:	f7ff ffb7 	bl	80012b0 <clear>
		   _flag_rx=0;
 8001342:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <main+0xf0>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
	   }

	  if(start==1){
 8001348:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <main+0xf4>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <main+0x6a>
        PID_CONTROLLER(&pid,velocity_outshaft);
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <main+0xf8>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	4816      	ldr	r0, [pc, #88]	@ (80013b4 <main+0xec>)
 800135c:	f7ff fe1e 	bl	8000f9c <PID_CONTROLLER>
        _cur2=pid.output;
 8001360:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <main+0xec>)
 8001362:	edd3 7a07 	vldr	s15, [r3, #28]
 8001366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136a:	ee17 3a90 	vmov	r3, s15
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <main+0xfc>)
 8001372:	801a      	strh	r2, [r3, #0]
	    send_speed_controller_command(0,_cur2);
 8001374:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <main+0xfc>)
 8001376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137a:	4619      	mov	r1, r3
 800137c:	2000      	movs	r0, #0
 800137e:	f000 f979 	bl	8001674 <send_speed_controller_command>
	    start=0;
 8001382:	4b0e      	ldr	r3, [pc, #56]	@ (80013bc <main+0xf4>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
	   if(_flag_rx==1)
 8001388:	e7d3      	b.n	8001332 <main+0x6a>
 800138a:	bf00      	nop
 800138c:	2000023c 	.word	0x2000023c
 8001390:	200001f4 	.word	0x200001f4
 8001394:	200002ac 	.word	0x200002ac
 8001398:	20000364 	.word	0x20000364
 800139c:	20000234 	.word	0x20000234
 80013a0:	3d1ba5e3 	.word	0x3d1ba5e3
 80013a4:	40f29fbe 	.word	0x40f29fbe
 80013a8:	00000000 	.word	0x00000000
 80013ac:	447a0000 	.word	0x447a0000
 80013b0:	3c23d70a 	.word	0x3c23d70a
 80013b4:	20000200 	.word	0x20000200
 80013b8:	200001fe 	.word	0x200001fe
 80013bc:	20000238 	.word	0x20000238
 80013c0:	20000380 	.word	0x20000380
 80013c4:	200001f0 	.word	0x200001f0

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	@ 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	2230      	movs	r2, #48	@ 0x30
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fecb 	bl	8006172 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	4b28      	ldr	r3, [pc, #160]	@ (8001494 <SystemClock_Config+0xcc>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	4a27      	ldr	r2, [pc, #156]	@ (8001494 <SystemClock_Config+0xcc>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fc:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <SystemClock_Config+0xcc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <SystemClock_Config+0xd0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <SystemClock_Config+0xd0>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <SystemClock_Config+0xd0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001424:	2301      	movs	r3, #1
 8001426:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001428:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142e:	2302      	movs	r3, #2
 8001430:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001432:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001438:	2304      	movs	r3, #4
 800143a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800143c:	23a8      	movs	r3, #168	@ 0xa8
 800143e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001440:	2302      	movs	r3, #2
 8001442:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001444:	2304      	movs	r3, #4
 8001446:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	4618      	mov	r0, r3
 800144e:	f001 ff25 	bl	800329c <HAL_RCC_OscConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001458:	f000 f906 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145c:	230f      	movs	r3, #15
 800145e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001460:	2302      	movs	r3, #2
 8001462:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001468:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800146c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800146e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001472:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2105      	movs	r1, #5
 800147a:	4618      	mov	r0, r3
 800147c:	f002 f986 	bl	800378c <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001486:	f000 f8ef 	bl	8001668 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3750      	adds	r7, #80	@ 0x50
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40007000 	.word	0x40007000

0800149c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014a2:	4a18      	ldr	r2, [pc, #96]	@ (8001504 <MX_CAN1_Init+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014a8:	2203      	movs	r2, #3
 80014aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014ba:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80014be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <MX_CAN1_Init+0x64>)
 80014ee:	f000 fcf9 	bl	8001ee4 <HAL_CAN_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80014f8:	f000 f8b6 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000023c 	.word	0x2000023c
 8001504:	40006400 	.word	0x40006400

08001508 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	463b      	mov	r3, r7
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_TIM6_Init+0x64>)
 8001518:	4a15      	ldr	r2, [pc, #84]	@ (8001570 <MX_TIM6_Init+0x68>)
 800151a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_TIM6_Init+0x64>)
 800151e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001522:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_TIM6_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <MX_TIM6_Init+0x64>)
 800152c:	2263      	movs	r2, #99	@ 0x63
 800152e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_TIM6_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001536:	480d      	ldr	r0, [pc, #52]	@ (800156c <MX_TIM6_Init+0x64>)
 8001538:	f002 fb48 	bl	8003bcc <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001542:	f000 f891 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	@ (800156c <MX_TIM6_Init+0x64>)
 8001554:	f002 fde4 	bl	8004120 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800155e:	f000 f883 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000264 	.word	0x20000264
 8001570:	40001000 	.word	0x40001000

08001574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 800157a:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <MX_USART1_UART_Init+0x50>)
 800157c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b09      	ldr	r3, [pc, #36]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_USART1_UART_Init+0x4c>)
 80015ac:	f002 fe48 	bl	8004240 <HAL_UART_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015b6:	f000 f857 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200002ac 	.word	0x200002ac
 80015c4:	40011000 	.word	0x40011000

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001660 <MX_GPIO_Init+0x98>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <MX_GPIO_Init+0x98>)
 80015e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <MX_GPIO_Init+0x98>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <MX_GPIO_Init+0x98>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a17      	ldr	r2, [pc, #92]	@ (8001660 <MX_GPIO_Init+0x98>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <MX_GPIO_Init+0x98>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_GPIO_Init+0x98>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <MX_GPIO_Init+0x98>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_GPIO_Init+0x98>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001632:	2201      	movs	r2, #1
 8001634:	21c0      	movs	r1, #192	@ 0xc0
 8001636:	480b      	ldr	r0, [pc, #44]	@ (8001664 <MX_GPIO_Init+0x9c>)
 8001638:	f001 fdfc 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800163c:	23c0      	movs	r3, #192	@ 0xc0
 800163e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4619      	mov	r1, r3
 8001652:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_GPIO_Init+0x9c>)
 8001654:	f001 fc52 	bl	8002efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	40020000 	.word	0x40020000

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <Error_Handler+0x8>

08001674 <send_speed_controller_command>:
float rotor_angle;
float velocity_outshaft;
extern CAN_HandleTypeDef hcan1; // Khai báo CAN_HandleTypeDef
bool offset = 0;
void send_speed_controller_command(int16_t current1, int16_t current2)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	460a      	mov	r2, r1
 800167e:	80fb      	strh	r3, [r7, #6]
 8001680:	4613      	mov	r3, r2
 8001682:	80bb      	strh	r3, [r7, #4]
    TxHeader.StdId = 0x200;
 8001684:	4b1c      	ldr	r3, [pc, #112]	@ (80016f8 <send_speed_controller_command+0x84>)
 8001686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800168a:	601a      	str	r2, [r3, #0]
    TxHeader.DLC = 4;
 800168c:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <send_speed_controller_command+0x84>)
 800168e:	2204      	movs	r2, #4
 8001690:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_STD;
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <send_speed_controller_command+0x84>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8001698:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <send_speed_controller_command+0x84>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]

    TxData[0] = (current1 >> 8) & 0xFF;
 800169e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a2:	121b      	asrs	r3, r3, #8
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <send_speed_controller_command+0x88>)
 80016aa:	701a      	strb	r2, [r3, #0]
    TxData[1] = current1 & 0xFF;
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <send_speed_controller_command+0x88>)
 80016b2:	705a      	strb	r2, [r3, #1]
    TxData[2] = (current2 >> 8) & 0xFF;
 80016b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016b8:	121b      	asrs	r3, r3, #8
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <send_speed_controller_command+0x88>)
 80016c0:	709a      	strb	r2, [r3, #2]
    TxData[3] = current2 & 0xFF;
 80016c2:	88bb      	ldrh	r3, [r7, #4]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <send_speed_controller_command+0x88>)
 80016c8:	70da      	strb	r2, [r3, #3]

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <send_speed_controller_command+0x8c>)
 80016cc:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <send_speed_controller_command+0x88>)
 80016ce:	490a      	ldr	r1, [pc, #40]	@ (80016f8 <send_speed_controller_command+0x84>)
 80016d0:	480c      	ldr	r0, [pc, #48]	@ (8001704 <send_speed_controller_command+0x90>)
 80016d2:	f000 fe27 	bl	8002324 <HAL_CAN_AddTxMessage>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <send_speed_controller_command+0x74>
    {
        _flag = 1;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <send_speed_controller_command+0x94>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
        Error_Handler();
 80016e2:	f7ff ffc1 	bl	8001668 <Error_Handler>
    }
    else
    {
        _flag = 3;
    }
}
 80016e6:	e002      	b.n	80016ee <send_speed_controller_command+0x7a>
        _flag = 3;
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <send_speed_controller_command+0x94>)
 80016ea:	2203      	movs	r2, #3
 80016ec:	701a      	strb	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000310 	.word	0x20000310
 80016fc:	20000330 	.word	0x20000330
 8001700:	20000338 	.word	0x20000338
 8001704:	2000023c 	.word	0x2000023c
 8001708:	20000378 	.word	0x20000378

0800170c <get_moto_offset>:
void get_moto_offset(SpeedControllerFeedback *ptr, uint8_t *RxData)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	ptr->angle_deg = (RxData[0] << 8) | RxData[1];
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b21b      	sxth	r3, r3
 8001726:	4313      	orrs	r3, r2
 8001728:	b21b      	sxth	r3, r3
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	805a      	strh	r2, [r3, #2]
	ptr->offset_angle = ptr->angle_deg;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	885a      	ldrh	r2, [r3, #2]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	809a      	strh	r2, [r3, #4]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <update_round_count>:
void update_round_count(SpeedControllerFeedback *feedback) {
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    if (feedback->angle_deg - feedback->last_angle_deg < -OFFSET_THRESHOLD) {
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	885b      	ldrh	r3, [r3, #2]
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 800175c:	da05      	bge.n	800176a <update_round_count+0x26>
        feedback->round_cnt++;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	60da      	str	r2, [r3, #12]
    } else if (feedback->angle_deg - feedback->last_angle_deg > OFFSET_THRESHOLD) {
        feedback->round_cnt--;
    }
}
 8001768:	e00d      	b.n	8001786 <update_round_count+0x42>
    } else if (feedback->angle_deg - feedback->last_angle_deg > OFFSET_THRESHOLD) {
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	885b      	ldrh	r3, [r3, #2]
 800176e:	461a      	mov	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800177a:	dd04      	ble.n	8001786 <update_round_count+0x42>
        feedback->round_cnt--;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60da      	str	r2, [r3, #12]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <parse_speed_controller_feedback>:

void parse_speed_controller_feedback(uint16_t can_id, uint8_t *RxData, SpeedControllerFeedback *feedback)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	81fb      	strh	r3, [r7, #14]
    if (can_id >= 0x201 && can_id <= 0x208)
 80017a2:	89fb      	ldrh	r3, [r7, #14]
 80017a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017a8:	d962      	bls.n	8001870 <parse_speed_controller_feedback+0xdc>
 80017aa:	89fb      	ldrh	r3, [r7, #14]
 80017ac:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 80017b0:	d85e      	bhi.n	8001870 <parse_speed_controller_feedback+0xdc>
    {
        _flag = 5;
 80017b2:	4b31      	ldr	r3, [pc, #196]	@ (8001878 <parse_speed_controller_feedback+0xe4>)
 80017b4:	2205      	movs	r2, #5
 80017b6:	701a      	strb	r2, [r3, #0]
        feedback->last_angle_deg = feedback->angle_deg;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	885a      	ldrh	r2, [r3, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	801a      	strh	r2, [r3, #0]
        feedback->controller_id = can_id - 0x200;
 80017c0:	89fb      	ldrh	r3, [r7, #14]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	729a      	strb	r2, [r3, #10]
        feedback->angle_deg = (int16_t)(RxData[0] << 8) | RxData[1];
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	b21b      	sxth	r3, r3
 80017dc:	b29a      	uxth	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	805a      	strh	r2, [r3, #2]
        feedback->speed_rpm = (int16_t)((RxData[2] << 8) | RxData[3]);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	3302      	adds	r3, #2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	3303      	adds	r3, #3
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b21a      	sxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	80da      	strh	r2, [r3, #6]
        velocity_outshaft = (float)feedback->speed_rpm / 36.0f;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180a:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800187c <parse_speed_controller_feedback+0xe8>
 800180e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001812:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <parse_speed_controller_feedback+0xec>)
 8001814:	edc3 7a00 	vstr	s15, [r3]
        feedback->current_mA = (int16_t)((RxData[4] << 8) | RxData[5]);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	3304      	adds	r3, #4
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	b21a      	sxth	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	3305      	adds	r3, #5
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b21b      	sxth	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b21a      	sxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	811a      	strh	r2, [r3, #8]
        rotor_angle = (float)feedback->angle_deg * 360.0f / 8191.0f;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	885b      	ldrh	r3, [r3, #2]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001884 <parse_speed_controller_feedback+0xf0>
 8001842:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001846:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001888 <parse_speed_controller_feedback+0xf4>
 800184a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <parse_speed_controller_feedback+0xf8>)
 8001850:	edc3 7a00 	vstr	s15, [r3]

        update_round_count(feedback); // Call the helper function
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff75 	bl	8001744 <update_round_count>

        feedback->total_angle = feedback->round_cnt * 8192 + feedback->angle_deg - feedback->offset_angle;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	035b      	lsls	r3, r3, #13
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	8852      	ldrh	r2, [r2, #2]
 8001864:	4413      	add	r3, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	8892      	ldrh	r2, [r2, #4]
 800186a:	1a9a      	subs	r2, r3, r2
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	611a      	str	r2, [r3, #16]
    }
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000378 	.word	0x20000378
 800187c:	42100000 	.word	0x42100000
 8001880:	20000380 	.word	0x20000380
 8001884:	43b40000 	.word	0x43b40000
 8001888:	45fff800 	.word	0x45fff800
 800188c:	2000037c 	.word	0x2000037c

08001890 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001898:	4b13      	ldr	r3, [pc, #76]	@ (80018e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800189a:	4a14      	ldr	r2, [pc, #80]	@ (80018ec <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800189c:	2100      	movs	r1, #0
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fe10 	bl	80024c4 <HAL_CAN_GetRxMessage>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    {
        Error_Handler();
 80018aa:	f7ff fedd 	bl	8001668 <Error_Handler>
    }
    if(!offset)
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	f083 0301 	eor.w	r3, r3, #1
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
    {
       get_moto_offset(&feedback,RxData);
 80018bc:	490a      	ldr	r1, [pc, #40]	@ (80018e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80018c0:	f7ff ff24 	bl	800170c <get_moto_offset>
       offset=1;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
    }
    parse_speed_controller_feedback(RxHeader.StdId, RxData, &feedback);
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4a08      	ldr	r2, [pc, #32]	@ (80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80018d2:	4905      	ldr	r1, [pc, #20]	@ (80018e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff5d 	bl	8001794 <parse_speed_controller_feedback>

    _flag = 2;
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000328 	.word	0x20000328
 80018ec:	200002f4 	.word	0x200002f4
 80018f0:	20000384 	.word	0x20000384
 80018f4:	20000364 	.word	0x20000364
 80018f8:	20000378 	.word	0x20000378

080018fc <CAN_FilterConfig>:

void CAN_FilterConfig(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <CAN_FilterConfig+0x58>)
 8001902:	2201      	movs	r2, #1
 8001904:	621a      	str	r2, [r3, #32]
    canfilterconfig.FilterBank = 0;
 8001906:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <CAN_FilterConfig+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <CAN_FilterConfig+0x58>)
 800190e:	2200      	movs	r2, #0
 8001910:	611a      	str	r2, [r3, #16]
    canfilterconfig.FilterIdHigh = 0x0000;
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <CAN_FilterConfig+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <CAN_FilterConfig+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0000;
 800191e:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <CAN_FilterConfig+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 8001924:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <CAN_FilterConfig+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <CAN_FilterConfig+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <CAN_FilterConfig+0x58>)
 8001932:	2201      	movs	r2, #1
 8001934:	61da      	str	r2, [r3, #28]
    canfilterconfig.SlaveStartFilterBank = 14;
 8001936:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <CAN_FilterConfig+0x58>)
 8001938:	220e      	movs	r2, #14
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24

    if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 800193c:	4905      	ldr	r1, [pc, #20]	@ (8001954 <CAN_FilterConfig+0x58>)
 800193e:	4806      	ldr	r0, [pc, #24]	@ (8001958 <CAN_FilterConfig+0x5c>)
 8001940:	f000 fbcc 	bl	80020dc <HAL_CAN_ConfigFilter>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <CAN_FilterConfig+0x52>
    {
        Error_Handler();
 800194a:	f7ff fe8d 	bl	8001668 <Error_Handler>
    }
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	2000033c 	.word	0x2000033c
 8001958:	2000023c 	.word	0x2000023c

0800195c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <HAL_MspInit+0x4c>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001970:	6453      	str	r3, [r2, #68]	@ 0x44
 8001972:	4b0d      	ldr	r3, [pc, #52]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a21      	ldr	r2, [pc, #132]	@ (8001a50 <HAL_CAN_MspInit+0xa4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d13b      	bne.n	8001a46 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <HAL_CAN_MspInit+0xa8>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a54 <HAL_CAN_MspInit+0xa8>)
 80019d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019de:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <HAL_CAN_MspInit+0xa8>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <HAL_CAN_MspInit+0xa8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a18      	ldr	r2, [pc, #96]	@ (8001a54 <HAL_CAN_MspInit+0xa8>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <HAL_CAN_MspInit+0xa8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a06:	2303      	movs	r3, #3
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a16:	2309      	movs	r3, #9
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1a:	f107 0314 	add.w	r3, r7, #20
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <HAL_CAN_MspInit+0xac>)
 8001a22:	f001 fa6b 	bl	8002efc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2014      	movs	r0, #20
 8001a2c:	f001 f99d 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a30:	2014      	movs	r0, #20
 8001a32:	f001 f9b6 	bl	8002da2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2015      	movs	r0, #21
 8001a3c:	f001 f995 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001a40:	2015      	movs	r0, #21
 8001a42:	f001 f9ae 	bl	8002da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	@ 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40006400 	.word	0x40006400
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020c00 	.word	0x40020c00

08001a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <HAL_TIM_Base_MspInit+0x48>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d115      	bne.n	8001a9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x4c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x4c>)
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x4c>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2036      	movs	r0, #54	@ 0x36
 8001a90:	f001 f96b 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a94:	2036      	movs	r0, #54	@ 0x36
 8001a96:	f001 f984 	bl	8002da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40001000 	.word	0x40001000
 8001aa8:	40023800 	.word	0x40023800

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	@ 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b40 <HAL_UART_MspInit+0x94>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d134      	bne.n	8001b38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_UART_MspInit+0x98>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b18:	2307      	movs	r3, #7
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <HAL_UART_MspInit+0x9c>)
 8001b24:	f001 f9ea 	bl	8002efc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2025      	movs	r0, #37	@ 0x25
 8001b2e:	f001 f91c 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b32:	2025      	movs	r0, #37	@ 0x25
 8001b34:	f001 f935 	bl	8002da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	@ 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40011000 	.word	0x40011000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000

08001b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <NMI_Handler+0x4>

08001b54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <HardFault_Handler+0x4>

08001b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <MemManage_Handler+0x4>

08001b64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba2:	f000 f97f 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <CAN1_RX0_IRQHandler+0x10>)
 8001bb2:	f000 fdcf 	bl	8002754 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000023c 	.word	0x2000023c

08001bc0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <CAN1_RX1_IRQHandler+0x10>)
 8001bc6:	f000 fdc5 	bl	8002754 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000023c 	.word	0x2000023c

08001bd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <USART1_IRQHandler+0x10>)
 8001bda:	f002 fc31 	bl	8004440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200002ac 	.word	0x200002ac

08001be8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <TIM6_DAC_IRQHandler+0x10>)
 8001bee:	f002 f8d3 	bl	8003d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000264 	.word	0x20000264

08001bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_kill>:

int _kill(int pid, int sig)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c16:	f004 fb75 	bl	8006304 <__errno>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2216      	movs	r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_exit>:

void _exit (int status)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ffe7 	bl	8001c0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c3e:	bf00      	nop
 8001c40:	e7fd      	b.n	8001c3e <_exit+0x12>

08001c42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e00a      	b.n	8001c6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c54:	f3af 8000 	nop.w
 8001c58:	4601      	mov	r1, r0
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	60ba      	str	r2, [r7, #8]
 8001c60:	b2ca      	uxtb	r2, r1
 8001c62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbf0      	blt.n	8001c54 <_read+0x12>
  }

  return len;
 8001c72:	687b      	ldr	r3, [r7, #4]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e009      	b.n	8001ca2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	60ba      	str	r2, [r7, #8]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	dbf1      	blt.n	8001c8e <_write+0x12>
  }
  return len;
 8001caa:	687b      	ldr	r3, [r7, #4]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_close>:

int _close(int file)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cdc:	605a      	str	r2, [r3, #4]
  return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_isatty>:

int _isatty(int file)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d24:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <_sbrk+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <_sbrk+0x60>)
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <_sbrk+0x64>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	@ (8001d84 <_sbrk+0x68>)
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d207      	bcs.n	8001d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d4c:	f004 fada 	bl	8006304 <__errno>
 8001d50:	4603      	mov	r3, r0
 8001d52:	220c      	movs	r2, #12
 8001d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	e009      	b.n	8001d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d62:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a05      	ldr	r2, [pc, #20]	@ (8001d80 <_sbrk+0x64>)
 8001d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20020000 	.word	0x20020000
 8001d7c:	00000400 	.word	0x00000400
 8001d80:	20000388 	.word	0x20000388
 8001d84:	200004e0 	.word	0x200004e0

08001d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <SystemInit+0x20>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <SystemInit+0x20>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001dac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001de4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001db0:	f7ff ffea 	bl	8001d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db4:	480c      	ldr	r0, [pc, #48]	@ (8001de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001db6:	490d      	ldr	r1, [pc, #52]	@ (8001dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dbc:	e002      	b.n	8001dc4 <LoopCopyDataInit>

08001dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc2:	3304      	adds	r3, #4

08001dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc8:	d3f9      	bcc.n	8001dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dca:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd0:	e001      	b.n	8001dd6 <LoopFillZerobss>

08001dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd4:	3204      	adds	r2, #4

08001dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd8:	d3fb      	bcc.n	8001dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dda:	f004 fa99 	bl	8006310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dde:	f7ff fa73 	bl	80012c8 <main>
  bx  lr    
 8001de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001df0:	080087bc 	.word	0x080087bc
  ldr r2, =_sbss
 8001df4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001df8:	200004dc 	.word	0x200004dc

08001dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e04:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <HAL_Init+0x40>)
 8001e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e10:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <HAL_Init+0x40>)
 8001e16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_Init+0x40>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 ff93 	bl	8002d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	200f      	movs	r0, #15
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fd92 	bl	800195c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 ffab 	bl	8002dbe <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 ff73 	bl	8002d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000004 	.word	0x20000004

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	2000038c 	.word	0x2000038c

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	2000038c 	.word	0x2000038c

08001ee4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0ed      	b.n	80020d2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fd52 	bl	80019ac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f18:	f7ff ffd8 	bl	8001ecc <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f1e:	e012      	b.n	8001f46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f20:	f7ff ffd4 	bl	8001ecc <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b0a      	cmp	r3, #10
 8001f2c:	d90b      	bls.n	8001f46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2205      	movs	r2, #5
 8001f3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0c5      	b.n	80020d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0e5      	beq.n	8001f20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0202 	bic.w	r2, r2, #2
 8001f62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f64:	f7ff ffb2 	bl	8001ecc <HAL_GetTick>
 8001f68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f6a:	e012      	b.n	8001f92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f6c:	f7ff ffae 	bl	8001ecc <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b0a      	cmp	r3, #10
 8001f78:	d90b      	bls.n	8001f92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2205      	movs	r2, #5
 8001f8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e09f      	b.n	80020d2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1e5      	bne.n	8001f6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7e1b      	ldrb	r3, [r3, #24]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d108      	bne.n	8001fba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e007      	b.n	8001fca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7e5b      	ldrb	r3, [r3, #25]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d108      	bne.n	8001fe4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e007      	b.n	8001ff4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7e9b      	ldrb	r3, [r3, #26]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d108      	bne.n	800200e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0220 	orr.w	r2, r2, #32
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e007      	b.n	800201e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0220 	bic.w	r2, r2, #32
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7edb      	ldrb	r3, [r3, #27]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d108      	bne.n	8002038 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0210 	bic.w	r2, r2, #16
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e007      	b.n	8002048 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0210 	orr.w	r2, r2, #16
 8002046:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7f1b      	ldrb	r3, [r3, #28]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d108      	bne.n	8002062 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0208 	orr.w	r2, r2, #8
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e007      	b.n	8002072 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0208 	bic.w	r2, r2, #8
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	7f5b      	ldrb	r3, [r3, #29]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0204 	orr.w	r2, r2, #4
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e007      	b.n	800209c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0204 	bic.w	r2, r2, #4
 800209a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	ea42 0103 	orr.w	r1, r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80020f4:	7cfb      	ldrb	r3, [r7, #19]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d003      	beq.n	8002102 <HAL_CAN_ConfigFilter+0x26>
 80020fa:	7cfb      	ldrb	r3, [r7, #19]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	f040 80be 	bne.w	800227e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002102:	4b65      	ldr	r3, [pc, #404]	@ (8002298 <HAL_CAN_ConfigFilter+0x1bc>)
 8002104:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800210c:	f043 0201 	orr.w	r2, r3, #1
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800211c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	021b      	lsls	r3, r3, #8
 8002132:	431a      	orrs	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2201      	movs	r2, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	43db      	mvns	r3, r3
 8002154:	401a      	ands	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d123      	bne.n	80021ac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	401a      	ands	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002186:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3248      	adds	r2, #72	@ 0x48
 800218c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021a2:	6979      	ldr	r1, [r7, #20]
 80021a4:	3348      	adds	r3, #72	@ 0x48
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	440b      	add	r3, r1
 80021aa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d122      	bne.n	80021fa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	431a      	orrs	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021d4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3248      	adds	r2, #72	@ 0x48
 80021da:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021ee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021f0:	6979      	ldr	r1, [r7, #20]
 80021f2:	3348      	adds	r3, #72	@ 0x48
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	43db      	mvns	r3, r3
 800220c:	401a      	ands	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002214:	e007      	b.n	8002226 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	431a      	orrs	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43db      	mvns	r3, r3
 8002238:	401a      	ands	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002240:	e007      	b.n	8002252 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	431a      	orrs	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	431a      	orrs	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002270:	f023 0201 	bic.w	r2, r3, #1
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e006      	b.n	800228c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
  }
}
 800228c:	4618      	mov	r0, r3
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40006400 	.word	0x40006400

0800229c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d12e      	bne.n	800230e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022c8:	f7ff fe00 	bl	8001ecc <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022ce:	e012      	b.n	80022f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022d0:	f7ff fdfc 	bl	8001ecc <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b0a      	cmp	r3, #10
 80022dc:	d90b      	bls.n	80022f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2205      	movs	r2, #5
 80022ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e012      	b.n	800231c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e5      	bne.n	80022d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e006      	b.n	800231c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
  }
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002338:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002342:	7ffb      	ldrb	r3, [r7, #31]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d003      	beq.n	8002350 <HAL_CAN_AddTxMessage+0x2c>
 8002348:	7ffb      	ldrb	r3, [r7, #31]
 800234a:	2b02      	cmp	r3, #2
 800234c:	f040 80ad 	bne.w	80024aa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8095 	beq.w	800249a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	0e1b      	lsrs	r3, r3, #24
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800237a:	2201      	movs	r2, #1
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10d      	bne.n	80023a8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002396:	68f9      	ldr	r1, [r7, #12]
 8002398:	6809      	ldr	r1, [r1, #0]
 800239a:	431a      	orrs	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3318      	adds	r3, #24
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	440b      	add	r3, r1
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	e00f      	b.n	80023c8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023b2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023b8:	68f9      	ldr	r1, [r7, #12]
 80023ba:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80023bc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3318      	adds	r3, #24
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	440b      	add	r3, r1
 80023c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6819      	ldr	r1, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3318      	adds	r3, #24
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	440b      	add	r3, r1
 80023d8:	3304      	adds	r3, #4
 80023da:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	7d1b      	ldrb	r3, [r3, #20]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d111      	bne.n	8002408 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3318      	adds	r3, #24
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	3304      	adds	r3, #4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	6811      	ldr	r1, [r2, #0]
 80023f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3318      	adds	r3, #24
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	440b      	add	r3, r1
 8002404:	3304      	adds	r3, #4
 8002406:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3307      	adds	r3, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	061a      	lsls	r2, r3, #24
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3306      	adds	r3, #6
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3305      	adds	r3, #5
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	4313      	orrs	r3, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	3204      	adds	r2, #4
 8002428:	7812      	ldrb	r2, [r2, #0]
 800242a:	4610      	mov	r0, r2
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	6811      	ldr	r1, [r2, #0]
 8002430:	ea43 0200 	orr.w	r2, r3, r0
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	440b      	add	r3, r1
 800243a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800243e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3303      	adds	r3, #3
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	061a      	lsls	r2, r3, #24
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3302      	adds	r3, #2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3301      	adds	r3, #1
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	4313      	orrs	r3, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	7812      	ldrb	r2, [r2, #0]
 8002460:	4610      	mov	r0, r2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	6811      	ldr	r1, [r2, #0]
 8002466:	ea43 0200 	orr.w	r2, r3, r0
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	440b      	add	r3, r1
 8002470:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002474:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	3318      	adds	r3, #24
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	4413      	add	r3, r2
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	6811      	ldr	r1, [r2, #0]
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	3318      	adds	r3, #24
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	440b      	add	r3, r1
 8002494:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e00e      	b.n	80024b8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e006      	b.n	80024b8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
  }
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3724      	adds	r7, #36	@ 0x24
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d003      	beq.n	80024e8 <HAL_CAN_GetRxMessage+0x24>
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	f040 8103 	bne.w	80026ee <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10e      	bne.n	800250c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d116      	bne.n	800252a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0f7      	b.n	80026fc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0e8      	b.n	80026fc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	331b      	adds	r3, #27
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	4413      	add	r3, r2
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0204 	and.w	r2, r3, #4
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10c      	bne.n	8002562 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	331b      	adds	r3, #27
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4413      	add	r3, r2
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	0d5b      	lsrs	r3, r3, #21
 8002558:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e00b      	b.n	800257a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	331b      	adds	r3, #27
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	4413      	add	r3, r2
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	331b      	adds	r3, #27
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	4413      	add	r3, r2
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0202 	and.w	r2, r3, #2
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	331b      	adds	r3, #27
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4413      	add	r3, r2
 800259c:	3304      	adds	r3, #4
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2208      	movs	r2, #8
 80025ac:	611a      	str	r2, [r3, #16]
 80025ae:	e00b      	b.n	80025c8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	331b      	adds	r3, #27
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	4413      	add	r3, r2
 80025bc:	3304      	adds	r3, #4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 020f 	and.w	r2, r3, #15
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	331b      	adds	r3, #27
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	4413      	add	r3, r2
 80025d4:	3304      	adds	r3, #4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	331b      	adds	r3, #27
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	4413      	add	r3, r2
 80025ec:	3304      	adds	r3, #4
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	4413      	add	r3, r2
 8002602:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	4413      	add	r3, r2
 8002618:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0a1a      	lsrs	r2, r3, #8
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	4413      	add	r3, r2
 8002632:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0c1a      	lsrs	r2, r3, #16
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	3302      	adds	r3, #2
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	4413      	add	r3, r2
 800264c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0e1a      	lsrs	r2, r3, #24
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	3303      	adds	r3, #3
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	4413      	add	r3, r2
 8002666:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	3304      	adds	r3, #4
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4413      	add	r3, r2
 800267e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0a1a      	lsrs	r2, r3, #8
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	3305      	adds	r3, #5
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	4413      	add	r3, r2
 8002698:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	0c1a      	lsrs	r2, r3, #16
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	3306      	adds	r3, #6
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	4413      	add	r3, r2
 80026b2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0e1a      	lsrs	r2, r3, #24
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	3307      	adds	r3, #7
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d108      	bne.n	80026da <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0220 	orr.w	r2, r2, #32
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	e007      	b.n	80026ea <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0220 	orr.w	r2, r2, #32
 80026e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e006      	b.n	80026fc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
  }
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002718:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d002      	beq.n	8002726 <HAL_CAN_ActivateNotification+0x1e>
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d109      	bne.n	800273a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6959      	ldr	r1, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	e006      	b.n	8002748 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
  }
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	@ 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d07c      	beq.n	8002894 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d023      	beq.n	80027ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2201      	movs	r2, #1
 80027aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f983 	bl	8002ac2 <HAL_CAN_TxMailbox0CompleteCallback>
 80027bc:	e016      	b.n	80027ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d0:	e00c      	b.n	80027ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d004      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e4:	e002      	b.n	80027ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f989 	bl	8002afe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d024      	beq.n	8002840 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f963 	bl	8002ad6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002810:	e016      	b.n	8002840 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
 8002824:	e00c      	b.n	8002840 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
 8002838:	e002      	b.n	8002840 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f969 	bl	8002b12 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d024      	beq.n	8002894 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002852:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f943 	bl	8002aea <HAL_CAN_TxMailbox2CompleteCallback>
 8002864:	e016      	b.n	8002894 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
 8002878:	e00c      	b.n	8002894 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d004      	beq.n	800288e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
 800288c:	e002      	b.n	8002894 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f949 	bl	8002b26 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2210      	movs	r2, #16
 80028b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f930 	bl	8002b3a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe ffcc 	bl	8001890 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00c      	beq.n	800291c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2210      	movs	r2, #16
 800291a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d006      	beq.n	800293e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2208      	movs	r2, #8
 8002936:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f912 	bl	8002b62 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	d009      	beq.n	800295c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d002      	beq.n	800295c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f8f9 	bl	8002b4e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d006      	beq.n	800297e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2210      	movs	r2, #16
 8002976:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f8fc 	bl	8002b76 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00b      	beq.n	80029a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2208      	movs	r2, #8
 8002998:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8f5 	bl	8002b8a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d07b      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d072      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d008      	beq.n	80029d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	f043 0302 	orr.w	r3, r3, #2
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d043      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d03e      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a22:	2b60      	cmp	r3, #96	@ 0x60
 8002a24:	d02b      	beq.n	8002a7e <HAL_CAN_IRQHandler+0x32a>
 8002a26:	2b60      	cmp	r3, #96	@ 0x60
 8002a28:	d82e      	bhi.n	8002a88 <HAL_CAN_IRQHandler+0x334>
 8002a2a:	2b50      	cmp	r3, #80	@ 0x50
 8002a2c:	d022      	beq.n	8002a74 <HAL_CAN_IRQHandler+0x320>
 8002a2e:	2b50      	cmp	r3, #80	@ 0x50
 8002a30:	d82a      	bhi.n	8002a88 <HAL_CAN_IRQHandler+0x334>
 8002a32:	2b40      	cmp	r3, #64	@ 0x40
 8002a34:	d019      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x316>
 8002a36:	2b40      	cmp	r3, #64	@ 0x40
 8002a38:	d826      	bhi.n	8002a88 <HAL_CAN_IRQHandler+0x334>
 8002a3a:	2b30      	cmp	r3, #48	@ 0x30
 8002a3c:	d010      	beq.n	8002a60 <HAL_CAN_IRQHandler+0x30c>
 8002a3e:	2b30      	cmp	r3, #48	@ 0x30
 8002a40:	d822      	bhi.n	8002a88 <HAL_CAN_IRQHandler+0x334>
 8002a42:	2b10      	cmp	r3, #16
 8002a44:	d002      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x2f8>
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d005      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a4a:	e01d      	b.n	8002a88 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a54:	e019      	b.n	8002a8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	f043 0310 	orr.w	r3, r3, #16
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a5e:	e014      	b.n	8002a8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	f043 0320 	orr.w	r3, r3, #32
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a68:	e00f      	b.n	8002a8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a72:	e00a      	b.n	8002a8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a7c:	e005      	b.n	8002a8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a86:	e000      	b.n	8002a8a <HAL_CAN_IRQHandler+0x336>
            break;
 8002a88:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	699a      	ldr	r2, [r3, #24]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002a98:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f872 	bl	8002b9e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	@ 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be6:	4a04      	ldr	r2, [pc, #16]	@ (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	60d3      	str	r3, [r2, #12]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c00:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <__NVIC_GetPriorityGrouping+0x18>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	f003 0307 	and.w	r3, r3, #7
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	db0b      	blt.n	8002c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4907      	ldr	r1, [pc, #28]	@ (8002c50 <__NVIC_EnableIRQ+0x38>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2001      	movs	r0, #1
 8002c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000e100 	.word	0xe000e100

08002c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db0a      	blt.n	8002c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	490c      	ldr	r1, [pc, #48]	@ (8002ca0 <__NVIC_SetPriority+0x4c>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	440b      	add	r3, r1
 8002c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c7c:	e00a      	b.n	8002c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4908      	ldr	r1, [pc, #32]	@ (8002ca4 <__NVIC_SetPriority+0x50>)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	440b      	add	r3, r1
 8002c92:	761a      	strb	r2, [r3, #24]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	@ 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f1c3 0307 	rsb	r3, r3, #7
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf28      	it	cs
 8002cc6:	2304      	movcs	r3, #4
 8002cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d902      	bls.n	8002cd8 <NVIC_EncodePriority+0x30>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3b03      	subs	r3, #3
 8002cd6:	e000      	b.n	8002cda <NVIC_EncodePriority+0x32>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	401a      	ands	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43d9      	mvns	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	4313      	orrs	r3, r2
         );
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	@ 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d20:	d301      	bcc.n	8002d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00f      	b.n	8002d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d26:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <SysTick_Config+0x40>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2e:	210f      	movs	r1, #15
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f7ff ff8e 	bl	8002c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <SysTick_Config+0x40>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3e:	4b04      	ldr	r3, [pc, #16]	@ (8002d50 <SysTick_Config+0x40>)
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	e000e010 	.word	0xe000e010

08002d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff29 	bl	8002bb4 <__NVIC_SetPriorityGrouping>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d7c:	f7ff ff3e 	bl	8002bfc <__NVIC_GetPriorityGrouping>
 8002d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f7ff ff8e 	bl	8002ca8 <NVIC_EncodePriority>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff5d 	bl	8002c54 <__NVIC_SetPriority>
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff31 	bl	8002c18 <__NVIC_EnableIRQ>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ffa2 	bl	8002d10 <SysTick_Config>
 8002dcc:	4603      	mov	r3, r0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff f872 	bl	8001ecc <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d008      	beq.n	8002e08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2280      	movs	r2, #128	@ 0x80
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e052      	b.n	8002eae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0216 	bic.w	r2, r2, #22
 8002e16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <HAL_DMA_Abort+0x62>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0208 	bic.w	r2, r2, #8
 8002e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e58:	e013      	b.n	8002e82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5a:	f7ff f837 	bl	8001ecc <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d90c      	bls.n	8002e82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e015      	b.n	8002eae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e4      	bne.n	8002e5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	223f      	movs	r2, #63	@ 0x3f
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2280      	movs	r2, #128	@ 0x80
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e00c      	b.n	8002eee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	@ 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e16b      	b.n	80031f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 815a 	bne.w	80031ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d005      	beq.n	8002f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d130      	bne.n	8002fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0201 	and.w	r2, r3, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d017      	beq.n	8002fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	69b9      	ldr	r1, [r7, #24]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80b4 	beq.w	80031ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b60      	ldr	r3, [pc, #384]	@ (8003208 <HAL_GPIO_Init+0x30c>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	4a5f      	ldr	r2, [pc, #380]	@ (8003208 <HAL_GPIO_Init+0x30c>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003090:	6453      	str	r3, [r2, #68]	@ 0x44
 8003092:	4b5d      	ldr	r3, [pc, #372]	@ (8003208 <HAL_GPIO_Init+0x30c>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309e:	4a5b      	ldr	r2, [pc, #364]	@ (800320c <HAL_GPIO_Init+0x310>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a52      	ldr	r2, [pc, #328]	@ (8003210 <HAL_GPIO_Init+0x314>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02b      	beq.n	8003122 <HAL_GPIO_Init+0x226>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a51      	ldr	r2, [pc, #324]	@ (8003214 <HAL_GPIO_Init+0x318>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d025      	beq.n	800311e <HAL_GPIO_Init+0x222>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a50      	ldr	r2, [pc, #320]	@ (8003218 <HAL_GPIO_Init+0x31c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01f      	beq.n	800311a <HAL_GPIO_Init+0x21e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4f      	ldr	r2, [pc, #316]	@ (800321c <HAL_GPIO_Init+0x320>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <HAL_GPIO_Init+0x21a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003220 <HAL_GPIO_Init+0x324>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_Init+0x216>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003224 <HAL_GPIO_Init+0x328>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00d      	beq.n	800310e <HAL_GPIO_Init+0x212>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003228 <HAL_GPIO_Init+0x32c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_Init+0x20e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4b      	ldr	r2, [pc, #300]	@ (800322c <HAL_GPIO_Init+0x330>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_GPIO_Init+0x20a>
 8003102:	2307      	movs	r3, #7
 8003104:	e00e      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003106:	2308      	movs	r3, #8
 8003108:	e00c      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800310a:	2306      	movs	r3, #6
 800310c:	e00a      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800310e:	2305      	movs	r3, #5
 8003110:	e008      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003112:	2304      	movs	r3, #4
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003116:	2303      	movs	r3, #3
 8003118:	e004      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800311a:	2302      	movs	r3, #2
 800311c:	e002      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003122:	2300      	movs	r3, #0
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f002 0203 	and.w	r2, r2, #3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4093      	lsls	r3, r2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003134:	4935      	ldr	r1, [pc, #212]	@ (800320c <HAL_GPIO_Init+0x310>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003142:	4b3b      	ldr	r3, [pc, #236]	@ (8003230 <HAL_GPIO_Init+0x334>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003166:	4a32      	ldr	r2, [pc, #200]	@ (8003230 <HAL_GPIO_Init+0x334>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800316c:	4b30      	ldr	r3, [pc, #192]	@ (8003230 <HAL_GPIO_Init+0x334>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003190:	4a27      	ldr	r2, [pc, #156]	@ (8003230 <HAL_GPIO_Init+0x334>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003196:	4b26      	ldr	r3, [pc, #152]	@ (8003230 <HAL_GPIO_Init+0x334>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003230 <HAL_GPIO_Init+0x334>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <HAL_GPIO_Init+0x334>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e4:	4a12      	ldr	r2, [pc, #72]	@ (8003230 <HAL_GPIO_Init+0x334>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f67f ae90 	bls.w	8002f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3724      	adds	r7, #36	@ 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	40013800 	.word	0x40013800
 8003210:	40020000 	.word	0x40020000
 8003214:	40020400 	.word	0x40020400
 8003218:	40020800 	.word	0x40020800
 800321c:	40020c00 	.word	0x40020c00
 8003220:	40021000 	.word	0x40021000
 8003224:	40021400 	.word	0x40021400
 8003228:	40021800 	.word	0x40021800
 800322c:	40021c00 	.word	0x40021c00
 8003230:	40013c00 	.word	0x40013c00

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003250:	e003      	b.n	800325a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003278:	887a      	ldrh	r2, [r7, #2]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4013      	ands	r3, r2
 800327e:	041a      	lsls	r2, r3, #16
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43d9      	mvns	r1, r3
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	400b      	ands	r3, r1
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e267      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d075      	beq.n	80033a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032ba:	4b88      	ldr	r3, [pc, #544]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d00c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4b85      	ldr	r3, [pc, #532]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d112      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b82      	ldr	r3, [pc, #520]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032de:	d10b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	4b7e      	ldr	r3, [pc, #504]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d157      	bne.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e242      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x74>
 8003302:	4b76      	ldr	r3, [pc, #472]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a75      	ldr	r2, [pc, #468]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4b70      	ldr	r3, [pc, #448]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6f      	ldr	r2, [pc, #444]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b6d      	ldr	r3, [pc, #436]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a6c      	ldr	r2, [pc, #432]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003334:	4b69      	ldr	r3, [pc, #420]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a68      	ldr	r2, [pc, #416]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b66      	ldr	r3, [pc, #408]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a65      	ldr	r2, [pc, #404]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe fdba 	bl	8001ecc <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fdb6 	bl	8001ecc <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e207      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b5b      	ldr	r3, [pc, #364]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xc0>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fda6 	bl	8001ecc <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe fda2 	bl	8001ecc <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	@ 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1f3      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	4b51      	ldr	r3, [pc, #324]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033b2:	4b4a      	ldr	r3, [pc, #296]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b47      	ldr	r3, [pc, #284]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b44      	ldr	r3, [pc, #272]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b41      	ldr	r3, [pc, #260]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1c7      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b3b      	ldr	r3, [pc, #236]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4937      	ldr	r1, [pc, #220]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e03a      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b34      	ldr	r3, [pc, #208]	@ (80034e0 <HAL_RCC_OscConfig+0x244>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe fd5b 	bl	8001ecc <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341a:	f7fe fd57 	bl	8001ecc <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e1a8      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	4b2b      	ldr	r3, [pc, #172]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b28      	ldr	r3, [pc, #160]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4925      	ldr	r1, [pc, #148]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344e:	4b24      	ldr	r3, [pc, #144]	@ (80034e0 <HAL_RCC_OscConfig+0x244>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fd3a 	bl	8001ecc <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800345c:	f7fe fd36 	bl	8001ecc <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e187      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d036      	beq.n	80034f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	4b15      	ldr	r3, [pc, #84]	@ (80034e4 <HAL_RCC_OscConfig+0x248>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe fd1a 	bl	8001ecc <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe fd16 	bl	8001ecc <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e167      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b0b      	ldr	r3, [pc, #44]	@ (80034dc <HAL_RCC_OscConfig+0x240>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x200>
 80034ba:	e01b      	b.n	80034f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4b09      	ldr	r3, [pc, #36]	@ (80034e4 <HAL_RCC_OscConfig+0x248>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fe fd03 	bl	8001ecc <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e00e      	b.n	80034e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fe fcff 	bl	8001ecc <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d907      	bls.n	80034e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e150      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 80034dc:	40023800 	.word	0x40023800
 80034e0:	42470000 	.word	0x42470000
 80034e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	4b88      	ldr	r3, [pc, #544]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1ea      	bne.n	80034ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8097 	beq.w	8003630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003506:	4b81      	ldr	r3, [pc, #516]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60bb      	str	r3, [r7, #8]
 8003516:	4b7d      	ldr	r3, [pc, #500]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	4a7c      	ldr	r2, [pc, #496]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	@ 0x40
 8003522:	4b7a      	ldr	r3, [pc, #488]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b77      	ldr	r3, [pc, #476]	@ (8003710 <HAL_RCC_OscConfig+0x474>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d118      	bne.n	8003570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800353e:	4b74      	ldr	r3, [pc, #464]	@ (8003710 <HAL_RCC_OscConfig+0x474>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a73      	ldr	r2, [pc, #460]	@ (8003710 <HAL_RCC_OscConfig+0x474>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354a:	f7fe fcbf 	bl	8001ecc <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003552:	f7fe fcbb 	bl	8001ecc <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e10c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	4b6a      	ldr	r3, [pc, #424]	@ (8003710 <HAL_RCC_OscConfig+0x474>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d106      	bne.n	8003586 <HAL_RCC_OscConfig+0x2ea>
 8003578:	4b64      	ldr	r3, [pc, #400]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357c:	4a63      	ldr	r2, [pc, #396]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	6713      	str	r3, [r2, #112]	@ 0x70
 8003584:	e01c      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b05      	cmp	r3, #5
 800358c:	d10c      	bne.n	80035a8 <HAL_RCC_OscConfig+0x30c>
 800358e:	4b5f      	ldr	r3, [pc, #380]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	4a5e      	ldr	r2, [pc, #376]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6713      	str	r3, [r2, #112]	@ 0x70
 800359a:	4b5c      	ldr	r3, [pc, #368]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	4a5b      	ldr	r2, [pc, #364]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0x324>
 80035a8:	4b58      	ldr	r3, [pc, #352]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ac:	4a57      	ldr	r2, [pc, #348]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035b4:	4b55      	ldr	r3, [pc, #340]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b8:	4a54      	ldr	r2, [pc, #336]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035ba:	f023 0304 	bic.w	r3, r3, #4
 80035be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fe fc80 	bl	8001ecc <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fe fc7c 	bl	8001ecc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e0cb      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e6:	4b49      	ldr	r3, [pc, #292]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ee      	beq.n	80035d0 <HAL_RCC_OscConfig+0x334>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f4:	f7fe fc6a 	bl	8001ecc <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fe fc66 	bl	8001ecc <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0b5      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003612:	4b3e      	ldr	r3, [pc, #248]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ee      	bne.n	80035fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d105      	bne.n	8003630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003624:	4b39      	ldr	r3, [pc, #228]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	4a38      	ldr	r2, [pc, #224]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800362e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a1 	beq.w	800377c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800363a:	4b34      	ldr	r3, [pc, #208]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b08      	cmp	r3, #8
 8003644:	d05c      	beq.n	8003700 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d141      	bne.n	80036d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b31      	ldr	r3, [pc, #196]	@ (8003714 <HAL_RCC_OscConfig+0x478>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7fe fc3a 	bl	8001ecc <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800365c:	f7fe fc36 	bl	8001ecc <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e087      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b27      	ldr	r3, [pc, #156]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	491b      	ldr	r1, [pc, #108]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003714 <HAL_RCC_OscConfig+0x478>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036aa:	f7fe fc0f 	bl	8001ecc <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b2:	f7fe fc0b 	bl	8001ecc <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e05c      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c4:	4b11      	ldr	r3, [pc, #68]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x416>
 80036d0:	e054      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d2:	4b10      	ldr	r3, [pc, #64]	@ (8003714 <HAL_RCC_OscConfig+0x478>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fe fbf8 	bl	8001ecc <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe fbf4 	bl	8001ecc <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e045      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <HAL_RCC_OscConfig+0x470>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x444>
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d107      	bne.n	8003718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e038      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000
 8003714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003718:	4b1b      	ldr	r3, [pc, #108]	@ (8003788 <HAL_RCC_OscConfig+0x4ec>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d028      	beq.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d121      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d11a      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800374e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003750:	4293      	cmp	r3, r2
 8003752:	d111      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	3b01      	subs	r3, #1
 8003762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800

0800378c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e0cc      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037a0:	4b68      	ldr	r3, [pc, #416]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d90c      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ae:	4b65      	ldr	r3, [pc, #404]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	4b63      	ldr	r3, [pc, #396]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0307 	and.w	r3, r3, #7
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0b8      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e0:	4b59      	ldr	r3, [pc, #356]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a58      	ldr	r2, [pc, #352]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f8:	4b53      	ldr	r3, [pc, #332]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4a52      	ldr	r2, [pc, #328]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b50      	ldr	r3, [pc, #320]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	494d      	ldr	r1, [pc, #308]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d044      	beq.n	80038ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d107      	bne.n	800383a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382a:	4b47      	ldr	r3, [pc, #284]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d119      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e07f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d003      	beq.n	800384a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003846:	2b03      	cmp	r3, #3
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	4b3f      	ldr	r3, [pc, #252]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385a:	4b3b      	ldr	r3, [pc, #236]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e067      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386a:	4b37      	ldr	r3, [pc, #220]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f023 0203 	bic.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	4934      	ldr	r1, [pc, #208]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800387c:	f7fe fb26 	bl	8001ecc <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	e00a      	b.n	800389a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fe fb22 	bl	8001ecc <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e04f      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389a:	4b2b      	ldr	r3, [pc, #172]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 020c 	and.w	r2, r3, #12
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d1eb      	bne.n	8003884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ac:	4b25      	ldr	r3, [pc, #148]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d20c      	bcs.n	80038d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b22      	ldr	r3, [pc, #136]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b20      	ldr	r3, [pc, #128]	@ (8003944 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e032      	b.n	800393a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e0:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4916      	ldr	r1, [pc, #88]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038fe:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	490e      	ldr	r1, [pc, #56]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003912:	f000 f821 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003916:	4602      	mov	r2, r0
 8003918:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	490a      	ldr	r1, [pc, #40]	@ (800394c <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	5ccb      	ldrb	r3, [r1, r3]
 8003926:	fa22 f303 	lsr.w	r3, r2, r3
 800392a:	4a09      	ldr	r2, [pc, #36]	@ (8003950 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fa86 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40023c00 	.word	0x40023c00
 8003948:	40023800 	.word	0x40023800
 800394c:	0800837c 	.word	0x0800837c
 8003950:	20000000 	.word	0x20000000
 8003954:	20000004 	.word	0x20000004

08003958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b094      	sub	sp, #80	@ 0x50
 800395e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003970:	4b79      	ldr	r3, [pc, #484]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d00d      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x40>
 800397c:	2b08      	cmp	r3, #8
 800397e:	f200 80e1 	bhi.w	8003b44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x34>
 8003986:	2b04      	cmp	r3, #4
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x3a>
 800398a:	e0db      	b.n	8003b44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4b73      	ldr	r3, [pc, #460]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x204>)
 800398e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003990:	e0db      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003992:	4b73      	ldr	r3, [pc, #460]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x208>)
 8003994:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003996:	e0d8      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003998:	4b6f      	ldr	r3, [pc, #444]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d063      	beq.n	8003a76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	2200      	movs	r2, #0
 80039b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039c2:	2300      	movs	r3, #0
 80039c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80039c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039ca:	4622      	mov	r2, r4
 80039cc:	462b      	mov	r3, r5
 80039ce:	f04f 0000 	mov.w	r0, #0
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	0159      	lsls	r1, r3, #5
 80039d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039dc:	0150      	lsls	r0, r2, #5
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4621      	mov	r1, r4
 80039e4:	1a51      	subs	r1, r2, r1
 80039e6:	6139      	str	r1, [r7, #16]
 80039e8:	4629      	mov	r1, r5
 80039ea:	eb63 0301 	sbc.w	r3, r3, r1
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f04f 0300 	mov.w	r3, #0
 80039f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039fc:	4659      	mov	r1, fp
 80039fe:	018b      	lsls	r3, r1, #6
 8003a00:	4651      	mov	r1, sl
 8003a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a06:	4651      	mov	r1, sl
 8003a08:	018a      	lsls	r2, r1, #6
 8003a0a:	4651      	mov	r1, sl
 8003a0c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a10:	4659      	mov	r1, fp
 8003a12:	eb63 0901 	sbc.w	r9, r3, r1
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a2a:	4690      	mov	r8, r2
 8003a2c:	4699      	mov	r9, r3
 8003a2e:	4623      	mov	r3, r4
 8003a30:	eb18 0303 	adds.w	r3, r8, r3
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	462b      	mov	r3, r5
 8003a38:	eb49 0303 	adc.w	r3, r9, r3
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	024b      	lsls	r3, r1, #9
 8003a4e:	4621      	mov	r1, r4
 8003a50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a54:	4621      	mov	r1, r4
 8003a56:	024a      	lsls	r2, r1, #9
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a5e:	2200      	movs	r2, #0
 8003a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a68:	f7fd f8a8 	bl	8000bbc <__aeabi_uldivmod>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4613      	mov	r3, r2
 8003a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a74:	e058      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a76:	4b38      	ldr	r3, [pc, #224]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	099b      	lsrs	r3, r3, #6
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	4611      	mov	r1, r2
 8003a82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a90:	4642      	mov	r2, r8
 8003a92:	464b      	mov	r3, r9
 8003a94:	f04f 0000 	mov.w	r0, #0
 8003a98:	f04f 0100 	mov.w	r1, #0
 8003a9c:	0159      	lsls	r1, r3, #5
 8003a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa2:	0150      	lsls	r0, r2, #5
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aae:	4649      	mov	r1, r9
 8003ab0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ac0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ac4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ac8:	ebb2 040a 	subs.w	r4, r2, sl
 8003acc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	00eb      	lsls	r3, r5, #3
 8003ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ade:	00e2      	lsls	r2, r4, #3
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	4643      	mov	r3, r8
 8003ae6:	18e3      	adds	r3, r4, r3
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	464b      	mov	r3, r9
 8003aec:	eb45 0303 	adc.w	r3, r5, r3
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afe:	4629      	mov	r1, r5
 8003b00:	028b      	lsls	r3, r1, #10
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b08:	4621      	mov	r1, r4
 8003b0a:	028a      	lsls	r2, r1, #10
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b12:	2200      	movs	r2, #0
 8003b14:	61bb      	str	r3, [r7, #24]
 8003b16:	61fa      	str	r2, [r7, #28]
 8003b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1c:	f7fd f84e 	bl	8000bbc <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b28:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	3301      	adds	r3, #1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003b38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b42:	e002      	b.n	8003b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b44:	4b05      	ldr	r3, [pc, #20]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3750      	adds	r7, #80	@ 0x50
 8003b50:	46bd      	mov	sp, r7
 8003b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	00f42400 	.word	0x00f42400
 8003b60:	007a1200 	.word	0x007a1200

08003b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000000 	.word	0x20000000

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0a9b      	lsrs	r3, r3, #10
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4903      	ldr	r1, [pc, #12]	@ (8003ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	0800838c 	.word	0x0800838c

08003ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ba8:	f7ff ffdc 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	0b5b      	lsrs	r3, r3, #13
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4903      	ldr	r1, [pc, #12]	@ (8003bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	0800838c 	.word	0x0800838c

08003bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e041      	b.n	8003c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd ff32 	bl	8001a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f000 f9dc 	bl	8003fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b083      	sub	sp, #12
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a1a      	ldr	r2, [r3, #32]
 8003c78:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10f      	bne.n	8003ca2 <HAL_TIM_Base_Stop+0x38>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a1a      	ldr	r2, [r3, #32]
 8003c88:	f240 4344 	movw	r3, #1092	@ 0x444
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <HAL_TIM_Base_Stop+0x38>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d001      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e04e      	b.n	8003d6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f042 0201 	orr.w	r2, r2, #1
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a23      	ldr	r2, [pc, #140]	@ (8003d7c <HAL_TIM_Base_Start_IT+0xc4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d022      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x80>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfa:	d01d      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x80>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	@ (8003d80 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d018      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x80>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d84 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d013      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x80>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a1c      	ldr	r2, [pc, #112]	@ (8003d88 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00e      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x80>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d8c <HAL_TIM_Base_Start_IT+0xd4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d009      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x80>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a19      	ldr	r2, [pc, #100]	@ (8003d90 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d004      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x80>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a18      	ldr	r2, [pc, #96]	@ (8003d94 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d111      	bne.n	8003d5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b06      	cmp	r3, #6
 8003d48:	d010      	beq.n	8003d6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5a:	e007      	b.n	8003d6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40000c00 	.word	0x40000c00
 8003d8c:	40010400 	.word	0x40010400
 8003d90:	40014000 	.word	0x40014000
 8003d94:	40001800 	.word	0x40001800

08003d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d020      	beq.n	8003dfc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d01b      	beq.n	8003dfc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0202 	mvn.w	r2, #2
 8003dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8d2 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f8c4 	bl	8003f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f8d5 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d020      	beq.n	8003e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01b      	beq.n	8003e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f06f 0204 	mvn.w	r2, #4
 8003e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8ac 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003e34:	e005      	b.n	8003e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f89e 	bl	8003f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f8af 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d020      	beq.n	8003e94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0308 	and.w	r3, r3, #8
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01b      	beq.n	8003e94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0208 	mvn.w	r2, #8
 8003e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f886 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f878 	bl	8003f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f889 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d020      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01b      	beq.n	8003ee0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0210 	mvn.w	r2, #16
 8003eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2208      	movs	r2, #8
 8003eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f860 	bl	8003f8c <HAL_TIM_IC_CaptureCallback>
 8003ecc:	e005      	b.n	8003eda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f852 	bl	8003f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f863 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00c      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d007      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0201 	mvn.w	r2, #1
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd f93c 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f982 	bl	800422c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f834 	bl	8003fb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00c      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d007      	beq.n	8003f70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0220 	mvn.w	r2, #32
 8003f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f954 	bl	8004218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a46      	ldr	r2, [pc, #280]	@ (80040f4 <TIM_Base_SetConfig+0x12c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe6:	d00f      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a43      	ldr	r2, [pc, #268]	@ (80040f8 <TIM_Base_SetConfig+0x130>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00b      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a42      	ldr	r2, [pc, #264]	@ (80040fc <TIM_Base_SetConfig+0x134>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d007      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a41      	ldr	r2, [pc, #260]	@ (8004100 <TIM_Base_SetConfig+0x138>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d003      	beq.n	8004008 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a40      	ldr	r2, [pc, #256]	@ (8004104 <TIM_Base_SetConfig+0x13c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800400e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a35      	ldr	r2, [pc, #212]	@ (80040f4 <TIM_Base_SetConfig+0x12c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d02b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004028:	d027      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a32      	ldr	r2, [pc, #200]	@ (80040f8 <TIM_Base_SetConfig+0x130>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d023      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a31      	ldr	r2, [pc, #196]	@ (80040fc <TIM_Base_SetConfig+0x134>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01f      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a30      	ldr	r2, [pc, #192]	@ (8004100 <TIM_Base_SetConfig+0x138>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2f      	ldr	r2, [pc, #188]	@ (8004104 <TIM_Base_SetConfig+0x13c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d017      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a2e      	ldr	r2, [pc, #184]	@ (8004108 <TIM_Base_SetConfig+0x140>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2d      	ldr	r2, [pc, #180]	@ (800410c <TIM_Base_SetConfig+0x144>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2c      	ldr	r2, [pc, #176]	@ (8004110 <TIM_Base_SetConfig+0x148>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2b      	ldr	r2, [pc, #172]	@ (8004114 <TIM_Base_SetConfig+0x14c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <TIM_Base_SetConfig+0x150>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a29      	ldr	r2, [pc, #164]	@ (800411c <TIM_Base_SetConfig+0x154>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a10      	ldr	r2, [pc, #64]	@ (80040f4 <TIM_Base_SetConfig+0x12c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_Base_SetConfig+0xf8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a12      	ldr	r2, [pc, #72]	@ (8004104 <TIM_Base_SetConfig+0x13c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d103      	bne.n	80040c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d105      	bne.n	80040e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f023 0201 	bic.w	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	611a      	str	r2, [r3, #16]
  }
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40000c00 	.word	0x40000c00
 8004104:	40010400 	.word	0x40010400
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400
 8004110:	40014800 	.word	0x40014800
 8004114:	40001800 	.word	0x40001800
 8004118:	40001c00 	.word	0x40001c00
 800411c:	40002000 	.word	0x40002000

08004120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004134:	2302      	movs	r3, #2
 8004136:	e05a      	b.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a21      	ldr	r2, [pc, #132]	@ (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d022      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004184:	d01d      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1d      	ldr	r2, [pc, #116]	@ (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d018      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1b      	ldr	r2, [pc, #108]	@ (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d013      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1a      	ldr	r2, [pc, #104]	@ (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00e      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a18      	ldr	r2, [pc, #96]	@ (800420c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d009      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a17      	ldr	r2, [pc, #92]	@ (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d004      	beq.n	80041c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a15      	ldr	r2, [pc, #84]	@ (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10c      	bne.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40010400 	.word	0x40010400
 8004210:	40014000 	.word	0x40014000
 8004214:	40001800 	.word	0x40001800

08004218 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e042      	b.n	80042d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fd fc20 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2224      	movs	r2, #36	@ 0x24
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fdb3 	bl	8004df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	@ 0x28
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d175      	bne.n	80043ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_UART_Transmit+0x2c>
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e06e      	b.n	80043ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2221      	movs	r2, #33	@ 0x21
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800431e:	f7fd fdd5 	bl	8001ecc <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	88fa      	ldrh	r2, [r7, #6]
 8004328:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	88fa      	ldrh	r2, [r7, #6]
 800432e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004338:	d108      	bne.n	800434c <HAL_UART_Transmit+0x6c>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e003      	b.n	8004354 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004354:	e02e      	b.n	80043b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2200      	movs	r2, #0
 800435e:	2180      	movs	r1, #128	@ 0x80
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fb15 	bl	8004990 <UART_WaitOnFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e03a      	b.n	80043ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	3302      	adds	r3, #2
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e007      	b.n	80043a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1cb      	bne.n	8004356 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2200      	movs	r2, #0
 80043c6:	2140      	movs	r1, #64	@ 0x40
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fae1 	bl	8004990 <UART_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d005      	beq.n	80043e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e006      	b.n	80043ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	4613      	mov	r3, r2
 8004402:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b20      	cmp	r3, #32
 800440e:	d112      	bne.n	8004436 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_UART_Receive_IT+0x26>
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e00b      	b.n	8004438 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	461a      	mov	r2, r3
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fb08 	bl	8004a42 <UART_Start_Receive_IT>
 8004432:	4603      	mov	r3, r0
 8004434:	e000      	b.n	8004438 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004436:	2302      	movs	r3, #2
  }
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b0ba      	sub	sp, #232	@ 0xe8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004466:	2300      	movs	r3, #0
 8004468:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800446c:	2300      	movs	r3, #0
 800446e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800447e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <HAL_UART_IRQHandler+0x66>
 8004492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004496:	f003 0320 	and.w	r3, r3, #32
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fbe8 	bl	8004c74 <UART_Receive_IT>
      return;
 80044a4:	e25b      	b.n	800495e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80044a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 80de 	beq.w	800466c <HAL_UART_IRQHandler+0x22c>
 80044b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d106      	bne.n	80044ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80d1 	beq.w	800466c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_UART_IRQHandler+0xae>
 80044d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <HAL_UART_IRQHandler+0xd2>
 80044fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	f043 0202 	orr.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_UART_IRQHandler+0xf6>
 800451e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452e:	f043 0204 	orr.w	r2, r3, #4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d011      	beq.n	8004566 <HAL_UART_IRQHandler+0x126>
 8004542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d105      	bne.n	800455a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800454e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455e:	f043 0208 	orr.w	r2, r3, #8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 81f2 	beq.w	8004954 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_UART_IRQHandler+0x14e>
 800457c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fb73 	bl	8004c74 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004598:	2b40      	cmp	r3, #64	@ 0x40
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d103      	bne.n	80045ba <HAL_UART_IRQHandler+0x17a>
 80045b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d04f      	beq.n	800465a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fa7b 	bl	8004ab6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ca:	2b40      	cmp	r3, #64	@ 0x40
 80045cc:	d141      	bne.n	8004652 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3314      	adds	r3, #20
 80045f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1d9      	bne.n	80045ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d013      	beq.n	800464a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004626:	4a7e      	ldr	r2, [pc, #504]	@ (8004820 <HAL_UART_IRQHandler+0x3e0>)
 8004628:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fc41 	bl	8002eb6 <HAL_DMA_Abort_IT>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d016      	beq.n	8004668 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004644:	4610      	mov	r0, r2
 8004646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	e00e      	b.n	8004668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f98a 	bl	8004964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004650:	e00a      	b.n	8004668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f986 	bl	8004964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	e006      	b.n	8004668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f982 	bl	8004964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004666:	e175      	b.n	8004954 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	bf00      	nop
    return;
 800466a:	e173      	b.n	8004954 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004670:	2b01      	cmp	r3, #1
 8004672:	f040 814f 	bne.w	8004914 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467a:	f003 0310 	and.w	r3, r3, #16
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8148 	beq.w	8004914 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8141 	beq.w	8004914 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b2:	2b40      	cmp	r3, #64	@ 0x40
 80046b4:	f040 80b6 	bne.w	8004824 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 8145 	beq.w	8004958 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046d6:	429a      	cmp	r2, r3
 80046d8:	f080 813e 	bcs.w	8004958 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ee:	f000 8088 	beq.w	8004802 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800470c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800471e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800472a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1d9      	bne.n	80046f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800474e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004762:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004766:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800476a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e1      	bne.n	800473e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3314      	adds	r3, #20
 8004780:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800478a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800478c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3314      	adds	r3, #20
 800479a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800479e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047a6:	e841 2300 	strex	r3, r2, [r1]
 80047aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80047ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e3      	bne.n	800477a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	330c      	adds	r3, #12
 80047c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047ca:	e853 3f00 	ldrex	r3, [r3]
 80047ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047d2:	f023 0310 	bic.w	r3, r3, #16
 80047d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80047e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e3      	bne.n	80047c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe faea 	bl	8002dd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2202      	movs	r2, #2
 8004806:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004810:	b29b      	uxth	r3, r3
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	b29b      	uxth	r3, r3
 8004816:	4619      	mov	r1, r3
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f8ad 	bl	8004978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800481e:	e09b      	b.n	8004958 <HAL_UART_IRQHandler+0x518>
 8004820:	08004b7d 	.word	0x08004b7d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800482c:	b29b      	uxth	r3, r3
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 808e 	beq.w	800495c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8089 	beq.w	800495c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
 8004850:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800485a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	330c      	adds	r3, #12
 800486a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800486e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004870:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800487c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e3      	bne.n	800484a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	623b      	str	r3, [r7, #32]
   return(result);
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3314      	adds	r3, #20
 80048a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e3      	bne.n	8004882 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	330c      	adds	r3, #12
 80048ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0310 	bic.w	r3, r3, #16
 80048de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80048ec:	61fa      	str	r2, [r7, #28]
 80048ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	69b9      	ldr	r1, [r7, #24]
 80048f2:	69fa      	ldr	r2, [r7, #28]
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	617b      	str	r3, [r7, #20]
   return(result);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e3      	bne.n	80048c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004906:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f833 	bl	8004978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004912:	e023      	b.n	800495c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <HAL_UART_IRQHandler+0x4f4>
 8004920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f939 	bl	8004ba4 <UART_Transmit_IT>
    return;
 8004932:	e014      	b.n	800495e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00e      	beq.n	800495e <HAL_UART_IRQHandler+0x51e>
 8004940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f979 	bl	8004c44 <UART_EndTransmit_IT>
    return;
 8004952:	e004      	b.n	800495e <HAL_UART_IRQHandler+0x51e>
    return;
 8004954:	bf00      	nop
 8004956:	e002      	b.n	800495e <HAL_UART_IRQHandler+0x51e>
      return;
 8004958:	bf00      	nop
 800495a:	e000      	b.n	800495e <HAL_UART_IRQHandler+0x51e>
      return;
 800495c:	bf00      	nop
  }
}
 800495e:	37e8      	adds	r7, #232	@ 0xe8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	4613      	mov	r3, r2
 800499e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a0:	e03b      	b.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a8:	d037      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049aa:	f7fd fa8f 	bl	8001ecc <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	6a3a      	ldr	r2, [r7, #32]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d302      	bcc.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e03a      	b.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d023      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x8a>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b80      	cmp	r3, #128	@ 0x80
 80049d6:	d020      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x8a>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b40      	cmp	r3, #64	@ 0x40
 80049dc:	d01d      	beq.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d116      	bne.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f857 	bl	8004ab6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2208      	movs	r2, #8
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e00f      	b.n	8004a3a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d0b4      	beq.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2222      	movs	r2, #34	@ 0x22
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a86:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0220 	orr.w	r2, r2, #32
 8004aa6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b095      	sub	sp, #84	@ 0x54
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	330c      	adds	r3, #12
 8004adc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ade:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ae4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e5      	bne.n	8004abe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3314      	adds	r3, #20
 8004af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e5      	bne.n	8004af2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d119      	bne.n	8004b62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f023 0310 	bic.w	r3, r3, #16
 8004b44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b4e:	61ba      	str	r2, [r7, #24]
 8004b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b52:	6979      	ldr	r1, [r7, #20]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	e841 2300 	strex	r3, r2, [r1]
 8004b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1e5      	bne.n	8004b2e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b70:	bf00      	nop
 8004b72:	3754      	adds	r7, #84	@ 0x54
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fee4 	bl	8004964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b21      	cmp	r3, #33	@ 0x21
 8004bb6:	d13e      	bne.n	8004c36 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc0:	d114      	bne.n	8004bec <UART_Transmit_IT+0x48>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d110      	bne.n	8004bec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	1c9a      	adds	r2, r3, #2
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	621a      	str	r2, [r3, #32]
 8004bea:	e008      	b.n	8004bfe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	1c59      	adds	r1, r3, #1
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6211      	str	r1, [r2, #32]
 8004bf6:	781a      	ldrb	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10f      	bne.n	8004c32 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c20:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c30:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	e000      	b.n	8004c38 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c36:	2302      	movs	r3, #2
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c5a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7fc fa7b 	bl	8001160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08c      	sub	sp, #48	@ 0x30
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b22      	cmp	r3, #34	@ 0x22
 8004c86:	f040 80ae 	bne.w	8004de6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c92:	d117      	bne.n	8004cc4 <UART_Receive_IT+0x50>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d113      	bne.n	8004cc4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	1c9a      	adds	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004cc2:	e026      	b.n	8004d12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd6:	d007      	beq.n	8004ce8 <UART_Receive_IT+0x74>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <UART_Receive_IT+0x82>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	e008      	b.n	8004d08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	4619      	mov	r1, r3
 8004d20:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d15d      	bne.n	8004de2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0220 	bic.w	r2, r2, #32
 8004d34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695a      	ldr	r2, [r3, #20]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d135      	bne.n	8004dd8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	330c      	adds	r3, #12
 8004d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	613b      	str	r3, [r7, #16]
   return(result);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f023 0310 	bic.w	r3, r3, #16
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d92:	623a      	str	r2, [r7, #32]
 8004d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	69f9      	ldr	r1, [r7, #28]
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e5      	bne.n	8004d72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d10a      	bne.n	8004dca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff fdd1 	bl	8004978 <HAL_UARTEx_RxEventCallback>
 8004dd6:	e002      	b.n	8004dde <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7fc f9a3 	bl	8001124 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e002      	b.n	8004de8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e000      	b.n	8004de8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
  }
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3730      	adds	r7, #48	@ 0x30
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df4:	b0c0      	sub	sp, #256	@ 0x100
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	68d9      	ldr	r1, [r3, #12]
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	ea40 0301 	orr.w	r3, r0, r1
 8004e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e48:	f021 010c 	bic.w	r1, r1, #12
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e56:	430b      	orrs	r3, r1
 8004e58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6a:	6999      	ldr	r1, [r3, #24]
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	ea40 0301 	orr.w	r3, r0, r1
 8004e76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4b8f      	ldr	r3, [pc, #572]	@ (80050bc <UART_SetConfig+0x2cc>)
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d005      	beq.n	8004e90 <UART_SetConfig+0xa0>
 8004e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80050c0 <UART_SetConfig+0x2d0>)
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d104      	bne.n	8004e9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e90:	f7fe fe88 	bl	8003ba4 <HAL_RCC_GetPCLK2Freq>
 8004e94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e98:	e003      	b.n	8004ea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e9a:	f7fe fe6f 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004e9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea6:	69db      	ldr	r3, [r3, #28]
 8004ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eac:	f040 810c 	bne.w	80050c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004eba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ec2:	4622      	mov	r2, r4
 8004ec4:	462b      	mov	r3, r5
 8004ec6:	1891      	adds	r1, r2, r2
 8004ec8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004eca:	415b      	adcs	r3, r3
 8004ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	eb12 0801 	adds.w	r8, r2, r1
 8004ed8:	4629      	mov	r1, r5
 8004eda:	eb43 0901 	adc.w	r9, r3, r1
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ef2:	4690      	mov	r8, r2
 8004ef4:	4699      	mov	r9, r3
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	eb18 0303 	adds.w	r3, r8, r3
 8004efc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f00:	462b      	mov	r3, r5
 8004f02:	eb49 0303 	adc.w	r3, r9, r3
 8004f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004f1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f1e:	460b      	mov	r3, r1
 8004f20:	18db      	adds	r3, r3, r3
 8004f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f24:	4613      	mov	r3, r2
 8004f26:	eb42 0303 	adc.w	r3, r2, r3
 8004f2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f34:	f7fb fe42 	bl	8000bbc <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4b61      	ldr	r3, [pc, #388]	@ (80050c4 <UART_SetConfig+0x2d4>)
 8004f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	011c      	lsls	r4, r3, #4
 8004f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f58:	4642      	mov	r2, r8
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	1891      	adds	r1, r2, r2
 8004f5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f60:	415b      	adcs	r3, r3
 8004f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f68:	4641      	mov	r1, r8
 8004f6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f6e:	4649      	mov	r1, r9
 8004f70:	eb43 0b01 	adc.w	fp, r3, r1
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f88:	4692      	mov	sl, r2
 8004f8a:	469b      	mov	fp, r3
 8004f8c:	4643      	mov	r3, r8
 8004f8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f96:	464b      	mov	r3, r9
 8004f98:	eb4b 0303 	adc.w	r3, fp, r3
 8004f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004fb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	18db      	adds	r3, r3, r3
 8004fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fba:	4613      	mov	r3, r2
 8004fbc:	eb42 0303 	adc.w	r3, r2, r3
 8004fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004fca:	f7fb fdf7 	bl	8000bbc <__aeabi_uldivmod>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80050c4 <UART_SetConfig+0x2d4>)
 8004fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2264      	movs	r2, #100	@ 0x64
 8004fde:	fb02 f303 	mul.w	r3, r2, r3
 8004fe2:	1acb      	subs	r3, r1, r3
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fea:	4b36      	ldr	r3, [pc, #216]	@ (80050c4 <UART_SetConfig+0x2d4>)
 8004fec:	fba3 2302 	umull	r2, r3, r3, r2
 8004ff0:	095b      	lsrs	r3, r3, #5
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ff8:	441c      	add	r4, r3
 8004ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005004:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	1891      	adds	r1, r2, r2
 8005012:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005014:	415b      	adcs	r3, r3
 8005016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800501c:	4641      	mov	r1, r8
 800501e:	1851      	adds	r1, r2, r1
 8005020:	6339      	str	r1, [r7, #48]	@ 0x30
 8005022:	4649      	mov	r1, r9
 8005024:	414b      	adcs	r3, r1
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005034:	4659      	mov	r1, fp
 8005036:	00cb      	lsls	r3, r1, #3
 8005038:	4651      	mov	r1, sl
 800503a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800503e:	4651      	mov	r1, sl
 8005040:	00ca      	lsls	r2, r1, #3
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	4603      	mov	r3, r0
 8005048:	4642      	mov	r2, r8
 800504a:	189b      	adds	r3, r3, r2
 800504c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005050:	464b      	mov	r3, r9
 8005052:	460a      	mov	r2, r1
 8005054:	eb42 0303 	adc.w	r3, r2, r3
 8005058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800505c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005068:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800506c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005070:	460b      	mov	r3, r1
 8005072:	18db      	adds	r3, r3, r3
 8005074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005076:	4613      	mov	r3, r2
 8005078:	eb42 0303 	adc.w	r3, r2, r3
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800507e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005086:	f7fb fd99 	bl	8000bbc <__aeabi_uldivmod>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4b0d      	ldr	r3, [pc, #52]	@ (80050c4 <UART_SetConfig+0x2d4>)
 8005090:	fba3 1302 	umull	r1, r3, r3, r2
 8005094:	095b      	lsrs	r3, r3, #5
 8005096:	2164      	movs	r1, #100	@ 0x64
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	3332      	adds	r3, #50	@ 0x32
 80050a2:	4a08      	ldr	r2, [pc, #32]	@ (80050c4 <UART_SetConfig+0x2d4>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	f003 0207 	and.w	r2, r3, #7
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4422      	add	r2, r4
 80050b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050b8:	e106      	b.n	80052c8 <UART_SetConfig+0x4d8>
 80050ba:	bf00      	nop
 80050bc:	40011000 	.word	0x40011000
 80050c0:	40011400 	.word	0x40011400
 80050c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050cc:	2200      	movs	r2, #0
 80050ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050da:	4642      	mov	r2, r8
 80050dc:	464b      	mov	r3, r9
 80050de:	1891      	adds	r1, r2, r2
 80050e0:	6239      	str	r1, [r7, #32]
 80050e2:	415b      	adcs	r3, r3
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ea:	4641      	mov	r1, r8
 80050ec:	1854      	adds	r4, r2, r1
 80050ee:	4649      	mov	r1, r9
 80050f0:	eb43 0501 	adc.w	r5, r3, r1
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	00eb      	lsls	r3, r5, #3
 80050fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005102:	00e2      	lsls	r2, r4, #3
 8005104:	4614      	mov	r4, r2
 8005106:	461d      	mov	r5, r3
 8005108:	4643      	mov	r3, r8
 800510a:	18e3      	adds	r3, r4, r3
 800510c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005110:	464b      	mov	r3, r9
 8005112:	eb45 0303 	adc.w	r3, r5, r3
 8005116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005126:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005136:	4629      	mov	r1, r5
 8005138:	008b      	lsls	r3, r1, #2
 800513a:	4621      	mov	r1, r4
 800513c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005140:	4621      	mov	r1, r4
 8005142:	008a      	lsls	r2, r1, #2
 8005144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005148:	f7fb fd38 	bl	8000bbc <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4b60      	ldr	r3, [pc, #384]	@ (80052d4 <UART_SetConfig+0x4e4>)
 8005152:	fba3 2302 	umull	r2, r3, r3, r2
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	011c      	lsls	r4, r3, #4
 800515a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800515e:	2200      	movs	r2, #0
 8005160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005164:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800516c:	4642      	mov	r2, r8
 800516e:	464b      	mov	r3, r9
 8005170:	1891      	adds	r1, r2, r2
 8005172:	61b9      	str	r1, [r7, #24]
 8005174:	415b      	adcs	r3, r3
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800517c:	4641      	mov	r1, r8
 800517e:	1851      	adds	r1, r2, r1
 8005180:	6139      	str	r1, [r7, #16]
 8005182:	4649      	mov	r1, r9
 8005184:	414b      	adcs	r3, r1
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005194:	4659      	mov	r1, fp
 8005196:	00cb      	lsls	r3, r1, #3
 8005198:	4651      	mov	r1, sl
 800519a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800519e:	4651      	mov	r1, sl
 80051a0:	00ca      	lsls	r2, r1, #3
 80051a2:	4610      	mov	r0, r2
 80051a4:	4619      	mov	r1, r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	4642      	mov	r2, r8
 80051aa:	189b      	adds	r3, r3, r2
 80051ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051b0:	464b      	mov	r3, r9
 80051b2:	460a      	mov	r2, r1
 80051b4:	eb42 0303 	adc.w	r3, r2, r3
 80051b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051d4:	4649      	mov	r1, r9
 80051d6:	008b      	lsls	r3, r1, #2
 80051d8:	4641      	mov	r1, r8
 80051da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051de:	4641      	mov	r1, r8
 80051e0:	008a      	lsls	r2, r1, #2
 80051e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051e6:	f7fb fce9 	bl	8000bbc <__aeabi_uldivmod>
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	4b38      	ldr	r3, [pc, #224]	@ (80052d4 <UART_SetConfig+0x4e4>)
 80051f2:	fba3 2301 	umull	r2, r3, r3, r1
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2264      	movs	r2, #100	@ 0x64
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	1acb      	subs	r3, r1, r3
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	3332      	adds	r3, #50	@ 0x32
 8005204:	4a33      	ldr	r2, [pc, #204]	@ (80052d4 <UART_SetConfig+0x4e4>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005210:	441c      	add	r4, r3
 8005212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005216:	2200      	movs	r2, #0
 8005218:	673b      	str	r3, [r7, #112]	@ 0x70
 800521a:	677a      	str	r2, [r7, #116]	@ 0x74
 800521c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005220:	4642      	mov	r2, r8
 8005222:	464b      	mov	r3, r9
 8005224:	1891      	adds	r1, r2, r2
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	415b      	adcs	r3, r3
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005230:	4641      	mov	r1, r8
 8005232:	1851      	adds	r1, r2, r1
 8005234:	6039      	str	r1, [r7, #0]
 8005236:	4649      	mov	r1, r9
 8005238:	414b      	adcs	r3, r1
 800523a:	607b      	str	r3, [r7, #4]
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005248:	4659      	mov	r1, fp
 800524a:	00cb      	lsls	r3, r1, #3
 800524c:	4651      	mov	r1, sl
 800524e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005252:	4651      	mov	r1, sl
 8005254:	00ca      	lsls	r2, r1, #3
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	4603      	mov	r3, r0
 800525c:	4642      	mov	r2, r8
 800525e:	189b      	adds	r3, r3, r2
 8005260:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005262:	464b      	mov	r3, r9
 8005264:	460a      	mov	r2, r1
 8005266:	eb42 0303 	adc.w	r3, r2, r3
 800526a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	663b      	str	r3, [r7, #96]	@ 0x60
 8005276:	667a      	str	r2, [r7, #100]	@ 0x64
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005284:	4649      	mov	r1, r9
 8005286:	008b      	lsls	r3, r1, #2
 8005288:	4641      	mov	r1, r8
 800528a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528e:	4641      	mov	r1, r8
 8005290:	008a      	lsls	r2, r1, #2
 8005292:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005296:	f7fb fc91 	bl	8000bbc <__aeabi_uldivmod>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <UART_SetConfig+0x4e4>)
 80052a0:	fba3 1302 	umull	r1, r3, r3, r2
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	2164      	movs	r1, #100	@ 0x64
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	3332      	adds	r3, #50	@ 0x32
 80052b2:	4a08      	ldr	r2, [pc, #32]	@ (80052d4 <UART_SetConfig+0x4e4>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	f003 020f 	and.w	r2, r3, #15
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4422      	add	r2, r4
 80052c6:	609a      	str	r2, [r3, #8]
}
 80052c8:	bf00      	nop
 80052ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052ce:	46bd      	mov	sp, r7
 80052d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d4:	51eb851f 	.word	0x51eb851f

080052d8 <atof>:
 80052d8:	2100      	movs	r1, #0
 80052da:	f000 be05 	b.w	8005ee8 <strtod>

080052de <sulp>:
 80052de:	b570      	push	{r4, r5, r6, lr}
 80052e0:	4604      	mov	r4, r0
 80052e2:	460d      	mov	r5, r1
 80052e4:	ec45 4b10 	vmov	d0, r4, r5
 80052e8:	4616      	mov	r6, r2
 80052ea:	f002 f82f 	bl	800734c <__ulp>
 80052ee:	ec51 0b10 	vmov	r0, r1, d0
 80052f2:	b17e      	cbz	r6, 8005314 <sulp+0x36>
 80052f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80052f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	dd09      	ble.n	8005314 <sulp+0x36>
 8005300:	051b      	lsls	r3, r3, #20
 8005302:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005306:	2400      	movs	r4, #0
 8005308:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800530c:	4622      	mov	r2, r4
 800530e:	462b      	mov	r3, r5
 8005310:	f7fb f972 	bl	80005f8 <__aeabi_dmul>
 8005314:	ec41 0b10 	vmov	d0, r0, r1
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	0000      	movs	r0, r0
 800531c:	0000      	movs	r0, r0
	...

08005320 <_strtod_l>:
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	b09f      	sub	sp, #124	@ 0x7c
 8005326:	460c      	mov	r4, r1
 8005328:	9217      	str	r2, [sp, #92]	@ 0x5c
 800532a:	2200      	movs	r2, #0
 800532c:	921a      	str	r2, [sp, #104]	@ 0x68
 800532e:	9005      	str	r0, [sp, #20]
 8005330:	f04f 0a00 	mov.w	sl, #0
 8005334:	f04f 0b00 	mov.w	fp, #0
 8005338:	460a      	mov	r2, r1
 800533a:	9219      	str	r2, [sp, #100]	@ 0x64
 800533c:	7811      	ldrb	r1, [r2, #0]
 800533e:	292b      	cmp	r1, #43	@ 0x2b
 8005340:	d04a      	beq.n	80053d8 <_strtod_l+0xb8>
 8005342:	d838      	bhi.n	80053b6 <_strtod_l+0x96>
 8005344:	290d      	cmp	r1, #13
 8005346:	d832      	bhi.n	80053ae <_strtod_l+0x8e>
 8005348:	2908      	cmp	r1, #8
 800534a:	d832      	bhi.n	80053b2 <_strtod_l+0x92>
 800534c:	2900      	cmp	r1, #0
 800534e:	d03b      	beq.n	80053c8 <_strtod_l+0xa8>
 8005350:	2200      	movs	r2, #0
 8005352:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005354:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005356:	782a      	ldrb	r2, [r5, #0]
 8005358:	2a30      	cmp	r2, #48	@ 0x30
 800535a:	f040 80b3 	bne.w	80054c4 <_strtod_l+0x1a4>
 800535e:	786a      	ldrb	r2, [r5, #1]
 8005360:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005364:	2a58      	cmp	r2, #88	@ 0x58
 8005366:	d16e      	bne.n	8005446 <_strtod_l+0x126>
 8005368:	9302      	str	r3, [sp, #8]
 800536a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	ab1a      	add	r3, sp, #104	@ 0x68
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	4a8e      	ldr	r2, [pc, #568]	@ (80055ac <_strtod_l+0x28c>)
 8005374:	9805      	ldr	r0, [sp, #20]
 8005376:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005378:	a919      	add	r1, sp, #100	@ 0x64
 800537a:	f001 f8d9 	bl	8006530 <__gethex>
 800537e:	f010 060f 	ands.w	r6, r0, #15
 8005382:	4604      	mov	r4, r0
 8005384:	d005      	beq.n	8005392 <_strtod_l+0x72>
 8005386:	2e06      	cmp	r6, #6
 8005388:	d128      	bne.n	80053dc <_strtod_l+0xbc>
 800538a:	3501      	adds	r5, #1
 800538c:	2300      	movs	r3, #0
 800538e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005390:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005392:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005394:	2b00      	cmp	r3, #0
 8005396:	f040 858e 	bne.w	8005eb6 <_strtod_l+0xb96>
 800539a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800539c:	b1cb      	cbz	r3, 80053d2 <_strtod_l+0xb2>
 800539e:	4652      	mov	r2, sl
 80053a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80053a4:	ec43 2b10 	vmov	d0, r2, r3
 80053a8:	b01f      	add	sp, #124	@ 0x7c
 80053aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ae:	2920      	cmp	r1, #32
 80053b0:	d1ce      	bne.n	8005350 <_strtod_l+0x30>
 80053b2:	3201      	adds	r2, #1
 80053b4:	e7c1      	b.n	800533a <_strtod_l+0x1a>
 80053b6:	292d      	cmp	r1, #45	@ 0x2d
 80053b8:	d1ca      	bne.n	8005350 <_strtod_l+0x30>
 80053ba:	2101      	movs	r1, #1
 80053bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80053be:	1c51      	adds	r1, r2, #1
 80053c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80053c2:	7852      	ldrb	r2, [r2, #1]
 80053c4:	2a00      	cmp	r2, #0
 80053c6:	d1c5      	bne.n	8005354 <_strtod_l+0x34>
 80053c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80053ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f040 8570 	bne.w	8005eb2 <_strtod_l+0xb92>
 80053d2:	4652      	mov	r2, sl
 80053d4:	465b      	mov	r3, fp
 80053d6:	e7e5      	b.n	80053a4 <_strtod_l+0x84>
 80053d8:	2100      	movs	r1, #0
 80053da:	e7ef      	b.n	80053bc <_strtod_l+0x9c>
 80053dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80053de:	b13a      	cbz	r2, 80053f0 <_strtod_l+0xd0>
 80053e0:	2135      	movs	r1, #53	@ 0x35
 80053e2:	a81c      	add	r0, sp, #112	@ 0x70
 80053e4:	f002 f8ac 	bl	8007540 <__copybits>
 80053e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80053ea:	9805      	ldr	r0, [sp, #20]
 80053ec:	f001 fc7a 	bl	8006ce4 <_Bfree>
 80053f0:	3e01      	subs	r6, #1
 80053f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80053f4:	2e04      	cmp	r6, #4
 80053f6:	d806      	bhi.n	8005406 <_strtod_l+0xe6>
 80053f8:	e8df f006 	tbb	[pc, r6]
 80053fc:	201d0314 	.word	0x201d0314
 8005400:	14          	.byte	0x14
 8005401:	00          	.byte	0x00
 8005402:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005406:	05e1      	lsls	r1, r4, #23
 8005408:	bf48      	it	mi
 800540a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800540e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005412:	0d1b      	lsrs	r3, r3, #20
 8005414:	051b      	lsls	r3, r3, #20
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1bb      	bne.n	8005392 <_strtod_l+0x72>
 800541a:	f000 ff73 	bl	8006304 <__errno>
 800541e:	2322      	movs	r3, #34	@ 0x22
 8005420:	6003      	str	r3, [r0, #0]
 8005422:	e7b6      	b.n	8005392 <_strtod_l+0x72>
 8005424:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005428:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800542c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005430:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005434:	e7e7      	b.n	8005406 <_strtod_l+0xe6>
 8005436:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80055b4 <_strtod_l+0x294>
 800543a:	e7e4      	b.n	8005406 <_strtod_l+0xe6>
 800543c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005440:	f04f 3aff 	mov.w	sl, #4294967295
 8005444:	e7df      	b.n	8005406 <_strtod_l+0xe6>
 8005446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	9219      	str	r2, [sp, #100]	@ 0x64
 800544c:	785b      	ldrb	r3, [r3, #1]
 800544e:	2b30      	cmp	r3, #48	@ 0x30
 8005450:	d0f9      	beq.n	8005446 <_strtod_l+0x126>
 8005452:	2b00      	cmp	r3, #0
 8005454:	d09d      	beq.n	8005392 <_strtod_l+0x72>
 8005456:	2301      	movs	r3, #1
 8005458:	9309      	str	r3, [sp, #36]	@ 0x24
 800545a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800545c:	930c      	str	r3, [sp, #48]	@ 0x30
 800545e:	2300      	movs	r3, #0
 8005460:	9308      	str	r3, [sp, #32]
 8005462:	930a      	str	r3, [sp, #40]	@ 0x28
 8005464:	461f      	mov	r7, r3
 8005466:	220a      	movs	r2, #10
 8005468:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800546a:	7805      	ldrb	r5, [r0, #0]
 800546c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005470:	b2d9      	uxtb	r1, r3
 8005472:	2909      	cmp	r1, #9
 8005474:	d928      	bls.n	80054c8 <_strtod_l+0x1a8>
 8005476:	494e      	ldr	r1, [pc, #312]	@ (80055b0 <_strtod_l+0x290>)
 8005478:	2201      	movs	r2, #1
 800547a:	f000 fe8f 	bl	800619c <strncmp>
 800547e:	2800      	cmp	r0, #0
 8005480:	d032      	beq.n	80054e8 <_strtod_l+0x1c8>
 8005482:	2000      	movs	r0, #0
 8005484:	462a      	mov	r2, r5
 8005486:	4681      	mov	r9, r0
 8005488:	463d      	mov	r5, r7
 800548a:	4603      	mov	r3, r0
 800548c:	2a65      	cmp	r2, #101	@ 0x65
 800548e:	d001      	beq.n	8005494 <_strtod_l+0x174>
 8005490:	2a45      	cmp	r2, #69	@ 0x45
 8005492:	d114      	bne.n	80054be <_strtod_l+0x19e>
 8005494:	b91d      	cbnz	r5, 800549e <_strtod_l+0x17e>
 8005496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005498:	4302      	orrs	r2, r0
 800549a:	d095      	beq.n	80053c8 <_strtod_l+0xa8>
 800549c:	2500      	movs	r5, #0
 800549e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80054a0:	1c62      	adds	r2, r4, #1
 80054a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80054a4:	7862      	ldrb	r2, [r4, #1]
 80054a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80054a8:	d077      	beq.n	800559a <_strtod_l+0x27a>
 80054aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80054ac:	d07b      	beq.n	80055a6 <_strtod_l+0x286>
 80054ae:	f04f 0c00 	mov.w	ip, #0
 80054b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80054b6:	2909      	cmp	r1, #9
 80054b8:	f240 8082 	bls.w	80055c0 <_strtod_l+0x2a0>
 80054bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80054be:	f04f 0800 	mov.w	r8, #0
 80054c2:	e0a2      	b.n	800560a <_strtod_l+0x2ea>
 80054c4:	2300      	movs	r3, #0
 80054c6:	e7c7      	b.n	8005458 <_strtod_l+0x138>
 80054c8:	2f08      	cmp	r7, #8
 80054ca:	bfd5      	itete	le
 80054cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80054ce:	9908      	ldrgt	r1, [sp, #32]
 80054d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80054d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80054d8:	f100 0001 	add.w	r0, r0, #1
 80054dc:	bfd4      	ite	le
 80054de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80054e0:	9308      	strgt	r3, [sp, #32]
 80054e2:	3701      	adds	r7, #1
 80054e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80054e6:	e7bf      	b.n	8005468 <_strtod_l+0x148>
 80054e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80054ee:	785a      	ldrb	r2, [r3, #1]
 80054f0:	b37f      	cbz	r7, 8005552 <_strtod_l+0x232>
 80054f2:	4681      	mov	r9, r0
 80054f4:	463d      	mov	r5, r7
 80054f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80054fa:	2b09      	cmp	r3, #9
 80054fc:	d912      	bls.n	8005524 <_strtod_l+0x204>
 80054fe:	2301      	movs	r3, #1
 8005500:	e7c4      	b.n	800548c <_strtod_l+0x16c>
 8005502:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	9219      	str	r2, [sp, #100]	@ 0x64
 8005508:	785a      	ldrb	r2, [r3, #1]
 800550a:	3001      	adds	r0, #1
 800550c:	2a30      	cmp	r2, #48	@ 0x30
 800550e:	d0f8      	beq.n	8005502 <_strtod_l+0x1e2>
 8005510:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005514:	2b08      	cmp	r3, #8
 8005516:	f200 84d3 	bhi.w	8005ec0 <_strtod_l+0xba0>
 800551a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800551c:	930c      	str	r3, [sp, #48]	@ 0x30
 800551e:	4681      	mov	r9, r0
 8005520:	2000      	movs	r0, #0
 8005522:	4605      	mov	r5, r0
 8005524:	3a30      	subs	r2, #48	@ 0x30
 8005526:	f100 0301 	add.w	r3, r0, #1
 800552a:	d02a      	beq.n	8005582 <_strtod_l+0x262>
 800552c:	4499      	add	r9, r3
 800552e:	eb00 0c05 	add.w	ip, r0, r5
 8005532:	462b      	mov	r3, r5
 8005534:	210a      	movs	r1, #10
 8005536:	4563      	cmp	r3, ip
 8005538:	d10d      	bne.n	8005556 <_strtod_l+0x236>
 800553a:	1c69      	adds	r1, r5, #1
 800553c:	4401      	add	r1, r0
 800553e:	4428      	add	r0, r5
 8005540:	2808      	cmp	r0, #8
 8005542:	dc16      	bgt.n	8005572 <_strtod_l+0x252>
 8005544:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005546:	230a      	movs	r3, #10
 8005548:	fb03 2300 	mla	r3, r3, r0, r2
 800554c:	930a      	str	r3, [sp, #40]	@ 0x28
 800554e:	2300      	movs	r3, #0
 8005550:	e018      	b.n	8005584 <_strtod_l+0x264>
 8005552:	4638      	mov	r0, r7
 8005554:	e7da      	b.n	800550c <_strtod_l+0x1ec>
 8005556:	2b08      	cmp	r3, #8
 8005558:	f103 0301 	add.w	r3, r3, #1
 800555c:	dc03      	bgt.n	8005566 <_strtod_l+0x246>
 800555e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005560:	434e      	muls	r6, r1
 8005562:	960a      	str	r6, [sp, #40]	@ 0x28
 8005564:	e7e7      	b.n	8005536 <_strtod_l+0x216>
 8005566:	2b10      	cmp	r3, #16
 8005568:	bfde      	ittt	le
 800556a:	9e08      	ldrle	r6, [sp, #32]
 800556c:	434e      	mulle	r6, r1
 800556e:	9608      	strle	r6, [sp, #32]
 8005570:	e7e1      	b.n	8005536 <_strtod_l+0x216>
 8005572:	280f      	cmp	r0, #15
 8005574:	dceb      	bgt.n	800554e <_strtod_l+0x22e>
 8005576:	9808      	ldr	r0, [sp, #32]
 8005578:	230a      	movs	r3, #10
 800557a:	fb03 2300 	mla	r3, r3, r0, r2
 800557e:	9308      	str	r3, [sp, #32]
 8005580:	e7e5      	b.n	800554e <_strtod_l+0x22e>
 8005582:	4629      	mov	r1, r5
 8005584:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005586:	1c50      	adds	r0, r2, #1
 8005588:	9019      	str	r0, [sp, #100]	@ 0x64
 800558a:	7852      	ldrb	r2, [r2, #1]
 800558c:	4618      	mov	r0, r3
 800558e:	460d      	mov	r5, r1
 8005590:	e7b1      	b.n	80054f6 <_strtod_l+0x1d6>
 8005592:	f04f 0900 	mov.w	r9, #0
 8005596:	2301      	movs	r3, #1
 8005598:	e77d      	b.n	8005496 <_strtod_l+0x176>
 800559a:	f04f 0c00 	mov.w	ip, #0
 800559e:	1ca2      	adds	r2, r4, #2
 80055a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80055a2:	78a2      	ldrb	r2, [r4, #2]
 80055a4:	e785      	b.n	80054b2 <_strtod_l+0x192>
 80055a6:	f04f 0c01 	mov.w	ip, #1
 80055aa:	e7f8      	b.n	800559e <_strtod_l+0x27e>
 80055ac:	080083b8 	.word	0x080083b8
 80055b0:	08008394 	.word	0x08008394
 80055b4:	7ff00000 	.word	0x7ff00000
 80055b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80055ba:	1c51      	adds	r1, r2, #1
 80055bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80055be:	7852      	ldrb	r2, [r2, #1]
 80055c0:	2a30      	cmp	r2, #48	@ 0x30
 80055c2:	d0f9      	beq.n	80055b8 <_strtod_l+0x298>
 80055c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80055c8:	2908      	cmp	r1, #8
 80055ca:	f63f af78 	bhi.w	80054be <_strtod_l+0x19e>
 80055ce:	3a30      	subs	r2, #48	@ 0x30
 80055d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80055d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80055d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80055d6:	f04f 080a 	mov.w	r8, #10
 80055da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80055dc:	1c56      	adds	r6, r2, #1
 80055de:	9619      	str	r6, [sp, #100]	@ 0x64
 80055e0:	7852      	ldrb	r2, [r2, #1]
 80055e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80055e6:	f1be 0f09 	cmp.w	lr, #9
 80055ea:	d939      	bls.n	8005660 <_strtod_l+0x340>
 80055ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80055ee:	1a76      	subs	r6, r6, r1
 80055f0:	2e08      	cmp	r6, #8
 80055f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80055f6:	dc03      	bgt.n	8005600 <_strtod_l+0x2e0>
 80055f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80055fa:	4588      	cmp	r8, r1
 80055fc:	bfa8      	it	ge
 80055fe:	4688      	movge	r8, r1
 8005600:	f1bc 0f00 	cmp.w	ip, #0
 8005604:	d001      	beq.n	800560a <_strtod_l+0x2ea>
 8005606:	f1c8 0800 	rsb	r8, r8, #0
 800560a:	2d00      	cmp	r5, #0
 800560c:	d14e      	bne.n	80056ac <_strtod_l+0x38c>
 800560e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005610:	4308      	orrs	r0, r1
 8005612:	f47f aebe 	bne.w	8005392 <_strtod_l+0x72>
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f aed6 	bne.w	80053c8 <_strtod_l+0xa8>
 800561c:	2a69      	cmp	r2, #105	@ 0x69
 800561e:	d028      	beq.n	8005672 <_strtod_l+0x352>
 8005620:	dc25      	bgt.n	800566e <_strtod_l+0x34e>
 8005622:	2a49      	cmp	r2, #73	@ 0x49
 8005624:	d025      	beq.n	8005672 <_strtod_l+0x352>
 8005626:	2a4e      	cmp	r2, #78	@ 0x4e
 8005628:	f47f aece 	bne.w	80053c8 <_strtod_l+0xa8>
 800562c:	499b      	ldr	r1, [pc, #620]	@ (800589c <_strtod_l+0x57c>)
 800562e:	a819      	add	r0, sp, #100	@ 0x64
 8005630:	f001 f9a0 	bl	8006974 <__match>
 8005634:	2800      	cmp	r0, #0
 8005636:	f43f aec7 	beq.w	80053c8 <_strtod_l+0xa8>
 800563a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b28      	cmp	r3, #40	@ 0x28
 8005640:	d12e      	bne.n	80056a0 <_strtod_l+0x380>
 8005642:	4997      	ldr	r1, [pc, #604]	@ (80058a0 <_strtod_l+0x580>)
 8005644:	aa1c      	add	r2, sp, #112	@ 0x70
 8005646:	a819      	add	r0, sp, #100	@ 0x64
 8005648:	f001 f9a8 	bl	800699c <__hexnan>
 800564c:	2805      	cmp	r0, #5
 800564e:	d127      	bne.n	80056a0 <_strtod_l+0x380>
 8005650:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005652:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005656:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800565a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800565e:	e698      	b.n	8005392 <_strtod_l+0x72>
 8005660:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005662:	fb08 2101 	mla	r1, r8, r1, r2
 8005666:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800566a:	920e      	str	r2, [sp, #56]	@ 0x38
 800566c:	e7b5      	b.n	80055da <_strtod_l+0x2ba>
 800566e:	2a6e      	cmp	r2, #110	@ 0x6e
 8005670:	e7da      	b.n	8005628 <_strtod_l+0x308>
 8005672:	498c      	ldr	r1, [pc, #560]	@ (80058a4 <_strtod_l+0x584>)
 8005674:	a819      	add	r0, sp, #100	@ 0x64
 8005676:	f001 f97d 	bl	8006974 <__match>
 800567a:	2800      	cmp	r0, #0
 800567c:	f43f aea4 	beq.w	80053c8 <_strtod_l+0xa8>
 8005680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005682:	4989      	ldr	r1, [pc, #548]	@ (80058a8 <_strtod_l+0x588>)
 8005684:	3b01      	subs	r3, #1
 8005686:	a819      	add	r0, sp, #100	@ 0x64
 8005688:	9319      	str	r3, [sp, #100]	@ 0x64
 800568a:	f001 f973 	bl	8006974 <__match>
 800568e:	b910      	cbnz	r0, 8005696 <_strtod_l+0x376>
 8005690:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005692:	3301      	adds	r3, #1
 8005694:	9319      	str	r3, [sp, #100]	@ 0x64
 8005696:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80058b8 <_strtod_l+0x598>
 800569a:	f04f 0a00 	mov.w	sl, #0
 800569e:	e678      	b.n	8005392 <_strtod_l+0x72>
 80056a0:	4882      	ldr	r0, [pc, #520]	@ (80058ac <_strtod_l+0x58c>)
 80056a2:	f000 fe6d 	bl	8006380 <nan>
 80056a6:	ec5b ab10 	vmov	sl, fp, d0
 80056aa:	e672      	b.n	8005392 <_strtod_l+0x72>
 80056ac:	eba8 0309 	sub.w	r3, r8, r9
 80056b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80056b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b4:	2f00      	cmp	r7, #0
 80056b6:	bf08      	it	eq
 80056b8:	462f      	moveq	r7, r5
 80056ba:	2d10      	cmp	r5, #16
 80056bc:	462c      	mov	r4, r5
 80056be:	bfa8      	it	ge
 80056c0:	2410      	movge	r4, #16
 80056c2:	f7fa ff1f 	bl	8000504 <__aeabi_ui2d>
 80056c6:	2d09      	cmp	r5, #9
 80056c8:	4682      	mov	sl, r0
 80056ca:	468b      	mov	fp, r1
 80056cc:	dc13      	bgt.n	80056f6 <_strtod_l+0x3d6>
 80056ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f43f ae5e 	beq.w	8005392 <_strtod_l+0x72>
 80056d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056d8:	dd78      	ble.n	80057cc <_strtod_l+0x4ac>
 80056da:	2b16      	cmp	r3, #22
 80056dc:	dc5f      	bgt.n	800579e <_strtod_l+0x47e>
 80056de:	4974      	ldr	r1, [pc, #464]	@ (80058b0 <_strtod_l+0x590>)
 80056e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80056e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056e8:	4652      	mov	r2, sl
 80056ea:	465b      	mov	r3, fp
 80056ec:	f7fa ff84 	bl	80005f8 <__aeabi_dmul>
 80056f0:	4682      	mov	sl, r0
 80056f2:	468b      	mov	fp, r1
 80056f4:	e64d      	b.n	8005392 <_strtod_l+0x72>
 80056f6:	4b6e      	ldr	r3, [pc, #440]	@ (80058b0 <_strtod_l+0x590>)
 80056f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005700:	f7fa ff7a 	bl	80005f8 <__aeabi_dmul>
 8005704:	4682      	mov	sl, r0
 8005706:	9808      	ldr	r0, [sp, #32]
 8005708:	468b      	mov	fp, r1
 800570a:	f7fa fefb 	bl	8000504 <__aeabi_ui2d>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4650      	mov	r0, sl
 8005714:	4659      	mov	r1, fp
 8005716:	f7fa fdb9 	bl	800028c <__adddf3>
 800571a:	2d0f      	cmp	r5, #15
 800571c:	4682      	mov	sl, r0
 800571e:	468b      	mov	fp, r1
 8005720:	ddd5      	ble.n	80056ce <_strtod_l+0x3ae>
 8005722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005724:	1b2c      	subs	r4, r5, r4
 8005726:	441c      	add	r4, r3
 8005728:	2c00      	cmp	r4, #0
 800572a:	f340 8096 	ble.w	800585a <_strtod_l+0x53a>
 800572e:	f014 030f 	ands.w	r3, r4, #15
 8005732:	d00a      	beq.n	800574a <_strtod_l+0x42a>
 8005734:	495e      	ldr	r1, [pc, #376]	@ (80058b0 <_strtod_l+0x590>)
 8005736:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800573a:	4652      	mov	r2, sl
 800573c:	465b      	mov	r3, fp
 800573e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005742:	f7fa ff59 	bl	80005f8 <__aeabi_dmul>
 8005746:	4682      	mov	sl, r0
 8005748:	468b      	mov	fp, r1
 800574a:	f034 040f 	bics.w	r4, r4, #15
 800574e:	d073      	beq.n	8005838 <_strtod_l+0x518>
 8005750:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005754:	dd48      	ble.n	80057e8 <_strtod_l+0x4c8>
 8005756:	2400      	movs	r4, #0
 8005758:	46a0      	mov	r8, r4
 800575a:	940a      	str	r4, [sp, #40]	@ 0x28
 800575c:	46a1      	mov	r9, r4
 800575e:	9a05      	ldr	r2, [sp, #20]
 8005760:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80058b8 <_strtod_l+0x598>
 8005764:	2322      	movs	r3, #34	@ 0x22
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	f04f 0a00 	mov.w	sl, #0
 800576c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	f43f ae0f 	beq.w	8005392 <_strtod_l+0x72>
 8005774:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005776:	9805      	ldr	r0, [sp, #20]
 8005778:	f001 fab4 	bl	8006ce4 <_Bfree>
 800577c:	9805      	ldr	r0, [sp, #20]
 800577e:	4649      	mov	r1, r9
 8005780:	f001 fab0 	bl	8006ce4 <_Bfree>
 8005784:	9805      	ldr	r0, [sp, #20]
 8005786:	4641      	mov	r1, r8
 8005788:	f001 faac 	bl	8006ce4 <_Bfree>
 800578c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800578e:	9805      	ldr	r0, [sp, #20]
 8005790:	f001 faa8 	bl	8006ce4 <_Bfree>
 8005794:	9805      	ldr	r0, [sp, #20]
 8005796:	4621      	mov	r1, r4
 8005798:	f001 faa4 	bl	8006ce4 <_Bfree>
 800579c:	e5f9      	b.n	8005392 <_strtod_l+0x72>
 800579e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80057a4:	4293      	cmp	r3, r2
 80057a6:	dbbc      	blt.n	8005722 <_strtod_l+0x402>
 80057a8:	4c41      	ldr	r4, [pc, #260]	@ (80058b0 <_strtod_l+0x590>)
 80057aa:	f1c5 050f 	rsb	r5, r5, #15
 80057ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80057b2:	4652      	mov	r2, sl
 80057b4:	465b      	mov	r3, fp
 80057b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057ba:	f7fa ff1d 	bl	80005f8 <__aeabi_dmul>
 80057be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c0:	1b5d      	subs	r5, r3, r5
 80057c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80057c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80057ca:	e78f      	b.n	80056ec <_strtod_l+0x3cc>
 80057cc:	3316      	adds	r3, #22
 80057ce:	dba8      	blt.n	8005722 <_strtod_l+0x402>
 80057d0:	4b37      	ldr	r3, [pc, #220]	@ (80058b0 <_strtod_l+0x590>)
 80057d2:	eba9 0808 	sub.w	r8, r9, r8
 80057d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80057da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80057de:	4650      	mov	r0, sl
 80057e0:	4659      	mov	r1, fp
 80057e2:	f7fb f833 	bl	800084c <__aeabi_ddiv>
 80057e6:	e783      	b.n	80056f0 <_strtod_l+0x3d0>
 80057e8:	4b32      	ldr	r3, [pc, #200]	@ (80058b4 <_strtod_l+0x594>)
 80057ea:	9308      	str	r3, [sp, #32]
 80057ec:	2300      	movs	r3, #0
 80057ee:	1124      	asrs	r4, r4, #4
 80057f0:	4650      	mov	r0, sl
 80057f2:	4659      	mov	r1, fp
 80057f4:	461e      	mov	r6, r3
 80057f6:	2c01      	cmp	r4, #1
 80057f8:	dc21      	bgt.n	800583e <_strtod_l+0x51e>
 80057fa:	b10b      	cbz	r3, 8005800 <_strtod_l+0x4e0>
 80057fc:	4682      	mov	sl, r0
 80057fe:	468b      	mov	fp, r1
 8005800:	492c      	ldr	r1, [pc, #176]	@ (80058b4 <_strtod_l+0x594>)
 8005802:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005806:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800580a:	4652      	mov	r2, sl
 800580c:	465b      	mov	r3, fp
 800580e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005812:	f7fa fef1 	bl	80005f8 <__aeabi_dmul>
 8005816:	4b28      	ldr	r3, [pc, #160]	@ (80058b8 <_strtod_l+0x598>)
 8005818:	460a      	mov	r2, r1
 800581a:	400b      	ands	r3, r1
 800581c:	4927      	ldr	r1, [pc, #156]	@ (80058bc <_strtod_l+0x59c>)
 800581e:	428b      	cmp	r3, r1
 8005820:	4682      	mov	sl, r0
 8005822:	d898      	bhi.n	8005756 <_strtod_l+0x436>
 8005824:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005828:	428b      	cmp	r3, r1
 800582a:	bf86      	itte	hi
 800582c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80058c0 <_strtod_l+0x5a0>
 8005830:	f04f 3aff 	movhi.w	sl, #4294967295
 8005834:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005838:	2300      	movs	r3, #0
 800583a:	9308      	str	r3, [sp, #32]
 800583c:	e07a      	b.n	8005934 <_strtod_l+0x614>
 800583e:	07e2      	lsls	r2, r4, #31
 8005840:	d505      	bpl.n	800584e <_strtod_l+0x52e>
 8005842:	9b08      	ldr	r3, [sp, #32]
 8005844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005848:	f7fa fed6 	bl	80005f8 <__aeabi_dmul>
 800584c:	2301      	movs	r3, #1
 800584e:	9a08      	ldr	r2, [sp, #32]
 8005850:	3208      	adds	r2, #8
 8005852:	3601      	adds	r6, #1
 8005854:	1064      	asrs	r4, r4, #1
 8005856:	9208      	str	r2, [sp, #32]
 8005858:	e7cd      	b.n	80057f6 <_strtod_l+0x4d6>
 800585a:	d0ed      	beq.n	8005838 <_strtod_l+0x518>
 800585c:	4264      	negs	r4, r4
 800585e:	f014 020f 	ands.w	r2, r4, #15
 8005862:	d00a      	beq.n	800587a <_strtod_l+0x55a>
 8005864:	4b12      	ldr	r3, [pc, #72]	@ (80058b0 <_strtod_l+0x590>)
 8005866:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800586a:	4650      	mov	r0, sl
 800586c:	4659      	mov	r1, fp
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f7fa ffeb 	bl	800084c <__aeabi_ddiv>
 8005876:	4682      	mov	sl, r0
 8005878:	468b      	mov	fp, r1
 800587a:	1124      	asrs	r4, r4, #4
 800587c:	d0dc      	beq.n	8005838 <_strtod_l+0x518>
 800587e:	2c1f      	cmp	r4, #31
 8005880:	dd20      	ble.n	80058c4 <_strtod_l+0x5a4>
 8005882:	2400      	movs	r4, #0
 8005884:	46a0      	mov	r8, r4
 8005886:	940a      	str	r4, [sp, #40]	@ 0x28
 8005888:	46a1      	mov	r9, r4
 800588a:	9a05      	ldr	r2, [sp, #20]
 800588c:	2322      	movs	r3, #34	@ 0x22
 800588e:	f04f 0a00 	mov.w	sl, #0
 8005892:	f04f 0b00 	mov.w	fp, #0
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	e768      	b.n	800576c <_strtod_l+0x44c>
 800589a:	bf00      	nop
 800589c:	0800839f 	.word	0x0800839f
 80058a0:	080083a4 	.word	0x080083a4
 80058a4:	08008396 	.word	0x08008396
 80058a8:	08008399 	.word	0x08008399
 80058ac:	080084ac 	.word	0x080084ac
 80058b0:	080085b0 	.word	0x080085b0
 80058b4:	08008588 	.word	0x08008588
 80058b8:	7ff00000 	.word	0x7ff00000
 80058bc:	7ca00000 	.word	0x7ca00000
 80058c0:	7fefffff 	.word	0x7fefffff
 80058c4:	f014 0310 	ands.w	r3, r4, #16
 80058c8:	bf18      	it	ne
 80058ca:	236a      	movne	r3, #106	@ 0x6a
 80058cc:	4ea9      	ldr	r6, [pc, #676]	@ (8005b74 <_strtod_l+0x854>)
 80058ce:	9308      	str	r3, [sp, #32]
 80058d0:	4650      	mov	r0, sl
 80058d2:	4659      	mov	r1, fp
 80058d4:	2300      	movs	r3, #0
 80058d6:	07e2      	lsls	r2, r4, #31
 80058d8:	d504      	bpl.n	80058e4 <_strtod_l+0x5c4>
 80058da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80058de:	f7fa fe8b 	bl	80005f8 <__aeabi_dmul>
 80058e2:	2301      	movs	r3, #1
 80058e4:	1064      	asrs	r4, r4, #1
 80058e6:	f106 0608 	add.w	r6, r6, #8
 80058ea:	d1f4      	bne.n	80058d6 <_strtod_l+0x5b6>
 80058ec:	b10b      	cbz	r3, 80058f2 <_strtod_l+0x5d2>
 80058ee:	4682      	mov	sl, r0
 80058f0:	468b      	mov	fp, r1
 80058f2:	9b08      	ldr	r3, [sp, #32]
 80058f4:	b1b3      	cbz	r3, 8005924 <_strtod_l+0x604>
 80058f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80058fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80058fe:	2b00      	cmp	r3, #0
 8005900:	4659      	mov	r1, fp
 8005902:	dd0f      	ble.n	8005924 <_strtod_l+0x604>
 8005904:	2b1f      	cmp	r3, #31
 8005906:	dd55      	ble.n	80059b4 <_strtod_l+0x694>
 8005908:	2b34      	cmp	r3, #52	@ 0x34
 800590a:	bfde      	ittt	le
 800590c:	f04f 33ff 	movle.w	r3, #4294967295
 8005910:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005914:	4093      	lslle	r3, r2
 8005916:	f04f 0a00 	mov.w	sl, #0
 800591a:	bfcc      	ite	gt
 800591c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005920:	ea03 0b01 	andle.w	fp, r3, r1
 8005924:	2200      	movs	r2, #0
 8005926:	2300      	movs	r3, #0
 8005928:	4650      	mov	r0, sl
 800592a:	4659      	mov	r1, fp
 800592c:	f7fb f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005930:	2800      	cmp	r0, #0
 8005932:	d1a6      	bne.n	8005882 <_strtod_l+0x562>
 8005934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800593a:	9805      	ldr	r0, [sp, #20]
 800593c:	462b      	mov	r3, r5
 800593e:	463a      	mov	r2, r7
 8005940:	f001 fa38 	bl	8006db4 <__s2b>
 8005944:	900a      	str	r0, [sp, #40]	@ 0x28
 8005946:	2800      	cmp	r0, #0
 8005948:	f43f af05 	beq.w	8005756 <_strtod_l+0x436>
 800594c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800594e:	2a00      	cmp	r2, #0
 8005950:	eba9 0308 	sub.w	r3, r9, r8
 8005954:	bfa8      	it	ge
 8005956:	2300      	movge	r3, #0
 8005958:	9312      	str	r3, [sp, #72]	@ 0x48
 800595a:	2400      	movs	r4, #0
 800595c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005960:	9316      	str	r3, [sp, #88]	@ 0x58
 8005962:	46a0      	mov	r8, r4
 8005964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005966:	9805      	ldr	r0, [sp, #20]
 8005968:	6859      	ldr	r1, [r3, #4]
 800596a:	f001 f97b 	bl	8006c64 <_Balloc>
 800596e:	4681      	mov	r9, r0
 8005970:	2800      	cmp	r0, #0
 8005972:	f43f aef4 	beq.w	800575e <_strtod_l+0x43e>
 8005976:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	3202      	adds	r2, #2
 800597c:	f103 010c 	add.w	r1, r3, #12
 8005980:	0092      	lsls	r2, r2, #2
 8005982:	300c      	adds	r0, #12
 8005984:	f000 fceb 	bl	800635e <memcpy>
 8005988:	ec4b ab10 	vmov	d0, sl, fp
 800598c:	9805      	ldr	r0, [sp, #20]
 800598e:	aa1c      	add	r2, sp, #112	@ 0x70
 8005990:	a91b      	add	r1, sp, #108	@ 0x6c
 8005992:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005996:	f001 fd49 	bl	800742c <__d2b>
 800599a:	901a      	str	r0, [sp, #104]	@ 0x68
 800599c:	2800      	cmp	r0, #0
 800599e:	f43f aede 	beq.w	800575e <_strtod_l+0x43e>
 80059a2:	9805      	ldr	r0, [sp, #20]
 80059a4:	2101      	movs	r1, #1
 80059a6:	f001 fa9b 	bl	8006ee0 <__i2b>
 80059aa:	4680      	mov	r8, r0
 80059ac:	b948      	cbnz	r0, 80059c2 <_strtod_l+0x6a2>
 80059ae:	f04f 0800 	mov.w	r8, #0
 80059b2:	e6d4      	b.n	800575e <_strtod_l+0x43e>
 80059b4:	f04f 32ff 	mov.w	r2, #4294967295
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	ea03 0a0a 	and.w	sl, r3, sl
 80059c0:	e7b0      	b.n	8005924 <_strtod_l+0x604>
 80059c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80059c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80059c6:	2d00      	cmp	r5, #0
 80059c8:	bfab      	itete	ge
 80059ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80059cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80059ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80059d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80059d2:	bfac      	ite	ge
 80059d4:	18ef      	addge	r7, r5, r3
 80059d6:	1b5e      	sublt	r6, r3, r5
 80059d8:	9b08      	ldr	r3, [sp, #32]
 80059da:	1aed      	subs	r5, r5, r3
 80059dc:	4415      	add	r5, r2
 80059de:	4b66      	ldr	r3, [pc, #408]	@ (8005b78 <_strtod_l+0x858>)
 80059e0:	3d01      	subs	r5, #1
 80059e2:	429d      	cmp	r5, r3
 80059e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80059e8:	da50      	bge.n	8005a8c <_strtod_l+0x76c>
 80059ea:	1b5b      	subs	r3, r3, r5
 80059ec:	2b1f      	cmp	r3, #31
 80059ee:	eba2 0203 	sub.w	r2, r2, r3
 80059f2:	f04f 0101 	mov.w	r1, #1
 80059f6:	dc3d      	bgt.n	8005a74 <_strtod_l+0x754>
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80059fe:	2300      	movs	r3, #0
 8005a00:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a02:	18bd      	adds	r5, r7, r2
 8005a04:	9b08      	ldr	r3, [sp, #32]
 8005a06:	42af      	cmp	r7, r5
 8005a08:	4416      	add	r6, r2
 8005a0a:	441e      	add	r6, r3
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	bfa8      	it	ge
 8005a10:	462b      	movge	r3, r5
 8005a12:	42b3      	cmp	r3, r6
 8005a14:	bfa8      	it	ge
 8005a16:	4633      	movge	r3, r6
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	bfc2      	ittt	gt
 8005a1c:	1aed      	subgt	r5, r5, r3
 8005a1e:	1af6      	subgt	r6, r6, r3
 8005a20:	1aff      	subgt	r7, r7, r3
 8005a22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	dd16      	ble.n	8005a56 <_strtod_l+0x736>
 8005a28:	4641      	mov	r1, r8
 8005a2a:	9805      	ldr	r0, [sp, #20]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f001 fb17 	bl	8007060 <__pow5mult>
 8005a32:	4680      	mov	r8, r0
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d0ba      	beq.n	80059ae <_strtod_l+0x68e>
 8005a38:	4601      	mov	r1, r0
 8005a3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005a3c:	9805      	ldr	r0, [sp, #20]
 8005a3e:	f001 fa65 	bl	8006f0c <__multiply>
 8005a42:	900e      	str	r0, [sp, #56]	@ 0x38
 8005a44:	2800      	cmp	r0, #0
 8005a46:	f43f ae8a 	beq.w	800575e <_strtod_l+0x43e>
 8005a4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a4c:	9805      	ldr	r0, [sp, #20]
 8005a4e:	f001 f949 	bl	8006ce4 <_Bfree>
 8005a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a54:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	dc1d      	bgt.n	8005a96 <_strtod_l+0x776>
 8005a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dd23      	ble.n	8005aa8 <_strtod_l+0x788>
 8005a60:	4649      	mov	r1, r9
 8005a62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005a64:	9805      	ldr	r0, [sp, #20]
 8005a66:	f001 fafb 	bl	8007060 <__pow5mult>
 8005a6a:	4681      	mov	r9, r0
 8005a6c:	b9e0      	cbnz	r0, 8005aa8 <_strtod_l+0x788>
 8005a6e:	f04f 0900 	mov.w	r9, #0
 8005a72:	e674      	b.n	800575e <_strtod_l+0x43e>
 8005a74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005a78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005a7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005a80:	35e2      	adds	r5, #226	@ 0xe2
 8005a82:	fa01 f305 	lsl.w	r3, r1, r5
 8005a86:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a88:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005a8a:	e7ba      	b.n	8005a02 <_strtod_l+0x6e2>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a90:	2301      	movs	r3, #1
 8005a92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a94:	e7b5      	b.n	8005a02 <_strtod_l+0x6e2>
 8005a96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a98:	9805      	ldr	r0, [sp, #20]
 8005a9a:	462a      	mov	r2, r5
 8005a9c:	f001 fb3a 	bl	8007114 <__lshift>
 8005aa0:	901a      	str	r0, [sp, #104]	@ 0x68
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	d1d9      	bne.n	8005a5a <_strtod_l+0x73a>
 8005aa6:	e65a      	b.n	800575e <_strtod_l+0x43e>
 8005aa8:	2e00      	cmp	r6, #0
 8005aaa:	dd07      	ble.n	8005abc <_strtod_l+0x79c>
 8005aac:	4649      	mov	r1, r9
 8005aae:	9805      	ldr	r0, [sp, #20]
 8005ab0:	4632      	mov	r2, r6
 8005ab2:	f001 fb2f 	bl	8007114 <__lshift>
 8005ab6:	4681      	mov	r9, r0
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d0d8      	beq.n	8005a6e <_strtod_l+0x74e>
 8005abc:	2f00      	cmp	r7, #0
 8005abe:	dd08      	ble.n	8005ad2 <_strtod_l+0x7b2>
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	9805      	ldr	r0, [sp, #20]
 8005ac4:	463a      	mov	r2, r7
 8005ac6:	f001 fb25 	bl	8007114 <__lshift>
 8005aca:	4680      	mov	r8, r0
 8005acc:	2800      	cmp	r0, #0
 8005ace:	f43f ae46 	beq.w	800575e <_strtod_l+0x43e>
 8005ad2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ad4:	9805      	ldr	r0, [sp, #20]
 8005ad6:	464a      	mov	r2, r9
 8005ad8:	f001 fba4 	bl	8007224 <__mdiff>
 8005adc:	4604      	mov	r4, r0
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f43f ae3d 	beq.w	800575e <_strtod_l+0x43e>
 8005ae4:	68c3      	ldr	r3, [r0, #12]
 8005ae6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60c3      	str	r3, [r0, #12]
 8005aec:	4641      	mov	r1, r8
 8005aee:	f001 fb7d 	bl	80071ec <__mcmp>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	da46      	bge.n	8005b84 <_strtod_l+0x864>
 8005af6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005af8:	ea53 030a 	orrs.w	r3, r3, sl
 8005afc:	d16c      	bne.n	8005bd8 <_strtod_l+0x8b8>
 8005afe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d168      	bne.n	8005bd8 <_strtod_l+0x8b8>
 8005b06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b0a:	0d1b      	lsrs	r3, r3, #20
 8005b0c:	051b      	lsls	r3, r3, #20
 8005b0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005b12:	d961      	bls.n	8005bd8 <_strtod_l+0x8b8>
 8005b14:	6963      	ldr	r3, [r4, #20]
 8005b16:	b913      	cbnz	r3, 8005b1e <_strtod_l+0x7fe>
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	dd5c      	ble.n	8005bd8 <_strtod_l+0x8b8>
 8005b1e:	4621      	mov	r1, r4
 8005b20:	2201      	movs	r2, #1
 8005b22:	9805      	ldr	r0, [sp, #20]
 8005b24:	f001 faf6 	bl	8007114 <__lshift>
 8005b28:	4641      	mov	r1, r8
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	f001 fb5e 	bl	80071ec <__mcmp>
 8005b30:	2800      	cmp	r0, #0
 8005b32:	dd51      	ble.n	8005bd8 <_strtod_l+0x8b8>
 8005b34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b38:	9a08      	ldr	r2, [sp, #32]
 8005b3a:	0d1b      	lsrs	r3, r3, #20
 8005b3c:	051b      	lsls	r3, r3, #20
 8005b3e:	2a00      	cmp	r2, #0
 8005b40:	d06b      	beq.n	8005c1a <_strtod_l+0x8fa>
 8005b42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005b46:	d868      	bhi.n	8005c1a <_strtod_l+0x8fa>
 8005b48:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005b4c:	f67f ae9d 	bls.w	800588a <_strtod_l+0x56a>
 8005b50:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <_strtod_l+0x85c>)
 8005b52:	4650      	mov	r0, sl
 8005b54:	4659      	mov	r1, fp
 8005b56:	2200      	movs	r2, #0
 8005b58:	f7fa fd4e 	bl	80005f8 <__aeabi_dmul>
 8005b5c:	4b08      	ldr	r3, [pc, #32]	@ (8005b80 <_strtod_l+0x860>)
 8005b5e:	400b      	ands	r3, r1
 8005b60:	4682      	mov	sl, r0
 8005b62:	468b      	mov	fp, r1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f47f ae05 	bne.w	8005774 <_strtod_l+0x454>
 8005b6a:	9a05      	ldr	r2, [sp, #20]
 8005b6c:	2322      	movs	r3, #34	@ 0x22
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	e600      	b.n	8005774 <_strtod_l+0x454>
 8005b72:	bf00      	nop
 8005b74:	080083d0 	.word	0x080083d0
 8005b78:	fffffc02 	.word	0xfffffc02
 8005b7c:	39500000 	.word	0x39500000
 8005b80:	7ff00000 	.word	0x7ff00000
 8005b84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005b88:	d165      	bne.n	8005c56 <_strtod_l+0x936>
 8005b8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b90:	b35a      	cbz	r2, 8005bea <_strtod_l+0x8ca>
 8005b92:	4a9f      	ldr	r2, [pc, #636]	@ (8005e10 <_strtod_l+0xaf0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d12b      	bne.n	8005bf0 <_strtod_l+0x8d0>
 8005b98:	9b08      	ldr	r3, [sp, #32]
 8005b9a:	4651      	mov	r1, sl
 8005b9c:	b303      	cbz	r3, 8005be0 <_strtod_l+0x8c0>
 8005b9e:	4b9d      	ldr	r3, [pc, #628]	@ (8005e14 <_strtod_l+0xaf4>)
 8005ba0:	465a      	mov	r2, fp
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bac:	d81b      	bhi.n	8005be6 <_strtod_l+0x8c6>
 8005bae:	0d1b      	lsrs	r3, r3, #20
 8005bb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	d119      	bne.n	8005bf0 <_strtod_l+0x8d0>
 8005bbc:	4b96      	ldr	r3, [pc, #600]	@ (8005e18 <_strtod_l+0xaf8>)
 8005bbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d102      	bne.n	8005bca <_strtod_l+0x8aa>
 8005bc4:	3101      	adds	r1, #1
 8005bc6:	f43f adca 	beq.w	800575e <_strtod_l+0x43e>
 8005bca:	4b92      	ldr	r3, [pc, #584]	@ (8005e14 <_strtod_l+0xaf4>)
 8005bcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bce:	401a      	ands	r2, r3
 8005bd0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005bd4:	f04f 0a00 	mov.w	sl, #0
 8005bd8:	9b08      	ldr	r3, [sp, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1b8      	bne.n	8005b50 <_strtod_l+0x830>
 8005bde:	e5c9      	b.n	8005774 <_strtod_l+0x454>
 8005be0:	f04f 33ff 	mov.w	r3, #4294967295
 8005be4:	e7e8      	b.n	8005bb8 <_strtod_l+0x898>
 8005be6:	4613      	mov	r3, r2
 8005be8:	e7e6      	b.n	8005bb8 <_strtod_l+0x898>
 8005bea:	ea53 030a 	orrs.w	r3, r3, sl
 8005bee:	d0a1      	beq.n	8005b34 <_strtod_l+0x814>
 8005bf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005bf2:	b1db      	cbz	r3, 8005c2c <_strtod_l+0x90c>
 8005bf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bf6:	4213      	tst	r3, r2
 8005bf8:	d0ee      	beq.n	8005bd8 <_strtod_l+0x8b8>
 8005bfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bfc:	9a08      	ldr	r2, [sp, #32]
 8005bfe:	4650      	mov	r0, sl
 8005c00:	4659      	mov	r1, fp
 8005c02:	b1bb      	cbz	r3, 8005c34 <_strtod_l+0x914>
 8005c04:	f7ff fb6b 	bl	80052de <sulp>
 8005c08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c0c:	ec53 2b10 	vmov	r2, r3, d0
 8005c10:	f7fa fb3c 	bl	800028c <__adddf3>
 8005c14:	4682      	mov	sl, r0
 8005c16:	468b      	mov	fp, r1
 8005c18:	e7de      	b.n	8005bd8 <_strtod_l+0x8b8>
 8005c1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005c1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005c22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005c26:	f04f 3aff 	mov.w	sl, #4294967295
 8005c2a:	e7d5      	b.n	8005bd8 <_strtod_l+0x8b8>
 8005c2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c2e:	ea13 0f0a 	tst.w	r3, sl
 8005c32:	e7e1      	b.n	8005bf8 <_strtod_l+0x8d8>
 8005c34:	f7ff fb53 	bl	80052de <sulp>
 8005c38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c3c:	ec53 2b10 	vmov	r2, r3, d0
 8005c40:	f7fa fb22 	bl	8000288 <__aeabi_dsub>
 8005c44:	2200      	movs	r2, #0
 8005c46:	2300      	movs	r3, #0
 8005c48:	4682      	mov	sl, r0
 8005c4a:	468b      	mov	fp, r1
 8005c4c:	f7fa ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d0c1      	beq.n	8005bd8 <_strtod_l+0x8b8>
 8005c54:	e619      	b.n	800588a <_strtod_l+0x56a>
 8005c56:	4641      	mov	r1, r8
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f001 fc3f 	bl	80074dc <__ratio>
 8005c5e:	ec57 6b10 	vmov	r6, r7, d0
 8005c62:	2200      	movs	r2, #0
 8005c64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f7fa ff40 	bl	8000af0 <__aeabi_dcmple>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d06f      	beq.n	8005d54 <_strtod_l+0xa34>
 8005c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d17a      	bne.n	8005d70 <_strtod_l+0xa50>
 8005c7a:	f1ba 0f00 	cmp.w	sl, #0
 8005c7e:	d158      	bne.n	8005d32 <_strtod_l+0xa12>
 8005c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d15a      	bne.n	8005d40 <_strtod_l+0xa20>
 8005c8a:	4b64      	ldr	r3, [pc, #400]	@ (8005e1c <_strtod_l+0xafc>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4630      	mov	r0, r6
 8005c90:	4639      	mov	r1, r7
 8005c92:	f7fa ff23 	bl	8000adc <__aeabi_dcmplt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d159      	bne.n	8005d4e <_strtod_l+0xa2e>
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	4b60      	ldr	r3, [pc, #384]	@ (8005e20 <_strtod_l+0xb00>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f7fa fca9 	bl	80005f8 <__aeabi_dmul>
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	460f      	mov	r7, r1
 8005caa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005cae:	9606      	str	r6, [sp, #24]
 8005cb0:	9307      	str	r3, [sp, #28]
 8005cb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cb6:	4d57      	ldr	r5, [pc, #348]	@ (8005e14 <_strtod_l+0xaf4>)
 8005cb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005cbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cbe:	401d      	ands	r5, r3
 8005cc0:	4b58      	ldr	r3, [pc, #352]	@ (8005e24 <_strtod_l+0xb04>)
 8005cc2:	429d      	cmp	r5, r3
 8005cc4:	f040 80b2 	bne.w	8005e2c <_strtod_l+0xb0c>
 8005cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005cce:	ec4b ab10 	vmov	d0, sl, fp
 8005cd2:	f001 fb3b 	bl	800734c <__ulp>
 8005cd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cda:	ec51 0b10 	vmov	r0, r1, d0
 8005cde:	f7fa fc8b 	bl	80005f8 <__aeabi_dmul>
 8005ce2:	4652      	mov	r2, sl
 8005ce4:	465b      	mov	r3, fp
 8005ce6:	f7fa fad1 	bl	800028c <__adddf3>
 8005cea:	460b      	mov	r3, r1
 8005cec:	4949      	ldr	r1, [pc, #292]	@ (8005e14 <_strtod_l+0xaf4>)
 8005cee:	4a4e      	ldr	r2, [pc, #312]	@ (8005e28 <_strtod_l+0xb08>)
 8005cf0:	4019      	ands	r1, r3
 8005cf2:	4291      	cmp	r1, r2
 8005cf4:	4682      	mov	sl, r0
 8005cf6:	d942      	bls.n	8005d7e <_strtod_l+0xa5e>
 8005cf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005cfa:	4b47      	ldr	r3, [pc, #284]	@ (8005e18 <_strtod_l+0xaf8>)
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d103      	bne.n	8005d08 <_strtod_l+0x9e8>
 8005d00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d02:	3301      	adds	r3, #1
 8005d04:	f43f ad2b 	beq.w	800575e <_strtod_l+0x43e>
 8005d08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005e18 <_strtod_l+0xaf8>
 8005d0c:	f04f 3aff 	mov.w	sl, #4294967295
 8005d10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005d12:	9805      	ldr	r0, [sp, #20]
 8005d14:	f000 ffe6 	bl	8006ce4 <_Bfree>
 8005d18:	9805      	ldr	r0, [sp, #20]
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	f000 ffe2 	bl	8006ce4 <_Bfree>
 8005d20:	9805      	ldr	r0, [sp, #20]
 8005d22:	4641      	mov	r1, r8
 8005d24:	f000 ffde 	bl	8006ce4 <_Bfree>
 8005d28:	9805      	ldr	r0, [sp, #20]
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	f000 ffda 	bl	8006ce4 <_Bfree>
 8005d30:	e618      	b.n	8005964 <_strtod_l+0x644>
 8005d32:	f1ba 0f01 	cmp.w	sl, #1
 8005d36:	d103      	bne.n	8005d40 <_strtod_l+0xa20>
 8005d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f43f ada5 	beq.w	800588a <_strtod_l+0x56a>
 8005d40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005df0 <_strtod_l+0xad0>
 8005d44:	4f35      	ldr	r7, [pc, #212]	@ (8005e1c <_strtod_l+0xafc>)
 8005d46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005d4a:	2600      	movs	r6, #0
 8005d4c:	e7b1      	b.n	8005cb2 <_strtod_l+0x992>
 8005d4e:	4f34      	ldr	r7, [pc, #208]	@ (8005e20 <_strtod_l+0xb00>)
 8005d50:	2600      	movs	r6, #0
 8005d52:	e7aa      	b.n	8005caa <_strtod_l+0x98a>
 8005d54:	4b32      	ldr	r3, [pc, #200]	@ (8005e20 <_strtod_l+0xb00>)
 8005d56:	4630      	mov	r0, r6
 8005d58:	4639      	mov	r1, r7
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f7fa fc4c 	bl	80005f8 <__aeabi_dmul>
 8005d60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d62:	4606      	mov	r6, r0
 8005d64:	460f      	mov	r7, r1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d09f      	beq.n	8005caa <_strtod_l+0x98a>
 8005d6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005d6e:	e7a0      	b.n	8005cb2 <_strtod_l+0x992>
 8005d70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005df8 <_strtod_l+0xad8>
 8005d74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005d78:	ec57 6b17 	vmov	r6, r7, d7
 8005d7c:	e799      	b.n	8005cb2 <_strtod_l+0x992>
 8005d7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005d82:	9b08      	ldr	r3, [sp, #32]
 8005d84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1c1      	bne.n	8005d10 <_strtod_l+0x9f0>
 8005d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005d90:	0d1b      	lsrs	r3, r3, #20
 8005d92:	051b      	lsls	r3, r3, #20
 8005d94:	429d      	cmp	r5, r3
 8005d96:	d1bb      	bne.n	8005d10 <_strtod_l+0x9f0>
 8005d98:	4630      	mov	r0, r6
 8005d9a:	4639      	mov	r1, r7
 8005d9c:	f7fa ff26 	bl	8000bec <__aeabi_d2lz>
 8005da0:	f7fa fbfc 	bl	800059c <__aeabi_l2d>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4630      	mov	r0, r6
 8005daa:	4639      	mov	r1, r7
 8005dac:	f7fa fa6c 	bl	8000288 <__aeabi_dsub>
 8005db0:	460b      	mov	r3, r1
 8005db2:	4602      	mov	r2, r0
 8005db4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005db8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dbe:	ea46 060a 	orr.w	r6, r6, sl
 8005dc2:	431e      	orrs	r6, r3
 8005dc4:	d06f      	beq.n	8005ea6 <_strtod_l+0xb86>
 8005dc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8005e00 <_strtod_l+0xae0>)
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f7fa fe86 	bl	8000adc <__aeabi_dcmplt>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	f47f accf 	bne.w	8005774 <_strtod_l+0x454>
 8005dd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8005e08 <_strtod_l+0xae8>)
 8005dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ddc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005de0:	f7fa fe9a 	bl	8000b18 <__aeabi_dcmpgt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d093      	beq.n	8005d10 <_strtod_l+0x9f0>
 8005de8:	e4c4      	b.n	8005774 <_strtod_l+0x454>
 8005dea:	bf00      	nop
 8005dec:	f3af 8000 	nop.w
 8005df0:	00000000 	.word	0x00000000
 8005df4:	bff00000 	.word	0xbff00000
 8005df8:	00000000 	.word	0x00000000
 8005dfc:	3ff00000 	.word	0x3ff00000
 8005e00:	94a03595 	.word	0x94a03595
 8005e04:	3fdfffff 	.word	0x3fdfffff
 8005e08:	35afe535 	.word	0x35afe535
 8005e0c:	3fe00000 	.word	0x3fe00000
 8005e10:	000fffff 	.word	0x000fffff
 8005e14:	7ff00000 	.word	0x7ff00000
 8005e18:	7fefffff 	.word	0x7fefffff
 8005e1c:	3ff00000 	.word	0x3ff00000
 8005e20:	3fe00000 	.word	0x3fe00000
 8005e24:	7fe00000 	.word	0x7fe00000
 8005e28:	7c9fffff 	.word	0x7c9fffff
 8005e2c:	9b08      	ldr	r3, [sp, #32]
 8005e2e:	b323      	cbz	r3, 8005e7a <_strtod_l+0xb5a>
 8005e30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005e34:	d821      	bhi.n	8005e7a <_strtod_l+0xb5a>
 8005e36:	a328      	add	r3, pc, #160	@ (adr r3, 8005ed8 <_strtod_l+0xbb8>)
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	4639      	mov	r1, r7
 8005e40:	f7fa fe56 	bl	8000af0 <__aeabi_dcmple>
 8005e44:	b1a0      	cbz	r0, 8005e70 <_strtod_l+0xb50>
 8005e46:	4639      	mov	r1, r7
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f7fa fe97 	bl	8000b7c <__aeabi_d2uiz>
 8005e4e:	2801      	cmp	r0, #1
 8005e50:	bf38      	it	cc
 8005e52:	2001      	movcc	r0, #1
 8005e54:	f7fa fb56 	bl	8000504 <__aeabi_ui2d>
 8005e58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	460f      	mov	r7, r1
 8005e5e:	b9fb      	cbnz	r3, 8005ea0 <_strtod_l+0xb80>
 8005e60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e64:	9014      	str	r0, [sp, #80]	@ 0x50
 8005e66:	9315      	str	r3, [sp, #84]	@ 0x54
 8005e68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005e6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005e70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005e72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005e76:	1b5b      	subs	r3, r3, r5
 8005e78:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005e7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005e82:	f001 fa63 	bl	800734c <__ulp>
 8005e86:	4650      	mov	r0, sl
 8005e88:	ec53 2b10 	vmov	r2, r3, d0
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	f7fa fbb3 	bl	80005f8 <__aeabi_dmul>
 8005e92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005e96:	f7fa f9f9 	bl	800028c <__adddf3>
 8005e9a:	4682      	mov	sl, r0
 8005e9c:	468b      	mov	fp, r1
 8005e9e:	e770      	b.n	8005d82 <_strtod_l+0xa62>
 8005ea0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005ea4:	e7e0      	b.n	8005e68 <_strtod_l+0xb48>
 8005ea6:	a30e      	add	r3, pc, #56	@ (adr r3, 8005ee0 <_strtod_l+0xbc0>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f7fa fe16 	bl	8000adc <__aeabi_dcmplt>
 8005eb0:	e798      	b.n	8005de4 <_strtod_l+0xac4>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eb6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005eb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005eba:	6013      	str	r3, [r2, #0]
 8005ebc:	f7ff ba6d 	b.w	800539a <_strtod_l+0x7a>
 8005ec0:	2a65      	cmp	r2, #101	@ 0x65
 8005ec2:	f43f ab66 	beq.w	8005592 <_strtod_l+0x272>
 8005ec6:	2a45      	cmp	r2, #69	@ 0x45
 8005ec8:	f43f ab63 	beq.w	8005592 <_strtod_l+0x272>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f7ff bb9e 	b.w	800560e <_strtod_l+0x2ee>
 8005ed2:	bf00      	nop
 8005ed4:	f3af 8000 	nop.w
 8005ed8:	ffc00000 	.word	0xffc00000
 8005edc:	41dfffff 	.word	0x41dfffff
 8005ee0:	94a03595 	.word	0x94a03595
 8005ee4:	3fcfffff 	.word	0x3fcfffff

08005ee8 <strtod>:
 8005ee8:	460a      	mov	r2, r1
 8005eea:	4601      	mov	r1, r0
 8005eec:	4802      	ldr	r0, [pc, #8]	@ (8005ef8 <strtod+0x10>)
 8005eee:	4b03      	ldr	r3, [pc, #12]	@ (8005efc <strtod+0x14>)
 8005ef0:	6800      	ldr	r0, [r0, #0]
 8005ef2:	f7ff ba15 	b.w	8005320 <_strtod_l>
 8005ef6:	bf00      	nop
 8005ef8:	20000184 	.word	0x20000184
 8005efc:	20000018 	.word	0x20000018

08005f00 <std>:
 8005f00:	2300      	movs	r3, #0
 8005f02:	b510      	push	{r4, lr}
 8005f04:	4604      	mov	r4, r0
 8005f06:	e9c0 3300 	strd	r3, r3, [r0]
 8005f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f0e:	6083      	str	r3, [r0, #8]
 8005f10:	8181      	strh	r1, [r0, #12]
 8005f12:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f14:	81c2      	strh	r2, [r0, #14]
 8005f16:	6183      	str	r3, [r0, #24]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	2208      	movs	r2, #8
 8005f1c:	305c      	adds	r0, #92	@ 0x5c
 8005f1e:	f000 f928 	bl	8006172 <memset>
 8005f22:	4b0d      	ldr	r3, [pc, #52]	@ (8005f58 <std+0x58>)
 8005f24:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <std+0x5c>)
 8005f28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <std+0x60>)
 8005f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <std+0x64>)
 8005f30:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <std+0x68>)
 8005f34:	6224      	str	r4, [r4, #32]
 8005f36:	429c      	cmp	r4, r3
 8005f38:	d006      	beq.n	8005f48 <std+0x48>
 8005f3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f3e:	4294      	cmp	r4, r2
 8005f40:	d002      	beq.n	8005f48 <std+0x48>
 8005f42:	33d0      	adds	r3, #208	@ 0xd0
 8005f44:	429c      	cmp	r4, r3
 8005f46:	d105      	bne.n	8005f54 <std+0x54>
 8005f48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f50:	f000 ba02 	b.w	8006358 <__retarget_lock_init_recursive>
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	bf00      	nop
 8005f58:	080060ed 	.word	0x080060ed
 8005f5c:	0800610f 	.word	0x0800610f
 8005f60:	08006147 	.word	0x08006147
 8005f64:	0800616b 	.word	0x0800616b
 8005f68:	20000390 	.word	0x20000390

08005f6c <stdio_exit_handler>:
 8005f6c:	4a02      	ldr	r2, [pc, #8]	@ (8005f78 <stdio_exit_handler+0xc>)
 8005f6e:	4903      	ldr	r1, [pc, #12]	@ (8005f7c <stdio_exit_handler+0x10>)
 8005f70:	4803      	ldr	r0, [pc, #12]	@ (8005f80 <stdio_exit_handler+0x14>)
 8005f72:	f000 b869 	b.w	8006048 <_fwalk_sglue>
 8005f76:	bf00      	nop
 8005f78:	2000000c 	.word	0x2000000c
 8005f7c:	08007cb5 	.word	0x08007cb5
 8005f80:	20000188 	.word	0x20000188

08005f84 <cleanup_stdio>:
 8005f84:	6841      	ldr	r1, [r0, #4]
 8005f86:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb8 <cleanup_stdio+0x34>)
 8005f88:	4299      	cmp	r1, r3
 8005f8a:	b510      	push	{r4, lr}
 8005f8c:	4604      	mov	r4, r0
 8005f8e:	d001      	beq.n	8005f94 <cleanup_stdio+0x10>
 8005f90:	f001 fe90 	bl	8007cb4 <_fflush_r>
 8005f94:	68a1      	ldr	r1, [r4, #8]
 8005f96:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <cleanup_stdio+0x38>)
 8005f98:	4299      	cmp	r1, r3
 8005f9a:	d002      	beq.n	8005fa2 <cleanup_stdio+0x1e>
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f001 fe89 	bl	8007cb4 <_fflush_r>
 8005fa2:	68e1      	ldr	r1, [r4, #12]
 8005fa4:	4b06      	ldr	r3, [pc, #24]	@ (8005fc0 <cleanup_stdio+0x3c>)
 8005fa6:	4299      	cmp	r1, r3
 8005fa8:	d004      	beq.n	8005fb4 <cleanup_stdio+0x30>
 8005faa:	4620      	mov	r0, r4
 8005fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb0:	f001 be80 	b.w	8007cb4 <_fflush_r>
 8005fb4:	bd10      	pop	{r4, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000390 	.word	0x20000390
 8005fbc:	200003f8 	.word	0x200003f8
 8005fc0:	20000460 	.word	0x20000460

08005fc4 <global_stdio_init.part.0>:
 8005fc4:	b510      	push	{r4, lr}
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff4 <global_stdio_init.part.0+0x30>)
 8005fc8:	4c0b      	ldr	r4, [pc, #44]	@ (8005ff8 <global_stdio_init.part.0+0x34>)
 8005fca:	4a0c      	ldr	r2, [pc, #48]	@ (8005ffc <global_stdio_init.part.0+0x38>)
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	4620      	mov	r0, r4
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2104      	movs	r1, #4
 8005fd4:	f7ff ff94 	bl	8005f00 <std>
 8005fd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fdc:	2201      	movs	r2, #1
 8005fde:	2109      	movs	r1, #9
 8005fe0:	f7ff ff8e 	bl	8005f00 <std>
 8005fe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fe8:	2202      	movs	r2, #2
 8005fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fee:	2112      	movs	r1, #18
 8005ff0:	f7ff bf86 	b.w	8005f00 <std>
 8005ff4:	200004c8 	.word	0x200004c8
 8005ff8:	20000390 	.word	0x20000390
 8005ffc:	08005f6d 	.word	0x08005f6d

08006000 <__sfp_lock_acquire>:
 8006000:	4801      	ldr	r0, [pc, #4]	@ (8006008 <__sfp_lock_acquire+0x8>)
 8006002:	f000 b9aa 	b.w	800635a <__retarget_lock_acquire_recursive>
 8006006:	bf00      	nop
 8006008:	200004d1 	.word	0x200004d1

0800600c <__sfp_lock_release>:
 800600c:	4801      	ldr	r0, [pc, #4]	@ (8006014 <__sfp_lock_release+0x8>)
 800600e:	f000 b9a5 	b.w	800635c <__retarget_lock_release_recursive>
 8006012:	bf00      	nop
 8006014:	200004d1 	.word	0x200004d1

08006018 <__sinit>:
 8006018:	b510      	push	{r4, lr}
 800601a:	4604      	mov	r4, r0
 800601c:	f7ff fff0 	bl	8006000 <__sfp_lock_acquire>
 8006020:	6a23      	ldr	r3, [r4, #32]
 8006022:	b11b      	cbz	r3, 800602c <__sinit+0x14>
 8006024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006028:	f7ff bff0 	b.w	800600c <__sfp_lock_release>
 800602c:	4b04      	ldr	r3, [pc, #16]	@ (8006040 <__sinit+0x28>)
 800602e:	6223      	str	r3, [r4, #32]
 8006030:	4b04      	ldr	r3, [pc, #16]	@ (8006044 <__sinit+0x2c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1f5      	bne.n	8006024 <__sinit+0xc>
 8006038:	f7ff ffc4 	bl	8005fc4 <global_stdio_init.part.0>
 800603c:	e7f2      	b.n	8006024 <__sinit+0xc>
 800603e:	bf00      	nop
 8006040:	08005f85 	.word	0x08005f85
 8006044:	200004c8 	.word	0x200004c8

08006048 <_fwalk_sglue>:
 8006048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800604c:	4607      	mov	r7, r0
 800604e:	4688      	mov	r8, r1
 8006050:	4614      	mov	r4, r2
 8006052:	2600      	movs	r6, #0
 8006054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006058:	f1b9 0901 	subs.w	r9, r9, #1
 800605c:	d505      	bpl.n	800606a <_fwalk_sglue+0x22>
 800605e:	6824      	ldr	r4, [r4, #0]
 8006060:	2c00      	cmp	r4, #0
 8006062:	d1f7      	bne.n	8006054 <_fwalk_sglue+0xc>
 8006064:	4630      	mov	r0, r6
 8006066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800606a:	89ab      	ldrh	r3, [r5, #12]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d907      	bls.n	8006080 <_fwalk_sglue+0x38>
 8006070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006074:	3301      	adds	r3, #1
 8006076:	d003      	beq.n	8006080 <_fwalk_sglue+0x38>
 8006078:	4629      	mov	r1, r5
 800607a:	4638      	mov	r0, r7
 800607c:	47c0      	blx	r8
 800607e:	4306      	orrs	r6, r0
 8006080:	3568      	adds	r5, #104	@ 0x68
 8006082:	e7e9      	b.n	8006058 <_fwalk_sglue+0x10>

08006084 <sniprintf>:
 8006084:	b40c      	push	{r2, r3}
 8006086:	b530      	push	{r4, r5, lr}
 8006088:	4b17      	ldr	r3, [pc, #92]	@ (80060e8 <sniprintf+0x64>)
 800608a:	1e0c      	subs	r4, r1, #0
 800608c:	681d      	ldr	r5, [r3, #0]
 800608e:	b09d      	sub	sp, #116	@ 0x74
 8006090:	da08      	bge.n	80060a4 <sniprintf+0x20>
 8006092:	238b      	movs	r3, #139	@ 0x8b
 8006094:	602b      	str	r3, [r5, #0]
 8006096:	f04f 30ff 	mov.w	r0, #4294967295
 800609a:	b01d      	add	sp, #116	@ 0x74
 800609c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060a0:	b002      	add	sp, #8
 80060a2:	4770      	bx	lr
 80060a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80060a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80060ac:	bf14      	ite	ne
 80060ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80060b2:	4623      	moveq	r3, r4
 80060b4:	9304      	str	r3, [sp, #16]
 80060b6:	9307      	str	r3, [sp, #28]
 80060b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80060bc:	9002      	str	r0, [sp, #8]
 80060be:	9006      	str	r0, [sp, #24]
 80060c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80060c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80060c6:	ab21      	add	r3, sp, #132	@ 0x84
 80060c8:	a902      	add	r1, sp, #8
 80060ca:	4628      	mov	r0, r5
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	f001 fae3 	bl	8007698 <_svfiprintf_r>
 80060d2:	1c43      	adds	r3, r0, #1
 80060d4:	bfbc      	itt	lt
 80060d6:	238b      	movlt	r3, #139	@ 0x8b
 80060d8:	602b      	strlt	r3, [r5, #0]
 80060da:	2c00      	cmp	r4, #0
 80060dc:	d0dd      	beq.n	800609a <sniprintf+0x16>
 80060de:	9b02      	ldr	r3, [sp, #8]
 80060e0:	2200      	movs	r2, #0
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e7d9      	b.n	800609a <sniprintf+0x16>
 80060e6:	bf00      	nop
 80060e8:	20000184 	.word	0x20000184

080060ec <__sread>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f4:	f000 f8e2 	bl	80062bc <_read_r>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	bfab      	itete	ge
 80060fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80060fe:	89a3      	ldrhlt	r3, [r4, #12]
 8006100:	181b      	addge	r3, r3, r0
 8006102:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006106:	bfac      	ite	ge
 8006108:	6563      	strge	r3, [r4, #84]	@ 0x54
 800610a:	81a3      	strhlt	r3, [r4, #12]
 800610c:	bd10      	pop	{r4, pc}

0800610e <__swrite>:
 800610e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006112:	461f      	mov	r7, r3
 8006114:	898b      	ldrh	r3, [r1, #12]
 8006116:	05db      	lsls	r3, r3, #23
 8006118:	4605      	mov	r5, r0
 800611a:	460c      	mov	r4, r1
 800611c:	4616      	mov	r6, r2
 800611e:	d505      	bpl.n	800612c <__swrite+0x1e>
 8006120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006124:	2302      	movs	r3, #2
 8006126:	2200      	movs	r2, #0
 8006128:	f000 f8b6 	bl	8006298 <_lseek_r>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006136:	81a3      	strh	r3, [r4, #12]
 8006138:	4632      	mov	r2, r6
 800613a:	463b      	mov	r3, r7
 800613c:	4628      	mov	r0, r5
 800613e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006142:	f000 b8cd 	b.w	80062e0 <_write_r>

08006146 <__sseek>:
 8006146:	b510      	push	{r4, lr}
 8006148:	460c      	mov	r4, r1
 800614a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800614e:	f000 f8a3 	bl	8006298 <_lseek_r>
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	89a3      	ldrh	r3, [r4, #12]
 8006156:	bf15      	itete	ne
 8006158:	6560      	strne	r0, [r4, #84]	@ 0x54
 800615a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800615e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006162:	81a3      	strheq	r3, [r4, #12]
 8006164:	bf18      	it	ne
 8006166:	81a3      	strhne	r3, [r4, #12]
 8006168:	bd10      	pop	{r4, pc}

0800616a <__sclose>:
 800616a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616e:	f000 b883 	b.w	8006278 <_close_r>

08006172 <memset>:
 8006172:	4402      	add	r2, r0
 8006174:	4603      	mov	r3, r0
 8006176:	4293      	cmp	r3, r2
 8006178:	d100      	bne.n	800617c <memset+0xa>
 800617a:	4770      	bx	lr
 800617c:	f803 1b01 	strb.w	r1, [r3], #1
 8006180:	e7f9      	b.n	8006176 <memset+0x4>

08006182 <strchr>:
 8006182:	b2c9      	uxtb	r1, r1
 8006184:	4603      	mov	r3, r0
 8006186:	4618      	mov	r0, r3
 8006188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800618c:	b112      	cbz	r2, 8006194 <strchr+0x12>
 800618e:	428a      	cmp	r2, r1
 8006190:	d1f9      	bne.n	8006186 <strchr+0x4>
 8006192:	4770      	bx	lr
 8006194:	2900      	cmp	r1, #0
 8006196:	bf18      	it	ne
 8006198:	2000      	movne	r0, #0
 800619a:	4770      	bx	lr

0800619c <strncmp>:
 800619c:	b510      	push	{r4, lr}
 800619e:	b16a      	cbz	r2, 80061bc <strncmp+0x20>
 80061a0:	3901      	subs	r1, #1
 80061a2:	1884      	adds	r4, r0, r2
 80061a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d103      	bne.n	80061b8 <strncmp+0x1c>
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d001      	beq.n	80061b8 <strncmp+0x1c>
 80061b4:	2a00      	cmp	r2, #0
 80061b6:	d1f5      	bne.n	80061a4 <strncmp+0x8>
 80061b8:	1ad0      	subs	r0, r2, r3
 80061ba:	bd10      	pop	{r4, pc}
 80061bc:	4610      	mov	r0, r2
 80061be:	e7fc      	b.n	80061ba <strncmp+0x1e>

080061c0 <strtok>:
 80061c0:	4b16      	ldr	r3, [pc, #88]	@ (800621c <strtok+0x5c>)
 80061c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c6:	681f      	ldr	r7, [r3, #0]
 80061c8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80061ca:	4605      	mov	r5, r0
 80061cc:	460e      	mov	r6, r1
 80061ce:	b9ec      	cbnz	r4, 800620c <strtok+0x4c>
 80061d0:	2050      	movs	r0, #80	@ 0x50
 80061d2:	f000 fc7f 	bl	8006ad4 <malloc>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6478      	str	r0, [r7, #68]	@ 0x44
 80061da:	b920      	cbnz	r0, 80061e6 <strtok+0x26>
 80061dc:	4b10      	ldr	r3, [pc, #64]	@ (8006220 <strtok+0x60>)
 80061de:	4811      	ldr	r0, [pc, #68]	@ (8006224 <strtok+0x64>)
 80061e0:	215b      	movs	r1, #91	@ 0x5b
 80061e2:	f000 f8d5 	bl	8006390 <__assert_func>
 80061e6:	e9c0 4400 	strd	r4, r4, [r0]
 80061ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80061ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80061f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80061f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80061fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80061fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006202:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006206:	6184      	str	r4, [r0, #24]
 8006208:	7704      	strb	r4, [r0, #28]
 800620a:	6244      	str	r4, [r0, #36]	@ 0x24
 800620c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	2301      	movs	r3, #1
 8006214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006218:	f000 b806 	b.w	8006228 <__strtok_r>
 800621c:	20000184 	.word	0x20000184
 8006220:	080083f8 	.word	0x080083f8
 8006224:	0800840f 	.word	0x0800840f

08006228 <__strtok_r>:
 8006228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622a:	4604      	mov	r4, r0
 800622c:	b908      	cbnz	r0, 8006232 <__strtok_r+0xa>
 800622e:	6814      	ldr	r4, [r2, #0]
 8006230:	b144      	cbz	r4, 8006244 <__strtok_r+0x1c>
 8006232:	4620      	mov	r0, r4
 8006234:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006238:	460f      	mov	r7, r1
 800623a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800623e:	b91e      	cbnz	r6, 8006248 <__strtok_r+0x20>
 8006240:	b965      	cbnz	r5, 800625c <__strtok_r+0x34>
 8006242:	6015      	str	r5, [r2, #0]
 8006244:	2000      	movs	r0, #0
 8006246:	e005      	b.n	8006254 <__strtok_r+0x2c>
 8006248:	42b5      	cmp	r5, r6
 800624a:	d1f6      	bne.n	800623a <__strtok_r+0x12>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1f0      	bne.n	8006232 <__strtok_r+0xa>
 8006250:	6014      	str	r4, [r2, #0]
 8006252:	7003      	strb	r3, [r0, #0]
 8006254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006256:	461c      	mov	r4, r3
 8006258:	e00c      	b.n	8006274 <__strtok_r+0x4c>
 800625a:	b915      	cbnz	r5, 8006262 <__strtok_r+0x3a>
 800625c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006260:	460e      	mov	r6, r1
 8006262:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006266:	42ab      	cmp	r3, r5
 8006268:	d1f7      	bne.n	800625a <__strtok_r+0x32>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f3      	beq.n	8006256 <__strtok_r+0x2e>
 800626e:	2300      	movs	r3, #0
 8006270:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006274:	6014      	str	r4, [r2, #0]
 8006276:	e7ed      	b.n	8006254 <__strtok_r+0x2c>

08006278 <_close_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d06      	ldr	r5, [pc, #24]	@ (8006294 <_close_r+0x1c>)
 800627c:	2300      	movs	r3, #0
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
 8006282:	602b      	str	r3, [r5, #0]
 8006284:	f7fb fd16 	bl	8001cb4 <_close>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_close_r+0x1a>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_close_r+0x1a>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	200004cc 	.word	0x200004cc

08006298 <_lseek_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4d07      	ldr	r5, [pc, #28]	@ (80062b8 <_lseek_r+0x20>)
 800629c:	4604      	mov	r4, r0
 800629e:	4608      	mov	r0, r1
 80062a0:	4611      	mov	r1, r2
 80062a2:	2200      	movs	r2, #0
 80062a4:	602a      	str	r2, [r5, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	f7fb fd2b 	bl	8001d02 <_lseek>
 80062ac:	1c43      	adds	r3, r0, #1
 80062ae:	d102      	bne.n	80062b6 <_lseek_r+0x1e>
 80062b0:	682b      	ldr	r3, [r5, #0]
 80062b2:	b103      	cbz	r3, 80062b6 <_lseek_r+0x1e>
 80062b4:	6023      	str	r3, [r4, #0]
 80062b6:	bd38      	pop	{r3, r4, r5, pc}
 80062b8:	200004cc 	.word	0x200004cc

080062bc <_read_r>:
 80062bc:	b538      	push	{r3, r4, r5, lr}
 80062be:	4d07      	ldr	r5, [pc, #28]	@ (80062dc <_read_r+0x20>)
 80062c0:	4604      	mov	r4, r0
 80062c2:	4608      	mov	r0, r1
 80062c4:	4611      	mov	r1, r2
 80062c6:	2200      	movs	r2, #0
 80062c8:	602a      	str	r2, [r5, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	f7fb fcb9 	bl	8001c42 <_read>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_read_r+0x1e>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b103      	cbz	r3, 80062da <_read_r+0x1e>
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	200004cc 	.word	0x200004cc

080062e0 <_write_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4d07      	ldr	r5, [pc, #28]	@ (8006300 <_write_r+0x20>)
 80062e4:	4604      	mov	r4, r0
 80062e6:	4608      	mov	r0, r1
 80062e8:	4611      	mov	r1, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	602a      	str	r2, [r5, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	f7fb fcc4 	bl	8001c7c <_write>
 80062f4:	1c43      	adds	r3, r0, #1
 80062f6:	d102      	bne.n	80062fe <_write_r+0x1e>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	b103      	cbz	r3, 80062fe <_write_r+0x1e>
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	bd38      	pop	{r3, r4, r5, pc}
 8006300:	200004cc 	.word	0x200004cc

08006304 <__errno>:
 8006304:	4b01      	ldr	r3, [pc, #4]	@ (800630c <__errno+0x8>)
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	20000184 	.word	0x20000184

08006310 <__libc_init_array>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	4d0d      	ldr	r5, [pc, #52]	@ (8006348 <__libc_init_array+0x38>)
 8006314:	4c0d      	ldr	r4, [pc, #52]	@ (800634c <__libc_init_array+0x3c>)
 8006316:	1b64      	subs	r4, r4, r5
 8006318:	10a4      	asrs	r4, r4, #2
 800631a:	2600      	movs	r6, #0
 800631c:	42a6      	cmp	r6, r4
 800631e:	d109      	bne.n	8006334 <__libc_init_array+0x24>
 8006320:	4d0b      	ldr	r5, [pc, #44]	@ (8006350 <__libc_init_array+0x40>)
 8006322:	4c0c      	ldr	r4, [pc, #48]	@ (8006354 <__libc_init_array+0x44>)
 8006324:	f002 f818 	bl	8008358 <_init>
 8006328:	1b64      	subs	r4, r4, r5
 800632a:	10a4      	asrs	r4, r4, #2
 800632c:	2600      	movs	r6, #0
 800632e:	42a6      	cmp	r6, r4
 8006330:	d105      	bne.n	800633e <__libc_init_array+0x2e>
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	f855 3b04 	ldr.w	r3, [r5], #4
 8006338:	4798      	blx	r3
 800633a:	3601      	adds	r6, #1
 800633c:	e7ee      	b.n	800631c <__libc_init_array+0xc>
 800633e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006342:	4798      	blx	r3
 8006344:	3601      	adds	r6, #1
 8006346:	e7f2      	b.n	800632e <__libc_init_array+0x1e>
 8006348:	080087b4 	.word	0x080087b4
 800634c:	080087b4 	.word	0x080087b4
 8006350:	080087b4 	.word	0x080087b4
 8006354:	080087b8 	.word	0x080087b8

08006358 <__retarget_lock_init_recursive>:
 8006358:	4770      	bx	lr

0800635a <__retarget_lock_acquire_recursive>:
 800635a:	4770      	bx	lr

0800635c <__retarget_lock_release_recursive>:
 800635c:	4770      	bx	lr

0800635e <memcpy>:
 800635e:	440a      	add	r2, r1
 8006360:	4291      	cmp	r1, r2
 8006362:	f100 33ff 	add.w	r3, r0, #4294967295
 8006366:	d100      	bne.n	800636a <memcpy+0xc>
 8006368:	4770      	bx	lr
 800636a:	b510      	push	{r4, lr}
 800636c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006370:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006374:	4291      	cmp	r1, r2
 8006376:	d1f9      	bne.n	800636c <memcpy+0xe>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	0000      	movs	r0, r0
 800637c:	0000      	movs	r0, r0
	...

08006380 <nan>:
 8006380:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006388 <nan+0x8>
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	00000000 	.word	0x00000000
 800638c:	7ff80000 	.word	0x7ff80000

08006390 <__assert_func>:
 8006390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006392:	4614      	mov	r4, r2
 8006394:	461a      	mov	r2, r3
 8006396:	4b09      	ldr	r3, [pc, #36]	@ (80063bc <__assert_func+0x2c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4605      	mov	r5, r0
 800639c:	68d8      	ldr	r0, [r3, #12]
 800639e:	b954      	cbnz	r4, 80063b6 <__assert_func+0x26>
 80063a0:	4b07      	ldr	r3, [pc, #28]	@ (80063c0 <__assert_func+0x30>)
 80063a2:	461c      	mov	r4, r3
 80063a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063a8:	9100      	str	r1, [sp, #0]
 80063aa:	462b      	mov	r3, r5
 80063ac:	4905      	ldr	r1, [pc, #20]	@ (80063c4 <__assert_func+0x34>)
 80063ae:	f001 fca9 	bl	8007d04 <fiprintf>
 80063b2:	f001 fce3 	bl	8007d7c <abort>
 80063b6:	4b04      	ldr	r3, [pc, #16]	@ (80063c8 <__assert_func+0x38>)
 80063b8:	e7f4      	b.n	80063a4 <__assert_func+0x14>
 80063ba:	bf00      	nop
 80063bc:	20000184 	.word	0x20000184
 80063c0:	080084ac 	.word	0x080084ac
 80063c4:	0800847e 	.word	0x0800847e
 80063c8:	08008471 	.word	0x08008471

080063cc <_free_r>:
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	4605      	mov	r5, r0
 80063d0:	2900      	cmp	r1, #0
 80063d2:	d041      	beq.n	8006458 <_free_r+0x8c>
 80063d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063d8:	1f0c      	subs	r4, r1, #4
 80063da:	2b00      	cmp	r3, #0
 80063dc:	bfb8      	it	lt
 80063de:	18e4      	addlt	r4, r4, r3
 80063e0:	f000 fc34 	bl	8006c4c <__malloc_lock>
 80063e4:	4a1d      	ldr	r2, [pc, #116]	@ (800645c <_free_r+0x90>)
 80063e6:	6813      	ldr	r3, [r2, #0]
 80063e8:	b933      	cbnz	r3, 80063f8 <_free_r+0x2c>
 80063ea:	6063      	str	r3, [r4, #4]
 80063ec:	6014      	str	r4, [r2, #0]
 80063ee:	4628      	mov	r0, r5
 80063f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063f4:	f000 bc30 	b.w	8006c58 <__malloc_unlock>
 80063f8:	42a3      	cmp	r3, r4
 80063fa:	d908      	bls.n	800640e <_free_r+0x42>
 80063fc:	6820      	ldr	r0, [r4, #0]
 80063fe:	1821      	adds	r1, r4, r0
 8006400:	428b      	cmp	r3, r1
 8006402:	bf01      	itttt	eq
 8006404:	6819      	ldreq	r1, [r3, #0]
 8006406:	685b      	ldreq	r3, [r3, #4]
 8006408:	1809      	addeq	r1, r1, r0
 800640a:	6021      	streq	r1, [r4, #0]
 800640c:	e7ed      	b.n	80063ea <_free_r+0x1e>
 800640e:	461a      	mov	r2, r3
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	b10b      	cbz	r3, 8006418 <_free_r+0x4c>
 8006414:	42a3      	cmp	r3, r4
 8006416:	d9fa      	bls.n	800640e <_free_r+0x42>
 8006418:	6811      	ldr	r1, [r2, #0]
 800641a:	1850      	adds	r0, r2, r1
 800641c:	42a0      	cmp	r0, r4
 800641e:	d10b      	bne.n	8006438 <_free_r+0x6c>
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	4401      	add	r1, r0
 8006424:	1850      	adds	r0, r2, r1
 8006426:	4283      	cmp	r3, r0
 8006428:	6011      	str	r1, [r2, #0]
 800642a:	d1e0      	bne.n	80063ee <_free_r+0x22>
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	6053      	str	r3, [r2, #4]
 8006432:	4408      	add	r0, r1
 8006434:	6010      	str	r0, [r2, #0]
 8006436:	e7da      	b.n	80063ee <_free_r+0x22>
 8006438:	d902      	bls.n	8006440 <_free_r+0x74>
 800643a:	230c      	movs	r3, #12
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	e7d6      	b.n	80063ee <_free_r+0x22>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	1821      	adds	r1, r4, r0
 8006444:	428b      	cmp	r3, r1
 8006446:	bf04      	itt	eq
 8006448:	6819      	ldreq	r1, [r3, #0]
 800644a:	685b      	ldreq	r3, [r3, #4]
 800644c:	6063      	str	r3, [r4, #4]
 800644e:	bf04      	itt	eq
 8006450:	1809      	addeq	r1, r1, r0
 8006452:	6021      	streq	r1, [r4, #0]
 8006454:	6054      	str	r4, [r2, #4]
 8006456:	e7ca      	b.n	80063ee <_free_r+0x22>
 8006458:	bd38      	pop	{r3, r4, r5, pc}
 800645a:	bf00      	nop
 800645c:	200004d8 	.word	0x200004d8

08006460 <rshift>:
 8006460:	6903      	ldr	r3, [r0, #16]
 8006462:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006466:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800646a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800646e:	f100 0414 	add.w	r4, r0, #20
 8006472:	dd45      	ble.n	8006500 <rshift+0xa0>
 8006474:	f011 011f 	ands.w	r1, r1, #31
 8006478:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800647c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006480:	d10c      	bne.n	800649c <rshift+0x3c>
 8006482:	f100 0710 	add.w	r7, r0, #16
 8006486:	4629      	mov	r1, r5
 8006488:	42b1      	cmp	r1, r6
 800648a:	d334      	bcc.n	80064f6 <rshift+0x96>
 800648c:	1a9b      	subs	r3, r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	1eea      	subs	r2, r5, #3
 8006492:	4296      	cmp	r6, r2
 8006494:	bf38      	it	cc
 8006496:	2300      	movcc	r3, #0
 8006498:	4423      	add	r3, r4
 800649a:	e015      	b.n	80064c8 <rshift+0x68>
 800649c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80064a0:	f1c1 0820 	rsb	r8, r1, #32
 80064a4:	40cf      	lsrs	r7, r1
 80064a6:	f105 0e04 	add.w	lr, r5, #4
 80064aa:	46a1      	mov	r9, r4
 80064ac:	4576      	cmp	r6, lr
 80064ae:	46f4      	mov	ip, lr
 80064b0:	d815      	bhi.n	80064de <rshift+0x7e>
 80064b2:	1a9a      	subs	r2, r3, r2
 80064b4:	0092      	lsls	r2, r2, #2
 80064b6:	3a04      	subs	r2, #4
 80064b8:	3501      	adds	r5, #1
 80064ba:	42ae      	cmp	r6, r5
 80064bc:	bf38      	it	cc
 80064be:	2200      	movcc	r2, #0
 80064c0:	18a3      	adds	r3, r4, r2
 80064c2:	50a7      	str	r7, [r4, r2]
 80064c4:	b107      	cbz	r7, 80064c8 <rshift+0x68>
 80064c6:	3304      	adds	r3, #4
 80064c8:	1b1a      	subs	r2, r3, r4
 80064ca:	42a3      	cmp	r3, r4
 80064cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80064d0:	bf08      	it	eq
 80064d2:	2300      	moveq	r3, #0
 80064d4:	6102      	str	r2, [r0, #16]
 80064d6:	bf08      	it	eq
 80064d8:	6143      	streq	r3, [r0, #20]
 80064da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064de:	f8dc c000 	ldr.w	ip, [ip]
 80064e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80064e6:	ea4c 0707 	orr.w	r7, ip, r7
 80064ea:	f849 7b04 	str.w	r7, [r9], #4
 80064ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80064f2:	40cf      	lsrs	r7, r1
 80064f4:	e7da      	b.n	80064ac <rshift+0x4c>
 80064f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80064fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80064fe:	e7c3      	b.n	8006488 <rshift+0x28>
 8006500:	4623      	mov	r3, r4
 8006502:	e7e1      	b.n	80064c8 <rshift+0x68>

08006504 <__hexdig_fun>:
 8006504:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006508:	2b09      	cmp	r3, #9
 800650a:	d802      	bhi.n	8006512 <__hexdig_fun+0xe>
 800650c:	3820      	subs	r0, #32
 800650e:	b2c0      	uxtb	r0, r0
 8006510:	4770      	bx	lr
 8006512:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006516:	2b05      	cmp	r3, #5
 8006518:	d801      	bhi.n	800651e <__hexdig_fun+0x1a>
 800651a:	3847      	subs	r0, #71	@ 0x47
 800651c:	e7f7      	b.n	800650e <__hexdig_fun+0xa>
 800651e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006522:	2b05      	cmp	r3, #5
 8006524:	d801      	bhi.n	800652a <__hexdig_fun+0x26>
 8006526:	3827      	subs	r0, #39	@ 0x27
 8006528:	e7f1      	b.n	800650e <__hexdig_fun+0xa>
 800652a:	2000      	movs	r0, #0
 800652c:	4770      	bx	lr
	...

08006530 <__gethex>:
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	b085      	sub	sp, #20
 8006536:	468a      	mov	sl, r1
 8006538:	9302      	str	r3, [sp, #8]
 800653a:	680b      	ldr	r3, [r1, #0]
 800653c:	9001      	str	r0, [sp, #4]
 800653e:	4690      	mov	r8, r2
 8006540:	1c9c      	adds	r4, r3, #2
 8006542:	46a1      	mov	r9, r4
 8006544:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006548:	2830      	cmp	r0, #48	@ 0x30
 800654a:	d0fa      	beq.n	8006542 <__gethex+0x12>
 800654c:	eba9 0303 	sub.w	r3, r9, r3
 8006550:	f1a3 0b02 	sub.w	fp, r3, #2
 8006554:	f7ff ffd6 	bl	8006504 <__hexdig_fun>
 8006558:	4605      	mov	r5, r0
 800655a:	2800      	cmp	r0, #0
 800655c:	d168      	bne.n	8006630 <__gethex+0x100>
 800655e:	49a0      	ldr	r1, [pc, #640]	@ (80067e0 <__gethex+0x2b0>)
 8006560:	2201      	movs	r2, #1
 8006562:	4648      	mov	r0, r9
 8006564:	f7ff fe1a 	bl	800619c <strncmp>
 8006568:	4607      	mov	r7, r0
 800656a:	2800      	cmp	r0, #0
 800656c:	d167      	bne.n	800663e <__gethex+0x10e>
 800656e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006572:	4626      	mov	r6, r4
 8006574:	f7ff ffc6 	bl	8006504 <__hexdig_fun>
 8006578:	2800      	cmp	r0, #0
 800657a:	d062      	beq.n	8006642 <__gethex+0x112>
 800657c:	4623      	mov	r3, r4
 800657e:	7818      	ldrb	r0, [r3, #0]
 8006580:	2830      	cmp	r0, #48	@ 0x30
 8006582:	4699      	mov	r9, r3
 8006584:	f103 0301 	add.w	r3, r3, #1
 8006588:	d0f9      	beq.n	800657e <__gethex+0x4e>
 800658a:	f7ff ffbb 	bl	8006504 <__hexdig_fun>
 800658e:	fab0 f580 	clz	r5, r0
 8006592:	096d      	lsrs	r5, r5, #5
 8006594:	f04f 0b01 	mov.w	fp, #1
 8006598:	464a      	mov	r2, r9
 800659a:	4616      	mov	r6, r2
 800659c:	3201      	adds	r2, #1
 800659e:	7830      	ldrb	r0, [r6, #0]
 80065a0:	f7ff ffb0 	bl	8006504 <__hexdig_fun>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d1f8      	bne.n	800659a <__gethex+0x6a>
 80065a8:	498d      	ldr	r1, [pc, #564]	@ (80067e0 <__gethex+0x2b0>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	4630      	mov	r0, r6
 80065ae:	f7ff fdf5 	bl	800619c <strncmp>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d13f      	bne.n	8006636 <__gethex+0x106>
 80065b6:	b944      	cbnz	r4, 80065ca <__gethex+0x9a>
 80065b8:	1c74      	adds	r4, r6, #1
 80065ba:	4622      	mov	r2, r4
 80065bc:	4616      	mov	r6, r2
 80065be:	3201      	adds	r2, #1
 80065c0:	7830      	ldrb	r0, [r6, #0]
 80065c2:	f7ff ff9f 	bl	8006504 <__hexdig_fun>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d1f8      	bne.n	80065bc <__gethex+0x8c>
 80065ca:	1ba4      	subs	r4, r4, r6
 80065cc:	00a7      	lsls	r7, r4, #2
 80065ce:	7833      	ldrb	r3, [r6, #0]
 80065d0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80065d4:	2b50      	cmp	r3, #80	@ 0x50
 80065d6:	d13e      	bne.n	8006656 <__gethex+0x126>
 80065d8:	7873      	ldrb	r3, [r6, #1]
 80065da:	2b2b      	cmp	r3, #43	@ 0x2b
 80065dc:	d033      	beq.n	8006646 <__gethex+0x116>
 80065de:	2b2d      	cmp	r3, #45	@ 0x2d
 80065e0:	d034      	beq.n	800664c <__gethex+0x11c>
 80065e2:	1c71      	adds	r1, r6, #1
 80065e4:	2400      	movs	r4, #0
 80065e6:	7808      	ldrb	r0, [r1, #0]
 80065e8:	f7ff ff8c 	bl	8006504 <__hexdig_fun>
 80065ec:	1e43      	subs	r3, r0, #1
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b18      	cmp	r3, #24
 80065f2:	d830      	bhi.n	8006656 <__gethex+0x126>
 80065f4:	f1a0 0210 	sub.w	r2, r0, #16
 80065f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80065fc:	f7ff ff82 	bl	8006504 <__hexdig_fun>
 8006600:	f100 3cff 	add.w	ip, r0, #4294967295
 8006604:	fa5f fc8c 	uxtb.w	ip, ip
 8006608:	f1bc 0f18 	cmp.w	ip, #24
 800660c:	f04f 030a 	mov.w	r3, #10
 8006610:	d91e      	bls.n	8006650 <__gethex+0x120>
 8006612:	b104      	cbz	r4, 8006616 <__gethex+0xe6>
 8006614:	4252      	negs	r2, r2
 8006616:	4417      	add	r7, r2
 8006618:	f8ca 1000 	str.w	r1, [sl]
 800661c:	b1ed      	cbz	r5, 800665a <__gethex+0x12a>
 800661e:	f1bb 0f00 	cmp.w	fp, #0
 8006622:	bf0c      	ite	eq
 8006624:	2506      	moveq	r5, #6
 8006626:	2500      	movne	r5, #0
 8006628:	4628      	mov	r0, r5
 800662a:	b005      	add	sp, #20
 800662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006630:	2500      	movs	r5, #0
 8006632:	462c      	mov	r4, r5
 8006634:	e7b0      	b.n	8006598 <__gethex+0x68>
 8006636:	2c00      	cmp	r4, #0
 8006638:	d1c7      	bne.n	80065ca <__gethex+0x9a>
 800663a:	4627      	mov	r7, r4
 800663c:	e7c7      	b.n	80065ce <__gethex+0x9e>
 800663e:	464e      	mov	r6, r9
 8006640:	462f      	mov	r7, r5
 8006642:	2501      	movs	r5, #1
 8006644:	e7c3      	b.n	80065ce <__gethex+0x9e>
 8006646:	2400      	movs	r4, #0
 8006648:	1cb1      	adds	r1, r6, #2
 800664a:	e7cc      	b.n	80065e6 <__gethex+0xb6>
 800664c:	2401      	movs	r4, #1
 800664e:	e7fb      	b.n	8006648 <__gethex+0x118>
 8006650:	fb03 0002 	mla	r0, r3, r2, r0
 8006654:	e7ce      	b.n	80065f4 <__gethex+0xc4>
 8006656:	4631      	mov	r1, r6
 8006658:	e7de      	b.n	8006618 <__gethex+0xe8>
 800665a:	eba6 0309 	sub.w	r3, r6, r9
 800665e:	3b01      	subs	r3, #1
 8006660:	4629      	mov	r1, r5
 8006662:	2b07      	cmp	r3, #7
 8006664:	dc0a      	bgt.n	800667c <__gethex+0x14c>
 8006666:	9801      	ldr	r0, [sp, #4]
 8006668:	f000 fafc 	bl	8006c64 <_Balloc>
 800666c:	4604      	mov	r4, r0
 800666e:	b940      	cbnz	r0, 8006682 <__gethex+0x152>
 8006670:	4b5c      	ldr	r3, [pc, #368]	@ (80067e4 <__gethex+0x2b4>)
 8006672:	4602      	mov	r2, r0
 8006674:	21e4      	movs	r1, #228	@ 0xe4
 8006676:	485c      	ldr	r0, [pc, #368]	@ (80067e8 <__gethex+0x2b8>)
 8006678:	f7ff fe8a 	bl	8006390 <__assert_func>
 800667c:	3101      	adds	r1, #1
 800667e:	105b      	asrs	r3, r3, #1
 8006680:	e7ef      	b.n	8006662 <__gethex+0x132>
 8006682:	f100 0a14 	add.w	sl, r0, #20
 8006686:	2300      	movs	r3, #0
 8006688:	4655      	mov	r5, sl
 800668a:	469b      	mov	fp, r3
 800668c:	45b1      	cmp	r9, r6
 800668e:	d337      	bcc.n	8006700 <__gethex+0x1d0>
 8006690:	f845 bb04 	str.w	fp, [r5], #4
 8006694:	eba5 050a 	sub.w	r5, r5, sl
 8006698:	10ad      	asrs	r5, r5, #2
 800669a:	6125      	str	r5, [r4, #16]
 800669c:	4658      	mov	r0, fp
 800669e:	f000 fbd3 	bl	8006e48 <__hi0bits>
 80066a2:	016d      	lsls	r5, r5, #5
 80066a4:	f8d8 6000 	ldr.w	r6, [r8]
 80066a8:	1a2d      	subs	r5, r5, r0
 80066aa:	42b5      	cmp	r5, r6
 80066ac:	dd54      	ble.n	8006758 <__gethex+0x228>
 80066ae:	1bad      	subs	r5, r5, r6
 80066b0:	4629      	mov	r1, r5
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 ff67 	bl	8007586 <__any_on>
 80066b8:	4681      	mov	r9, r0
 80066ba:	b178      	cbz	r0, 80066dc <__gethex+0x1ac>
 80066bc:	1e6b      	subs	r3, r5, #1
 80066be:	1159      	asrs	r1, r3, #5
 80066c0:	f003 021f 	and.w	r2, r3, #31
 80066c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80066c8:	f04f 0901 	mov.w	r9, #1
 80066cc:	fa09 f202 	lsl.w	r2, r9, r2
 80066d0:	420a      	tst	r2, r1
 80066d2:	d003      	beq.n	80066dc <__gethex+0x1ac>
 80066d4:	454b      	cmp	r3, r9
 80066d6:	dc36      	bgt.n	8006746 <__gethex+0x216>
 80066d8:	f04f 0902 	mov.w	r9, #2
 80066dc:	4629      	mov	r1, r5
 80066de:	4620      	mov	r0, r4
 80066e0:	f7ff febe 	bl	8006460 <rshift>
 80066e4:	442f      	add	r7, r5
 80066e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066ea:	42bb      	cmp	r3, r7
 80066ec:	da42      	bge.n	8006774 <__gethex+0x244>
 80066ee:	9801      	ldr	r0, [sp, #4]
 80066f0:	4621      	mov	r1, r4
 80066f2:	f000 faf7 	bl	8006ce4 <_Bfree>
 80066f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066f8:	2300      	movs	r3, #0
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	25a3      	movs	r5, #163	@ 0xa3
 80066fe:	e793      	b.n	8006628 <__gethex+0xf8>
 8006700:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006704:	2a2e      	cmp	r2, #46	@ 0x2e
 8006706:	d012      	beq.n	800672e <__gethex+0x1fe>
 8006708:	2b20      	cmp	r3, #32
 800670a:	d104      	bne.n	8006716 <__gethex+0x1e6>
 800670c:	f845 bb04 	str.w	fp, [r5], #4
 8006710:	f04f 0b00 	mov.w	fp, #0
 8006714:	465b      	mov	r3, fp
 8006716:	7830      	ldrb	r0, [r6, #0]
 8006718:	9303      	str	r3, [sp, #12]
 800671a:	f7ff fef3 	bl	8006504 <__hexdig_fun>
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	f000 000f 	and.w	r0, r0, #15
 8006724:	4098      	lsls	r0, r3
 8006726:	ea4b 0b00 	orr.w	fp, fp, r0
 800672a:	3304      	adds	r3, #4
 800672c:	e7ae      	b.n	800668c <__gethex+0x15c>
 800672e:	45b1      	cmp	r9, r6
 8006730:	d8ea      	bhi.n	8006708 <__gethex+0x1d8>
 8006732:	492b      	ldr	r1, [pc, #172]	@ (80067e0 <__gethex+0x2b0>)
 8006734:	9303      	str	r3, [sp, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	4630      	mov	r0, r6
 800673a:	f7ff fd2f 	bl	800619c <strncmp>
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	2800      	cmp	r0, #0
 8006742:	d1e1      	bne.n	8006708 <__gethex+0x1d8>
 8006744:	e7a2      	b.n	800668c <__gethex+0x15c>
 8006746:	1ea9      	subs	r1, r5, #2
 8006748:	4620      	mov	r0, r4
 800674a:	f000 ff1c 	bl	8007586 <__any_on>
 800674e:	2800      	cmp	r0, #0
 8006750:	d0c2      	beq.n	80066d8 <__gethex+0x1a8>
 8006752:	f04f 0903 	mov.w	r9, #3
 8006756:	e7c1      	b.n	80066dc <__gethex+0x1ac>
 8006758:	da09      	bge.n	800676e <__gethex+0x23e>
 800675a:	1b75      	subs	r5, r6, r5
 800675c:	4621      	mov	r1, r4
 800675e:	9801      	ldr	r0, [sp, #4]
 8006760:	462a      	mov	r2, r5
 8006762:	f000 fcd7 	bl	8007114 <__lshift>
 8006766:	1b7f      	subs	r7, r7, r5
 8006768:	4604      	mov	r4, r0
 800676a:	f100 0a14 	add.w	sl, r0, #20
 800676e:	f04f 0900 	mov.w	r9, #0
 8006772:	e7b8      	b.n	80066e6 <__gethex+0x1b6>
 8006774:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006778:	42bd      	cmp	r5, r7
 800677a:	dd6f      	ble.n	800685c <__gethex+0x32c>
 800677c:	1bed      	subs	r5, r5, r7
 800677e:	42ae      	cmp	r6, r5
 8006780:	dc34      	bgt.n	80067ec <__gethex+0x2bc>
 8006782:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d022      	beq.n	80067d0 <__gethex+0x2a0>
 800678a:	2b03      	cmp	r3, #3
 800678c:	d024      	beq.n	80067d8 <__gethex+0x2a8>
 800678e:	2b01      	cmp	r3, #1
 8006790:	d115      	bne.n	80067be <__gethex+0x28e>
 8006792:	42ae      	cmp	r6, r5
 8006794:	d113      	bne.n	80067be <__gethex+0x28e>
 8006796:	2e01      	cmp	r6, #1
 8006798:	d10b      	bne.n	80067b2 <__gethex+0x282>
 800679a:	9a02      	ldr	r2, [sp, #8]
 800679c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	2301      	movs	r3, #1
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	f8ca 3000 	str.w	r3, [sl]
 80067aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067ac:	2562      	movs	r5, #98	@ 0x62
 80067ae:	601c      	str	r4, [r3, #0]
 80067b0:	e73a      	b.n	8006628 <__gethex+0xf8>
 80067b2:	1e71      	subs	r1, r6, #1
 80067b4:	4620      	mov	r0, r4
 80067b6:	f000 fee6 	bl	8007586 <__any_on>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d1ed      	bne.n	800679a <__gethex+0x26a>
 80067be:	9801      	ldr	r0, [sp, #4]
 80067c0:	4621      	mov	r1, r4
 80067c2:	f000 fa8f 	bl	8006ce4 <_Bfree>
 80067c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067c8:	2300      	movs	r3, #0
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	2550      	movs	r5, #80	@ 0x50
 80067ce:	e72b      	b.n	8006628 <__gethex+0xf8>
 80067d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1f3      	bne.n	80067be <__gethex+0x28e>
 80067d6:	e7e0      	b.n	800679a <__gethex+0x26a>
 80067d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1dd      	bne.n	800679a <__gethex+0x26a>
 80067de:	e7ee      	b.n	80067be <__gethex+0x28e>
 80067e0:	08008394 	.word	0x08008394
 80067e4:	080084ad 	.word	0x080084ad
 80067e8:	080084be 	.word	0x080084be
 80067ec:	1e6f      	subs	r7, r5, #1
 80067ee:	f1b9 0f00 	cmp.w	r9, #0
 80067f2:	d130      	bne.n	8006856 <__gethex+0x326>
 80067f4:	b127      	cbz	r7, 8006800 <__gethex+0x2d0>
 80067f6:	4639      	mov	r1, r7
 80067f8:	4620      	mov	r0, r4
 80067fa:	f000 fec4 	bl	8007586 <__any_on>
 80067fe:	4681      	mov	r9, r0
 8006800:	117a      	asrs	r2, r7, #5
 8006802:	2301      	movs	r3, #1
 8006804:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006808:	f007 071f 	and.w	r7, r7, #31
 800680c:	40bb      	lsls	r3, r7
 800680e:	4213      	tst	r3, r2
 8006810:	4629      	mov	r1, r5
 8006812:	4620      	mov	r0, r4
 8006814:	bf18      	it	ne
 8006816:	f049 0902 	orrne.w	r9, r9, #2
 800681a:	f7ff fe21 	bl	8006460 <rshift>
 800681e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006822:	1b76      	subs	r6, r6, r5
 8006824:	2502      	movs	r5, #2
 8006826:	f1b9 0f00 	cmp.w	r9, #0
 800682a:	d047      	beq.n	80068bc <__gethex+0x38c>
 800682c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d015      	beq.n	8006860 <__gethex+0x330>
 8006834:	2b03      	cmp	r3, #3
 8006836:	d017      	beq.n	8006868 <__gethex+0x338>
 8006838:	2b01      	cmp	r3, #1
 800683a:	d109      	bne.n	8006850 <__gethex+0x320>
 800683c:	f019 0f02 	tst.w	r9, #2
 8006840:	d006      	beq.n	8006850 <__gethex+0x320>
 8006842:	f8da 3000 	ldr.w	r3, [sl]
 8006846:	ea49 0903 	orr.w	r9, r9, r3
 800684a:	f019 0f01 	tst.w	r9, #1
 800684e:	d10e      	bne.n	800686e <__gethex+0x33e>
 8006850:	f045 0510 	orr.w	r5, r5, #16
 8006854:	e032      	b.n	80068bc <__gethex+0x38c>
 8006856:	f04f 0901 	mov.w	r9, #1
 800685a:	e7d1      	b.n	8006800 <__gethex+0x2d0>
 800685c:	2501      	movs	r5, #1
 800685e:	e7e2      	b.n	8006826 <__gethex+0x2f6>
 8006860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006862:	f1c3 0301 	rsb	r3, r3, #1
 8006866:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006868:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0f0      	beq.n	8006850 <__gethex+0x320>
 800686e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006872:	f104 0314 	add.w	r3, r4, #20
 8006876:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800687a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800687e:	f04f 0c00 	mov.w	ip, #0
 8006882:	4618      	mov	r0, r3
 8006884:	f853 2b04 	ldr.w	r2, [r3], #4
 8006888:	f1b2 3fff 	cmp.w	r2, #4294967295
 800688c:	d01b      	beq.n	80068c6 <__gethex+0x396>
 800688e:	3201      	adds	r2, #1
 8006890:	6002      	str	r2, [r0, #0]
 8006892:	2d02      	cmp	r5, #2
 8006894:	f104 0314 	add.w	r3, r4, #20
 8006898:	d13c      	bne.n	8006914 <__gethex+0x3e4>
 800689a:	f8d8 2000 	ldr.w	r2, [r8]
 800689e:	3a01      	subs	r2, #1
 80068a0:	42b2      	cmp	r2, r6
 80068a2:	d109      	bne.n	80068b8 <__gethex+0x388>
 80068a4:	1171      	asrs	r1, r6, #5
 80068a6:	2201      	movs	r2, #1
 80068a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068ac:	f006 061f 	and.w	r6, r6, #31
 80068b0:	fa02 f606 	lsl.w	r6, r2, r6
 80068b4:	421e      	tst	r6, r3
 80068b6:	d13a      	bne.n	800692e <__gethex+0x3fe>
 80068b8:	f045 0520 	orr.w	r5, r5, #32
 80068bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068be:	601c      	str	r4, [r3, #0]
 80068c0:	9b02      	ldr	r3, [sp, #8]
 80068c2:	601f      	str	r7, [r3, #0]
 80068c4:	e6b0      	b.n	8006628 <__gethex+0xf8>
 80068c6:	4299      	cmp	r1, r3
 80068c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80068cc:	d8d9      	bhi.n	8006882 <__gethex+0x352>
 80068ce:	68a3      	ldr	r3, [r4, #8]
 80068d0:	459b      	cmp	fp, r3
 80068d2:	db17      	blt.n	8006904 <__gethex+0x3d4>
 80068d4:	6861      	ldr	r1, [r4, #4]
 80068d6:	9801      	ldr	r0, [sp, #4]
 80068d8:	3101      	adds	r1, #1
 80068da:	f000 f9c3 	bl	8006c64 <_Balloc>
 80068de:	4681      	mov	r9, r0
 80068e0:	b918      	cbnz	r0, 80068ea <__gethex+0x3ba>
 80068e2:	4b1a      	ldr	r3, [pc, #104]	@ (800694c <__gethex+0x41c>)
 80068e4:	4602      	mov	r2, r0
 80068e6:	2184      	movs	r1, #132	@ 0x84
 80068e8:	e6c5      	b.n	8006676 <__gethex+0x146>
 80068ea:	6922      	ldr	r2, [r4, #16]
 80068ec:	3202      	adds	r2, #2
 80068ee:	f104 010c 	add.w	r1, r4, #12
 80068f2:	0092      	lsls	r2, r2, #2
 80068f4:	300c      	adds	r0, #12
 80068f6:	f7ff fd32 	bl	800635e <memcpy>
 80068fa:	4621      	mov	r1, r4
 80068fc:	9801      	ldr	r0, [sp, #4]
 80068fe:	f000 f9f1 	bl	8006ce4 <_Bfree>
 8006902:	464c      	mov	r4, r9
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800690c:	6122      	str	r2, [r4, #16]
 800690e:	2201      	movs	r2, #1
 8006910:	615a      	str	r2, [r3, #20]
 8006912:	e7be      	b.n	8006892 <__gethex+0x362>
 8006914:	6922      	ldr	r2, [r4, #16]
 8006916:	455a      	cmp	r2, fp
 8006918:	dd0b      	ble.n	8006932 <__gethex+0x402>
 800691a:	2101      	movs	r1, #1
 800691c:	4620      	mov	r0, r4
 800691e:	f7ff fd9f 	bl	8006460 <rshift>
 8006922:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006926:	3701      	adds	r7, #1
 8006928:	42bb      	cmp	r3, r7
 800692a:	f6ff aee0 	blt.w	80066ee <__gethex+0x1be>
 800692e:	2501      	movs	r5, #1
 8006930:	e7c2      	b.n	80068b8 <__gethex+0x388>
 8006932:	f016 061f 	ands.w	r6, r6, #31
 8006936:	d0fa      	beq.n	800692e <__gethex+0x3fe>
 8006938:	4453      	add	r3, sl
 800693a:	f1c6 0620 	rsb	r6, r6, #32
 800693e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006942:	f000 fa81 	bl	8006e48 <__hi0bits>
 8006946:	42b0      	cmp	r0, r6
 8006948:	dbe7      	blt.n	800691a <__gethex+0x3ea>
 800694a:	e7f0      	b.n	800692e <__gethex+0x3fe>
 800694c:	080084ad 	.word	0x080084ad

08006950 <L_shift>:
 8006950:	f1c2 0208 	rsb	r2, r2, #8
 8006954:	0092      	lsls	r2, r2, #2
 8006956:	b570      	push	{r4, r5, r6, lr}
 8006958:	f1c2 0620 	rsb	r6, r2, #32
 800695c:	6843      	ldr	r3, [r0, #4]
 800695e:	6804      	ldr	r4, [r0, #0]
 8006960:	fa03 f506 	lsl.w	r5, r3, r6
 8006964:	432c      	orrs	r4, r5
 8006966:	40d3      	lsrs	r3, r2
 8006968:	6004      	str	r4, [r0, #0]
 800696a:	f840 3f04 	str.w	r3, [r0, #4]!
 800696e:	4288      	cmp	r0, r1
 8006970:	d3f4      	bcc.n	800695c <L_shift+0xc>
 8006972:	bd70      	pop	{r4, r5, r6, pc}

08006974 <__match>:
 8006974:	b530      	push	{r4, r5, lr}
 8006976:	6803      	ldr	r3, [r0, #0]
 8006978:	3301      	adds	r3, #1
 800697a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800697e:	b914      	cbnz	r4, 8006986 <__match+0x12>
 8006980:	6003      	str	r3, [r0, #0]
 8006982:	2001      	movs	r0, #1
 8006984:	bd30      	pop	{r4, r5, pc}
 8006986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800698a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800698e:	2d19      	cmp	r5, #25
 8006990:	bf98      	it	ls
 8006992:	3220      	addls	r2, #32
 8006994:	42a2      	cmp	r2, r4
 8006996:	d0f0      	beq.n	800697a <__match+0x6>
 8006998:	2000      	movs	r0, #0
 800699a:	e7f3      	b.n	8006984 <__match+0x10>

0800699c <__hexnan>:
 800699c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	680b      	ldr	r3, [r1, #0]
 80069a2:	6801      	ldr	r1, [r0, #0]
 80069a4:	115e      	asrs	r6, r3, #5
 80069a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80069aa:	f013 031f 	ands.w	r3, r3, #31
 80069ae:	b087      	sub	sp, #28
 80069b0:	bf18      	it	ne
 80069b2:	3604      	addne	r6, #4
 80069b4:	2500      	movs	r5, #0
 80069b6:	1f37      	subs	r7, r6, #4
 80069b8:	4682      	mov	sl, r0
 80069ba:	4690      	mov	r8, r2
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	f846 5c04 	str.w	r5, [r6, #-4]
 80069c2:	46b9      	mov	r9, r7
 80069c4:	463c      	mov	r4, r7
 80069c6:	9502      	str	r5, [sp, #8]
 80069c8:	46ab      	mov	fp, r5
 80069ca:	784a      	ldrb	r2, [r1, #1]
 80069cc:	1c4b      	adds	r3, r1, #1
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	b342      	cbz	r2, 8006a24 <__hexnan+0x88>
 80069d2:	4610      	mov	r0, r2
 80069d4:	9105      	str	r1, [sp, #20]
 80069d6:	9204      	str	r2, [sp, #16]
 80069d8:	f7ff fd94 	bl	8006504 <__hexdig_fun>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d151      	bne.n	8006a84 <__hexnan+0xe8>
 80069e0:	9a04      	ldr	r2, [sp, #16]
 80069e2:	9905      	ldr	r1, [sp, #20]
 80069e4:	2a20      	cmp	r2, #32
 80069e6:	d818      	bhi.n	8006a1a <__hexnan+0x7e>
 80069e8:	9b02      	ldr	r3, [sp, #8]
 80069ea:	459b      	cmp	fp, r3
 80069ec:	dd13      	ble.n	8006a16 <__hexnan+0x7a>
 80069ee:	454c      	cmp	r4, r9
 80069f0:	d206      	bcs.n	8006a00 <__hexnan+0x64>
 80069f2:	2d07      	cmp	r5, #7
 80069f4:	dc04      	bgt.n	8006a00 <__hexnan+0x64>
 80069f6:	462a      	mov	r2, r5
 80069f8:	4649      	mov	r1, r9
 80069fa:	4620      	mov	r0, r4
 80069fc:	f7ff ffa8 	bl	8006950 <L_shift>
 8006a00:	4544      	cmp	r4, r8
 8006a02:	d952      	bls.n	8006aaa <__hexnan+0x10e>
 8006a04:	2300      	movs	r3, #0
 8006a06:	f1a4 0904 	sub.w	r9, r4, #4
 8006a0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a0e:	f8cd b008 	str.w	fp, [sp, #8]
 8006a12:	464c      	mov	r4, r9
 8006a14:	461d      	mov	r5, r3
 8006a16:	9903      	ldr	r1, [sp, #12]
 8006a18:	e7d7      	b.n	80069ca <__hexnan+0x2e>
 8006a1a:	2a29      	cmp	r2, #41	@ 0x29
 8006a1c:	d157      	bne.n	8006ace <__hexnan+0x132>
 8006a1e:	3102      	adds	r1, #2
 8006a20:	f8ca 1000 	str.w	r1, [sl]
 8006a24:	f1bb 0f00 	cmp.w	fp, #0
 8006a28:	d051      	beq.n	8006ace <__hexnan+0x132>
 8006a2a:	454c      	cmp	r4, r9
 8006a2c:	d206      	bcs.n	8006a3c <__hexnan+0xa0>
 8006a2e:	2d07      	cmp	r5, #7
 8006a30:	dc04      	bgt.n	8006a3c <__hexnan+0xa0>
 8006a32:	462a      	mov	r2, r5
 8006a34:	4649      	mov	r1, r9
 8006a36:	4620      	mov	r0, r4
 8006a38:	f7ff ff8a 	bl	8006950 <L_shift>
 8006a3c:	4544      	cmp	r4, r8
 8006a3e:	d936      	bls.n	8006aae <__hexnan+0x112>
 8006a40:	f1a8 0204 	sub.w	r2, r8, #4
 8006a44:	4623      	mov	r3, r4
 8006a46:	f853 1b04 	ldr.w	r1, [r3], #4
 8006a4a:	f842 1f04 	str.w	r1, [r2, #4]!
 8006a4e:	429f      	cmp	r7, r3
 8006a50:	d2f9      	bcs.n	8006a46 <__hexnan+0xaa>
 8006a52:	1b3b      	subs	r3, r7, r4
 8006a54:	f023 0303 	bic.w	r3, r3, #3
 8006a58:	3304      	adds	r3, #4
 8006a5a:	3401      	adds	r4, #1
 8006a5c:	3e03      	subs	r6, #3
 8006a5e:	42b4      	cmp	r4, r6
 8006a60:	bf88      	it	hi
 8006a62:	2304      	movhi	r3, #4
 8006a64:	4443      	add	r3, r8
 8006a66:	2200      	movs	r2, #0
 8006a68:	f843 2b04 	str.w	r2, [r3], #4
 8006a6c:	429f      	cmp	r7, r3
 8006a6e:	d2fb      	bcs.n	8006a68 <__hexnan+0xcc>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	b91b      	cbnz	r3, 8006a7c <__hexnan+0xe0>
 8006a74:	4547      	cmp	r7, r8
 8006a76:	d128      	bne.n	8006aca <__hexnan+0x12e>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	2005      	movs	r0, #5
 8006a7e:	b007      	add	sp, #28
 8006a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a84:	3501      	adds	r5, #1
 8006a86:	2d08      	cmp	r5, #8
 8006a88:	f10b 0b01 	add.w	fp, fp, #1
 8006a8c:	dd06      	ble.n	8006a9c <__hexnan+0x100>
 8006a8e:	4544      	cmp	r4, r8
 8006a90:	d9c1      	bls.n	8006a16 <__hexnan+0x7a>
 8006a92:	2300      	movs	r3, #0
 8006a94:	f844 3c04 	str.w	r3, [r4, #-4]
 8006a98:	2501      	movs	r5, #1
 8006a9a:	3c04      	subs	r4, #4
 8006a9c:	6822      	ldr	r2, [r4, #0]
 8006a9e:	f000 000f 	and.w	r0, r0, #15
 8006aa2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006aa6:	6020      	str	r0, [r4, #0]
 8006aa8:	e7b5      	b.n	8006a16 <__hexnan+0x7a>
 8006aaa:	2508      	movs	r5, #8
 8006aac:	e7b3      	b.n	8006a16 <__hexnan+0x7a>
 8006aae:	9b01      	ldr	r3, [sp, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0dd      	beq.n	8006a70 <__hexnan+0xd4>
 8006ab4:	f1c3 0320 	rsb	r3, r3, #32
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	40da      	lsrs	r2, r3
 8006abe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	f846 3c04 	str.w	r3, [r6, #-4]
 8006ac8:	e7d2      	b.n	8006a70 <__hexnan+0xd4>
 8006aca:	3f04      	subs	r7, #4
 8006acc:	e7d0      	b.n	8006a70 <__hexnan+0xd4>
 8006ace:	2004      	movs	r0, #4
 8006ad0:	e7d5      	b.n	8006a7e <__hexnan+0xe2>
	...

08006ad4 <malloc>:
 8006ad4:	4b02      	ldr	r3, [pc, #8]	@ (8006ae0 <malloc+0xc>)
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	f000 b825 	b.w	8006b28 <_malloc_r>
 8006ade:	bf00      	nop
 8006ae0:	20000184 	.word	0x20000184

08006ae4 <sbrk_aligned>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	4e0f      	ldr	r6, [pc, #60]	@ (8006b24 <sbrk_aligned+0x40>)
 8006ae8:	460c      	mov	r4, r1
 8006aea:	6831      	ldr	r1, [r6, #0]
 8006aec:	4605      	mov	r5, r0
 8006aee:	b911      	cbnz	r1, 8006af6 <sbrk_aligned+0x12>
 8006af0:	f001 f934 	bl	8007d5c <_sbrk_r>
 8006af4:	6030      	str	r0, [r6, #0]
 8006af6:	4621      	mov	r1, r4
 8006af8:	4628      	mov	r0, r5
 8006afa:	f001 f92f 	bl	8007d5c <_sbrk_r>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	d103      	bne.n	8006b0a <sbrk_aligned+0x26>
 8006b02:	f04f 34ff 	mov.w	r4, #4294967295
 8006b06:	4620      	mov	r0, r4
 8006b08:	bd70      	pop	{r4, r5, r6, pc}
 8006b0a:	1cc4      	adds	r4, r0, #3
 8006b0c:	f024 0403 	bic.w	r4, r4, #3
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d0f8      	beq.n	8006b06 <sbrk_aligned+0x22>
 8006b14:	1a21      	subs	r1, r4, r0
 8006b16:	4628      	mov	r0, r5
 8006b18:	f001 f920 	bl	8007d5c <_sbrk_r>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d1f2      	bne.n	8006b06 <sbrk_aligned+0x22>
 8006b20:	e7ef      	b.n	8006b02 <sbrk_aligned+0x1e>
 8006b22:	bf00      	nop
 8006b24:	200004d4 	.word	0x200004d4

08006b28 <_malloc_r>:
 8006b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	1ccd      	adds	r5, r1, #3
 8006b2e:	f025 0503 	bic.w	r5, r5, #3
 8006b32:	3508      	adds	r5, #8
 8006b34:	2d0c      	cmp	r5, #12
 8006b36:	bf38      	it	cc
 8006b38:	250c      	movcc	r5, #12
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	db01      	blt.n	8006b44 <_malloc_r+0x1c>
 8006b40:	42a9      	cmp	r1, r5
 8006b42:	d904      	bls.n	8006b4e <_malloc_r+0x26>
 8006b44:	230c      	movs	r3, #12
 8006b46:	6033      	str	r3, [r6, #0]
 8006b48:	2000      	movs	r0, #0
 8006b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c24 <_malloc_r+0xfc>
 8006b52:	f000 f87b 	bl	8006c4c <__malloc_lock>
 8006b56:	f8d8 3000 	ldr.w	r3, [r8]
 8006b5a:	461c      	mov	r4, r3
 8006b5c:	bb44      	cbnz	r4, 8006bb0 <_malloc_r+0x88>
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff ffbf 	bl	8006ae4 <sbrk_aligned>
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	4604      	mov	r4, r0
 8006b6a:	d158      	bne.n	8006c1e <_malloc_r+0xf6>
 8006b6c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b70:	4627      	mov	r7, r4
 8006b72:	2f00      	cmp	r7, #0
 8006b74:	d143      	bne.n	8006bfe <_malloc_r+0xd6>
 8006b76:	2c00      	cmp	r4, #0
 8006b78:	d04b      	beq.n	8006c12 <_malloc_r+0xea>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4630      	mov	r0, r6
 8006b80:	eb04 0903 	add.w	r9, r4, r3
 8006b84:	f001 f8ea 	bl	8007d5c <_sbrk_r>
 8006b88:	4581      	cmp	r9, r0
 8006b8a:	d142      	bne.n	8006c12 <_malloc_r+0xea>
 8006b8c:	6821      	ldr	r1, [r4, #0]
 8006b8e:	1a6d      	subs	r5, r5, r1
 8006b90:	4629      	mov	r1, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff ffa6 	bl	8006ae4 <sbrk_aligned>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d03a      	beq.n	8006c12 <_malloc_r+0xea>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	442b      	add	r3, r5
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	bb62      	cbnz	r2, 8006c04 <_malloc_r+0xdc>
 8006baa:	f8c8 7000 	str.w	r7, [r8]
 8006bae:	e00f      	b.n	8006bd0 <_malloc_r+0xa8>
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	1b52      	subs	r2, r2, r5
 8006bb4:	d420      	bmi.n	8006bf8 <_malloc_r+0xd0>
 8006bb6:	2a0b      	cmp	r2, #11
 8006bb8:	d917      	bls.n	8006bea <_malloc_r+0xc2>
 8006bba:	1961      	adds	r1, r4, r5
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	6025      	str	r5, [r4, #0]
 8006bc0:	bf18      	it	ne
 8006bc2:	6059      	strne	r1, [r3, #4]
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	bf08      	it	eq
 8006bc8:	f8c8 1000 	streq.w	r1, [r8]
 8006bcc:	5162      	str	r2, [r4, r5]
 8006bce:	604b      	str	r3, [r1, #4]
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f841 	bl	8006c58 <__malloc_unlock>
 8006bd6:	f104 000b 	add.w	r0, r4, #11
 8006bda:	1d23      	adds	r3, r4, #4
 8006bdc:	f020 0007 	bic.w	r0, r0, #7
 8006be0:	1ac2      	subs	r2, r0, r3
 8006be2:	bf1c      	itt	ne
 8006be4:	1a1b      	subne	r3, r3, r0
 8006be6:	50a3      	strne	r3, [r4, r2]
 8006be8:	e7af      	b.n	8006b4a <_malloc_r+0x22>
 8006bea:	6862      	ldr	r2, [r4, #4]
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	bf0c      	ite	eq
 8006bf0:	f8c8 2000 	streq.w	r2, [r8]
 8006bf4:	605a      	strne	r2, [r3, #4]
 8006bf6:	e7eb      	b.n	8006bd0 <_malloc_r+0xa8>
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	6864      	ldr	r4, [r4, #4]
 8006bfc:	e7ae      	b.n	8006b5c <_malloc_r+0x34>
 8006bfe:	463c      	mov	r4, r7
 8006c00:	687f      	ldr	r7, [r7, #4]
 8006c02:	e7b6      	b.n	8006b72 <_malloc_r+0x4a>
 8006c04:	461a      	mov	r2, r3
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	d1fb      	bne.n	8006c04 <_malloc_r+0xdc>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6053      	str	r3, [r2, #4]
 8006c10:	e7de      	b.n	8006bd0 <_malloc_r+0xa8>
 8006c12:	230c      	movs	r3, #12
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	4630      	mov	r0, r6
 8006c18:	f000 f81e 	bl	8006c58 <__malloc_unlock>
 8006c1c:	e794      	b.n	8006b48 <_malloc_r+0x20>
 8006c1e:	6005      	str	r5, [r0, #0]
 8006c20:	e7d6      	b.n	8006bd0 <_malloc_r+0xa8>
 8006c22:	bf00      	nop
 8006c24:	200004d8 	.word	0x200004d8

08006c28 <__ascii_mbtowc>:
 8006c28:	b082      	sub	sp, #8
 8006c2a:	b901      	cbnz	r1, 8006c2e <__ascii_mbtowc+0x6>
 8006c2c:	a901      	add	r1, sp, #4
 8006c2e:	b142      	cbz	r2, 8006c42 <__ascii_mbtowc+0x1a>
 8006c30:	b14b      	cbz	r3, 8006c46 <__ascii_mbtowc+0x1e>
 8006c32:	7813      	ldrb	r3, [r2, #0]
 8006c34:	600b      	str	r3, [r1, #0]
 8006c36:	7812      	ldrb	r2, [r2, #0]
 8006c38:	1e10      	subs	r0, r2, #0
 8006c3a:	bf18      	it	ne
 8006c3c:	2001      	movne	r0, #1
 8006c3e:	b002      	add	sp, #8
 8006c40:	4770      	bx	lr
 8006c42:	4610      	mov	r0, r2
 8006c44:	e7fb      	b.n	8006c3e <__ascii_mbtowc+0x16>
 8006c46:	f06f 0001 	mvn.w	r0, #1
 8006c4a:	e7f8      	b.n	8006c3e <__ascii_mbtowc+0x16>

08006c4c <__malloc_lock>:
 8006c4c:	4801      	ldr	r0, [pc, #4]	@ (8006c54 <__malloc_lock+0x8>)
 8006c4e:	f7ff bb84 	b.w	800635a <__retarget_lock_acquire_recursive>
 8006c52:	bf00      	nop
 8006c54:	200004d0 	.word	0x200004d0

08006c58 <__malloc_unlock>:
 8006c58:	4801      	ldr	r0, [pc, #4]	@ (8006c60 <__malloc_unlock+0x8>)
 8006c5a:	f7ff bb7f 	b.w	800635c <__retarget_lock_release_recursive>
 8006c5e:	bf00      	nop
 8006c60:	200004d0 	.word	0x200004d0

08006c64 <_Balloc>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	69c6      	ldr	r6, [r0, #28]
 8006c68:	4604      	mov	r4, r0
 8006c6a:	460d      	mov	r5, r1
 8006c6c:	b976      	cbnz	r6, 8006c8c <_Balloc+0x28>
 8006c6e:	2010      	movs	r0, #16
 8006c70:	f7ff ff30 	bl	8006ad4 <malloc>
 8006c74:	4602      	mov	r2, r0
 8006c76:	61e0      	str	r0, [r4, #28]
 8006c78:	b920      	cbnz	r0, 8006c84 <_Balloc+0x20>
 8006c7a:	4b18      	ldr	r3, [pc, #96]	@ (8006cdc <_Balloc+0x78>)
 8006c7c:	4818      	ldr	r0, [pc, #96]	@ (8006ce0 <_Balloc+0x7c>)
 8006c7e:	216b      	movs	r1, #107	@ 0x6b
 8006c80:	f7ff fb86 	bl	8006390 <__assert_func>
 8006c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c88:	6006      	str	r6, [r0, #0]
 8006c8a:	60c6      	str	r6, [r0, #12]
 8006c8c:	69e6      	ldr	r6, [r4, #28]
 8006c8e:	68f3      	ldr	r3, [r6, #12]
 8006c90:	b183      	cbz	r3, 8006cb4 <_Balloc+0x50>
 8006c92:	69e3      	ldr	r3, [r4, #28]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c9a:	b9b8      	cbnz	r0, 8006ccc <_Balloc+0x68>
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f605 	lsl.w	r6, r1, r5
 8006ca2:	1d72      	adds	r2, r6, #5
 8006ca4:	0092      	lsls	r2, r2, #2
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f001 f86f 	bl	8007d8a <_calloc_r>
 8006cac:	b160      	cbz	r0, 8006cc8 <_Balloc+0x64>
 8006cae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cb2:	e00e      	b.n	8006cd2 <_Balloc+0x6e>
 8006cb4:	2221      	movs	r2, #33	@ 0x21
 8006cb6:	2104      	movs	r1, #4
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f001 f866 	bl	8007d8a <_calloc_r>
 8006cbe:	69e3      	ldr	r3, [r4, #28]
 8006cc0:	60f0      	str	r0, [r6, #12]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e4      	bne.n	8006c92 <_Balloc+0x2e>
 8006cc8:	2000      	movs	r0, #0
 8006cca:	bd70      	pop	{r4, r5, r6, pc}
 8006ccc:	6802      	ldr	r2, [r0, #0]
 8006cce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cd8:	e7f7      	b.n	8006cca <_Balloc+0x66>
 8006cda:	bf00      	nop
 8006cdc:	080083f8 	.word	0x080083f8
 8006ce0:	0800851e 	.word	0x0800851e

08006ce4 <_Bfree>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	69c6      	ldr	r6, [r0, #28]
 8006ce8:	4605      	mov	r5, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	b976      	cbnz	r6, 8006d0c <_Bfree+0x28>
 8006cee:	2010      	movs	r0, #16
 8006cf0:	f7ff fef0 	bl	8006ad4 <malloc>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	61e8      	str	r0, [r5, #28]
 8006cf8:	b920      	cbnz	r0, 8006d04 <_Bfree+0x20>
 8006cfa:	4b09      	ldr	r3, [pc, #36]	@ (8006d20 <_Bfree+0x3c>)
 8006cfc:	4809      	ldr	r0, [pc, #36]	@ (8006d24 <_Bfree+0x40>)
 8006cfe:	218f      	movs	r1, #143	@ 0x8f
 8006d00:	f7ff fb46 	bl	8006390 <__assert_func>
 8006d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d08:	6006      	str	r6, [r0, #0]
 8006d0a:	60c6      	str	r6, [r0, #12]
 8006d0c:	b13c      	cbz	r4, 8006d1e <_Bfree+0x3a>
 8006d0e:	69eb      	ldr	r3, [r5, #28]
 8006d10:	6862      	ldr	r2, [r4, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d18:	6021      	str	r1, [r4, #0]
 8006d1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}
 8006d20:	080083f8 	.word	0x080083f8
 8006d24:	0800851e 	.word	0x0800851e

08006d28 <__multadd>:
 8006d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2c:	690d      	ldr	r5, [r1, #16]
 8006d2e:	4607      	mov	r7, r0
 8006d30:	460c      	mov	r4, r1
 8006d32:	461e      	mov	r6, r3
 8006d34:	f101 0c14 	add.w	ip, r1, #20
 8006d38:	2000      	movs	r0, #0
 8006d3a:	f8dc 3000 	ldr.w	r3, [ip]
 8006d3e:	b299      	uxth	r1, r3
 8006d40:	fb02 6101 	mla	r1, r2, r1, r6
 8006d44:	0c1e      	lsrs	r6, r3, #16
 8006d46:	0c0b      	lsrs	r3, r1, #16
 8006d48:	fb02 3306 	mla	r3, r2, r6, r3
 8006d4c:	b289      	uxth	r1, r1
 8006d4e:	3001      	adds	r0, #1
 8006d50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d54:	4285      	cmp	r5, r0
 8006d56:	f84c 1b04 	str.w	r1, [ip], #4
 8006d5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d5e:	dcec      	bgt.n	8006d3a <__multadd+0x12>
 8006d60:	b30e      	cbz	r6, 8006da6 <__multadd+0x7e>
 8006d62:	68a3      	ldr	r3, [r4, #8]
 8006d64:	42ab      	cmp	r3, r5
 8006d66:	dc19      	bgt.n	8006d9c <__multadd+0x74>
 8006d68:	6861      	ldr	r1, [r4, #4]
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	3101      	adds	r1, #1
 8006d6e:	f7ff ff79 	bl	8006c64 <_Balloc>
 8006d72:	4680      	mov	r8, r0
 8006d74:	b928      	cbnz	r0, 8006d82 <__multadd+0x5a>
 8006d76:	4602      	mov	r2, r0
 8006d78:	4b0c      	ldr	r3, [pc, #48]	@ (8006dac <__multadd+0x84>)
 8006d7a:	480d      	ldr	r0, [pc, #52]	@ (8006db0 <__multadd+0x88>)
 8006d7c:	21ba      	movs	r1, #186	@ 0xba
 8006d7e:	f7ff fb07 	bl	8006390 <__assert_func>
 8006d82:	6922      	ldr	r2, [r4, #16]
 8006d84:	3202      	adds	r2, #2
 8006d86:	f104 010c 	add.w	r1, r4, #12
 8006d8a:	0092      	lsls	r2, r2, #2
 8006d8c:	300c      	adds	r0, #12
 8006d8e:	f7ff fae6 	bl	800635e <memcpy>
 8006d92:	4621      	mov	r1, r4
 8006d94:	4638      	mov	r0, r7
 8006d96:	f7ff ffa5 	bl	8006ce4 <_Bfree>
 8006d9a:	4644      	mov	r4, r8
 8006d9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006da0:	3501      	adds	r5, #1
 8006da2:	615e      	str	r6, [r3, #20]
 8006da4:	6125      	str	r5, [r4, #16]
 8006da6:	4620      	mov	r0, r4
 8006da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dac:	080084ad 	.word	0x080084ad
 8006db0:	0800851e 	.word	0x0800851e

08006db4 <__s2b>:
 8006db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006db8:	460c      	mov	r4, r1
 8006dba:	4615      	mov	r5, r2
 8006dbc:	461f      	mov	r7, r3
 8006dbe:	2209      	movs	r2, #9
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dc8:	2100      	movs	r1, #0
 8006dca:	2201      	movs	r2, #1
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	db09      	blt.n	8006de4 <__s2b+0x30>
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7ff ff47 	bl	8006c64 <_Balloc>
 8006dd6:	b940      	cbnz	r0, 8006dea <__s2b+0x36>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	4b19      	ldr	r3, [pc, #100]	@ (8006e40 <__s2b+0x8c>)
 8006ddc:	4819      	ldr	r0, [pc, #100]	@ (8006e44 <__s2b+0x90>)
 8006dde:	21d3      	movs	r1, #211	@ 0xd3
 8006de0:	f7ff fad6 	bl	8006390 <__assert_func>
 8006de4:	0052      	lsls	r2, r2, #1
 8006de6:	3101      	adds	r1, #1
 8006de8:	e7f0      	b.n	8006dcc <__s2b+0x18>
 8006dea:	9b08      	ldr	r3, [sp, #32]
 8006dec:	6143      	str	r3, [r0, #20]
 8006dee:	2d09      	cmp	r5, #9
 8006df0:	f04f 0301 	mov.w	r3, #1
 8006df4:	6103      	str	r3, [r0, #16]
 8006df6:	dd16      	ble.n	8006e26 <__s2b+0x72>
 8006df8:	f104 0909 	add.w	r9, r4, #9
 8006dfc:	46c8      	mov	r8, r9
 8006dfe:	442c      	add	r4, r5
 8006e00:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006e04:	4601      	mov	r1, r0
 8006e06:	3b30      	subs	r3, #48	@ 0x30
 8006e08:	220a      	movs	r2, #10
 8006e0a:	4630      	mov	r0, r6
 8006e0c:	f7ff ff8c 	bl	8006d28 <__multadd>
 8006e10:	45a0      	cmp	r8, r4
 8006e12:	d1f5      	bne.n	8006e00 <__s2b+0x4c>
 8006e14:	f1a5 0408 	sub.w	r4, r5, #8
 8006e18:	444c      	add	r4, r9
 8006e1a:	1b2d      	subs	r5, r5, r4
 8006e1c:	1963      	adds	r3, r4, r5
 8006e1e:	42bb      	cmp	r3, r7
 8006e20:	db04      	blt.n	8006e2c <__s2b+0x78>
 8006e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e26:	340a      	adds	r4, #10
 8006e28:	2509      	movs	r5, #9
 8006e2a:	e7f6      	b.n	8006e1a <__s2b+0x66>
 8006e2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006e30:	4601      	mov	r1, r0
 8006e32:	3b30      	subs	r3, #48	@ 0x30
 8006e34:	220a      	movs	r2, #10
 8006e36:	4630      	mov	r0, r6
 8006e38:	f7ff ff76 	bl	8006d28 <__multadd>
 8006e3c:	e7ee      	b.n	8006e1c <__s2b+0x68>
 8006e3e:	bf00      	nop
 8006e40:	080084ad 	.word	0x080084ad
 8006e44:	0800851e 	.word	0x0800851e

08006e48 <__hi0bits>:
 8006e48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	bf36      	itet	cc
 8006e50:	0403      	lslcc	r3, r0, #16
 8006e52:	2000      	movcs	r0, #0
 8006e54:	2010      	movcc	r0, #16
 8006e56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e5a:	bf3c      	itt	cc
 8006e5c:	021b      	lslcc	r3, r3, #8
 8006e5e:	3008      	addcc	r0, #8
 8006e60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e64:	bf3c      	itt	cc
 8006e66:	011b      	lslcc	r3, r3, #4
 8006e68:	3004      	addcc	r0, #4
 8006e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e6e:	bf3c      	itt	cc
 8006e70:	009b      	lslcc	r3, r3, #2
 8006e72:	3002      	addcc	r0, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	db05      	blt.n	8006e84 <__hi0bits+0x3c>
 8006e78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e7c:	f100 0001 	add.w	r0, r0, #1
 8006e80:	bf08      	it	eq
 8006e82:	2020      	moveq	r0, #32
 8006e84:	4770      	bx	lr

08006e86 <__lo0bits>:
 8006e86:	6803      	ldr	r3, [r0, #0]
 8006e88:	4602      	mov	r2, r0
 8006e8a:	f013 0007 	ands.w	r0, r3, #7
 8006e8e:	d00b      	beq.n	8006ea8 <__lo0bits+0x22>
 8006e90:	07d9      	lsls	r1, r3, #31
 8006e92:	d421      	bmi.n	8006ed8 <__lo0bits+0x52>
 8006e94:	0798      	lsls	r0, r3, #30
 8006e96:	bf49      	itett	mi
 8006e98:	085b      	lsrmi	r3, r3, #1
 8006e9a:	089b      	lsrpl	r3, r3, #2
 8006e9c:	2001      	movmi	r0, #1
 8006e9e:	6013      	strmi	r3, [r2, #0]
 8006ea0:	bf5c      	itt	pl
 8006ea2:	6013      	strpl	r3, [r2, #0]
 8006ea4:	2002      	movpl	r0, #2
 8006ea6:	4770      	bx	lr
 8006ea8:	b299      	uxth	r1, r3
 8006eaa:	b909      	cbnz	r1, 8006eb0 <__lo0bits+0x2a>
 8006eac:	0c1b      	lsrs	r3, r3, #16
 8006eae:	2010      	movs	r0, #16
 8006eb0:	b2d9      	uxtb	r1, r3
 8006eb2:	b909      	cbnz	r1, 8006eb8 <__lo0bits+0x32>
 8006eb4:	3008      	adds	r0, #8
 8006eb6:	0a1b      	lsrs	r3, r3, #8
 8006eb8:	0719      	lsls	r1, r3, #28
 8006eba:	bf04      	itt	eq
 8006ebc:	091b      	lsreq	r3, r3, #4
 8006ebe:	3004      	addeq	r0, #4
 8006ec0:	0799      	lsls	r1, r3, #30
 8006ec2:	bf04      	itt	eq
 8006ec4:	089b      	lsreq	r3, r3, #2
 8006ec6:	3002      	addeq	r0, #2
 8006ec8:	07d9      	lsls	r1, r3, #31
 8006eca:	d403      	bmi.n	8006ed4 <__lo0bits+0x4e>
 8006ecc:	085b      	lsrs	r3, r3, #1
 8006ece:	f100 0001 	add.w	r0, r0, #1
 8006ed2:	d003      	beq.n	8006edc <__lo0bits+0x56>
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	4770      	bx	lr
 8006ed8:	2000      	movs	r0, #0
 8006eda:	4770      	bx	lr
 8006edc:	2020      	movs	r0, #32
 8006ede:	4770      	bx	lr

08006ee0 <__i2b>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	f7ff febd 	bl	8006c64 <_Balloc>
 8006eea:	4602      	mov	r2, r0
 8006eec:	b928      	cbnz	r0, 8006efa <__i2b+0x1a>
 8006eee:	4b05      	ldr	r3, [pc, #20]	@ (8006f04 <__i2b+0x24>)
 8006ef0:	4805      	ldr	r0, [pc, #20]	@ (8006f08 <__i2b+0x28>)
 8006ef2:	f240 1145 	movw	r1, #325	@ 0x145
 8006ef6:	f7ff fa4b 	bl	8006390 <__assert_func>
 8006efa:	2301      	movs	r3, #1
 8006efc:	6144      	str	r4, [r0, #20]
 8006efe:	6103      	str	r3, [r0, #16]
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	bf00      	nop
 8006f04:	080084ad 	.word	0x080084ad
 8006f08:	0800851e 	.word	0x0800851e

08006f0c <__multiply>:
 8006f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	4614      	mov	r4, r2
 8006f12:	690a      	ldr	r2, [r1, #16]
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	bfa8      	it	ge
 8006f1a:	4623      	movge	r3, r4
 8006f1c:	460f      	mov	r7, r1
 8006f1e:	bfa4      	itt	ge
 8006f20:	460c      	movge	r4, r1
 8006f22:	461f      	movge	r7, r3
 8006f24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	6861      	ldr	r1, [r4, #4]
 8006f30:	eb0a 0609 	add.w	r6, sl, r9
 8006f34:	42b3      	cmp	r3, r6
 8006f36:	b085      	sub	sp, #20
 8006f38:	bfb8      	it	lt
 8006f3a:	3101      	addlt	r1, #1
 8006f3c:	f7ff fe92 	bl	8006c64 <_Balloc>
 8006f40:	b930      	cbnz	r0, 8006f50 <__multiply+0x44>
 8006f42:	4602      	mov	r2, r0
 8006f44:	4b44      	ldr	r3, [pc, #272]	@ (8007058 <__multiply+0x14c>)
 8006f46:	4845      	ldr	r0, [pc, #276]	@ (800705c <__multiply+0x150>)
 8006f48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006f4c:	f7ff fa20 	bl	8006390 <__assert_func>
 8006f50:	f100 0514 	add.w	r5, r0, #20
 8006f54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f58:	462b      	mov	r3, r5
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4543      	cmp	r3, r8
 8006f5e:	d321      	bcc.n	8006fa4 <__multiply+0x98>
 8006f60:	f107 0114 	add.w	r1, r7, #20
 8006f64:	f104 0214 	add.w	r2, r4, #20
 8006f68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006f70:	9302      	str	r3, [sp, #8]
 8006f72:	1b13      	subs	r3, r2, r4
 8006f74:	3b15      	subs	r3, #21
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	f104 0715 	add.w	r7, r4, #21
 8006f80:	42ba      	cmp	r2, r7
 8006f82:	bf38      	it	cc
 8006f84:	2304      	movcc	r3, #4
 8006f86:	9301      	str	r3, [sp, #4]
 8006f88:	9b02      	ldr	r3, [sp, #8]
 8006f8a:	9103      	str	r1, [sp, #12]
 8006f8c:	428b      	cmp	r3, r1
 8006f8e:	d80c      	bhi.n	8006faa <__multiply+0x9e>
 8006f90:	2e00      	cmp	r6, #0
 8006f92:	dd03      	ble.n	8006f9c <__multiply+0x90>
 8006f94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d05b      	beq.n	8007054 <__multiply+0x148>
 8006f9c:	6106      	str	r6, [r0, #16]
 8006f9e:	b005      	add	sp, #20
 8006fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa4:	f843 2b04 	str.w	r2, [r3], #4
 8006fa8:	e7d8      	b.n	8006f5c <__multiply+0x50>
 8006faa:	f8b1 a000 	ldrh.w	sl, [r1]
 8006fae:	f1ba 0f00 	cmp.w	sl, #0
 8006fb2:	d024      	beq.n	8006ffe <__multiply+0xf2>
 8006fb4:	f104 0e14 	add.w	lr, r4, #20
 8006fb8:	46a9      	mov	r9, r5
 8006fba:	f04f 0c00 	mov.w	ip, #0
 8006fbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006fc2:	f8d9 3000 	ldr.w	r3, [r9]
 8006fc6:	fa1f fb87 	uxth.w	fp, r7
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	fb0a 330b 	mla	r3, sl, fp, r3
 8006fd0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006fd4:	f8d9 7000 	ldr.w	r7, [r9]
 8006fd8:	4463      	add	r3, ip
 8006fda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006fde:	fb0a c70b 	mla	r7, sl, fp, ip
 8006fe2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006fec:	4572      	cmp	r2, lr
 8006fee:	f849 3b04 	str.w	r3, [r9], #4
 8006ff2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ff6:	d8e2      	bhi.n	8006fbe <__multiply+0xb2>
 8006ff8:	9b01      	ldr	r3, [sp, #4]
 8006ffa:	f845 c003 	str.w	ip, [r5, r3]
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007004:	3104      	adds	r1, #4
 8007006:	f1b9 0f00 	cmp.w	r9, #0
 800700a:	d021      	beq.n	8007050 <__multiply+0x144>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	f104 0c14 	add.w	ip, r4, #20
 8007012:	46ae      	mov	lr, r5
 8007014:	f04f 0a00 	mov.w	sl, #0
 8007018:	f8bc b000 	ldrh.w	fp, [ip]
 800701c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007020:	fb09 770b 	mla	r7, r9, fp, r7
 8007024:	4457      	add	r7, sl
 8007026:	b29b      	uxth	r3, r3
 8007028:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800702c:	f84e 3b04 	str.w	r3, [lr], #4
 8007030:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007034:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007038:	f8be 3000 	ldrh.w	r3, [lr]
 800703c:	fb09 330a 	mla	r3, r9, sl, r3
 8007040:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007044:	4562      	cmp	r2, ip
 8007046:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800704a:	d8e5      	bhi.n	8007018 <__multiply+0x10c>
 800704c:	9f01      	ldr	r7, [sp, #4]
 800704e:	51eb      	str	r3, [r5, r7]
 8007050:	3504      	adds	r5, #4
 8007052:	e799      	b.n	8006f88 <__multiply+0x7c>
 8007054:	3e01      	subs	r6, #1
 8007056:	e79b      	b.n	8006f90 <__multiply+0x84>
 8007058:	080084ad 	.word	0x080084ad
 800705c:	0800851e 	.word	0x0800851e

08007060 <__pow5mult>:
 8007060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007064:	4615      	mov	r5, r2
 8007066:	f012 0203 	ands.w	r2, r2, #3
 800706a:	4607      	mov	r7, r0
 800706c:	460e      	mov	r6, r1
 800706e:	d007      	beq.n	8007080 <__pow5mult+0x20>
 8007070:	4c25      	ldr	r4, [pc, #148]	@ (8007108 <__pow5mult+0xa8>)
 8007072:	3a01      	subs	r2, #1
 8007074:	2300      	movs	r3, #0
 8007076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800707a:	f7ff fe55 	bl	8006d28 <__multadd>
 800707e:	4606      	mov	r6, r0
 8007080:	10ad      	asrs	r5, r5, #2
 8007082:	d03d      	beq.n	8007100 <__pow5mult+0xa0>
 8007084:	69fc      	ldr	r4, [r7, #28]
 8007086:	b97c      	cbnz	r4, 80070a8 <__pow5mult+0x48>
 8007088:	2010      	movs	r0, #16
 800708a:	f7ff fd23 	bl	8006ad4 <malloc>
 800708e:	4602      	mov	r2, r0
 8007090:	61f8      	str	r0, [r7, #28]
 8007092:	b928      	cbnz	r0, 80070a0 <__pow5mult+0x40>
 8007094:	4b1d      	ldr	r3, [pc, #116]	@ (800710c <__pow5mult+0xac>)
 8007096:	481e      	ldr	r0, [pc, #120]	@ (8007110 <__pow5mult+0xb0>)
 8007098:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800709c:	f7ff f978 	bl	8006390 <__assert_func>
 80070a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070a4:	6004      	str	r4, [r0, #0]
 80070a6:	60c4      	str	r4, [r0, #12]
 80070a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80070ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070b0:	b94c      	cbnz	r4, 80070c6 <__pow5mult+0x66>
 80070b2:	f240 2171 	movw	r1, #625	@ 0x271
 80070b6:	4638      	mov	r0, r7
 80070b8:	f7ff ff12 	bl	8006ee0 <__i2b>
 80070bc:	2300      	movs	r3, #0
 80070be:	f8c8 0008 	str.w	r0, [r8, #8]
 80070c2:	4604      	mov	r4, r0
 80070c4:	6003      	str	r3, [r0, #0]
 80070c6:	f04f 0900 	mov.w	r9, #0
 80070ca:	07eb      	lsls	r3, r5, #31
 80070cc:	d50a      	bpl.n	80070e4 <__pow5mult+0x84>
 80070ce:	4631      	mov	r1, r6
 80070d0:	4622      	mov	r2, r4
 80070d2:	4638      	mov	r0, r7
 80070d4:	f7ff ff1a 	bl	8006f0c <__multiply>
 80070d8:	4631      	mov	r1, r6
 80070da:	4680      	mov	r8, r0
 80070dc:	4638      	mov	r0, r7
 80070de:	f7ff fe01 	bl	8006ce4 <_Bfree>
 80070e2:	4646      	mov	r6, r8
 80070e4:	106d      	asrs	r5, r5, #1
 80070e6:	d00b      	beq.n	8007100 <__pow5mult+0xa0>
 80070e8:	6820      	ldr	r0, [r4, #0]
 80070ea:	b938      	cbnz	r0, 80070fc <__pow5mult+0x9c>
 80070ec:	4622      	mov	r2, r4
 80070ee:	4621      	mov	r1, r4
 80070f0:	4638      	mov	r0, r7
 80070f2:	f7ff ff0b 	bl	8006f0c <__multiply>
 80070f6:	6020      	str	r0, [r4, #0]
 80070f8:	f8c0 9000 	str.w	r9, [r0]
 80070fc:	4604      	mov	r4, r0
 80070fe:	e7e4      	b.n	80070ca <__pow5mult+0x6a>
 8007100:	4630      	mov	r0, r6
 8007102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007106:	bf00      	nop
 8007108:	08008578 	.word	0x08008578
 800710c:	080083f8 	.word	0x080083f8
 8007110:	0800851e 	.word	0x0800851e

08007114 <__lshift>:
 8007114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007118:	460c      	mov	r4, r1
 800711a:	6849      	ldr	r1, [r1, #4]
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007122:	68a3      	ldr	r3, [r4, #8]
 8007124:	4607      	mov	r7, r0
 8007126:	4691      	mov	r9, r2
 8007128:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800712c:	f108 0601 	add.w	r6, r8, #1
 8007130:	42b3      	cmp	r3, r6
 8007132:	db0b      	blt.n	800714c <__lshift+0x38>
 8007134:	4638      	mov	r0, r7
 8007136:	f7ff fd95 	bl	8006c64 <_Balloc>
 800713a:	4605      	mov	r5, r0
 800713c:	b948      	cbnz	r0, 8007152 <__lshift+0x3e>
 800713e:	4602      	mov	r2, r0
 8007140:	4b28      	ldr	r3, [pc, #160]	@ (80071e4 <__lshift+0xd0>)
 8007142:	4829      	ldr	r0, [pc, #164]	@ (80071e8 <__lshift+0xd4>)
 8007144:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007148:	f7ff f922 	bl	8006390 <__assert_func>
 800714c:	3101      	adds	r1, #1
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	e7ee      	b.n	8007130 <__lshift+0x1c>
 8007152:	2300      	movs	r3, #0
 8007154:	f100 0114 	add.w	r1, r0, #20
 8007158:	f100 0210 	add.w	r2, r0, #16
 800715c:	4618      	mov	r0, r3
 800715e:	4553      	cmp	r3, sl
 8007160:	db33      	blt.n	80071ca <__lshift+0xb6>
 8007162:	6920      	ldr	r0, [r4, #16]
 8007164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007168:	f104 0314 	add.w	r3, r4, #20
 800716c:	f019 091f 	ands.w	r9, r9, #31
 8007170:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007174:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007178:	d02b      	beq.n	80071d2 <__lshift+0xbe>
 800717a:	f1c9 0e20 	rsb	lr, r9, #32
 800717e:	468a      	mov	sl, r1
 8007180:	2200      	movs	r2, #0
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	fa00 f009 	lsl.w	r0, r0, r9
 8007188:	4310      	orrs	r0, r2
 800718a:	f84a 0b04 	str.w	r0, [sl], #4
 800718e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007192:	459c      	cmp	ip, r3
 8007194:	fa22 f20e 	lsr.w	r2, r2, lr
 8007198:	d8f3      	bhi.n	8007182 <__lshift+0x6e>
 800719a:	ebac 0304 	sub.w	r3, ip, r4
 800719e:	3b15      	subs	r3, #21
 80071a0:	f023 0303 	bic.w	r3, r3, #3
 80071a4:	3304      	adds	r3, #4
 80071a6:	f104 0015 	add.w	r0, r4, #21
 80071aa:	4584      	cmp	ip, r0
 80071ac:	bf38      	it	cc
 80071ae:	2304      	movcc	r3, #4
 80071b0:	50ca      	str	r2, [r1, r3]
 80071b2:	b10a      	cbz	r2, 80071b8 <__lshift+0xa4>
 80071b4:	f108 0602 	add.w	r6, r8, #2
 80071b8:	3e01      	subs	r6, #1
 80071ba:	4638      	mov	r0, r7
 80071bc:	612e      	str	r6, [r5, #16]
 80071be:	4621      	mov	r1, r4
 80071c0:	f7ff fd90 	bl	8006ce4 <_Bfree>
 80071c4:	4628      	mov	r0, r5
 80071c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80071ce:	3301      	adds	r3, #1
 80071d0:	e7c5      	b.n	800715e <__lshift+0x4a>
 80071d2:	3904      	subs	r1, #4
 80071d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80071dc:	459c      	cmp	ip, r3
 80071de:	d8f9      	bhi.n	80071d4 <__lshift+0xc0>
 80071e0:	e7ea      	b.n	80071b8 <__lshift+0xa4>
 80071e2:	bf00      	nop
 80071e4:	080084ad 	.word	0x080084ad
 80071e8:	0800851e 	.word	0x0800851e

080071ec <__mcmp>:
 80071ec:	690a      	ldr	r2, [r1, #16]
 80071ee:	4603      	mov	r3, r0
 80071f0:	6900      	ldr	r0, [r0, #16]
 80071f2:	1a80      	subs	r0, r0, r2
 80071f4:	b530      	push	{r4, r5, lr}
 80071f6:	d10e      	bne.n	8007216 <__mcmp+0x2a>
 80071f8:	3314      	adds	r3, #20
 80071fa:	3114      	adds	r1, #20
 80071fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007200:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007204:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007208:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800720c:	4295      	cmp	r5, r2
 800720e:	d003      	beq.n	8007218 <__mcmp+0x2c>
 8007210:	d205      	bcs.n	800721e <__mcmp+0x32>
 8007212:	f04f 30ff 	mov.w	r0, #4294967295
 8007216:	bd30      	pop	{r4, r5, pc}
 8007218:	42a3      	cmp	r3, r4
 800721a:	d3f3      	bcc.n	8007204 <__mcmp+0x18>
 800721c:	e7fb      	b.n	8007216 <__mcmp+0x2a>
 800721e:	2001      	movs	r0, #1
 8007220:	e7f9      	b.n	8007216 <__mcmp+0x2a>
	...

08007224 <__mdiff>:
 8007224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	4689      	mov	r9, r1
 800722a:	4606      	mov	r6, r0
 800722c:	4611      	mov	r1, r2
 800722e:	4648      	mov	r0, r9
 8007230:	4614      	mov	r4, r2
 8007232:	f7ff ffdb 	bl	80071ec <__mcmp>
 8007236:	1e05      	subs	r5, r0, #0
 8007238:	d112      	bne.n	8007260 <__mdiff+0x3c>
 800723a:	4629      	mov	r1, r5
 800723c:	4630      	mov	r0, r6
 800723e:	f7ff fd11 	bl	8006c64 <_Balloc>
 8007242:	4602      	mov	r2, r0
 8007244:	b928      	cbnz	r0, 8007252 <__mdiff+0x2e>
 8007246:	4b3f      	ldr	r3, [pc, #252]	@ (8007344 <__mdiff+0x120>)
 8007248:	f240 2137 	movw	r1, #567	@ 0x237
 800724c:	483e      	ldr	r0, [pc, #248]	@ (8007348 <__mdiff+0x124>)
 800724e:	f7ff f89f 	bl	8006390 <__assert_func>
 8007252:	2301      	movs	r3, #1
 8007254:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007258:	4610      	mov	r0, r2
 800725a:	b003      	add	sp, #12
 800725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007260:	bfbc      	itt	lt
 8007262:	464b      	movlt	r3, r9
 8007264:	46a1      	movlt	r9, r4
 8007266:	4630      	mov	r0, r6
 8007268:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800726c:	bfba      	itte	lt
 800726e:	461c      	movlt	r4, r3
 8007270:	2501      	movlt	r5, #1
 8007272:	2500      	movge	r5, #0
 8007274:	f7ff fcf6 	bl	8006c64 <_Balloc>
 8007278:	4602      	mov	r2, r0
 800727a:	b918      	cbnz	r0, 8007284 <__mdiff+0x60>
 800727c:	4b31      	ldr	r3, [pc, #196]	@ (8007344 <__mdiff+0x120>)
 800727e:	f240 2145 	movw	r1, #581	@ 0x245
 8007282:	e7e3      	b.n	800724c <__mdiff+0x28>
 8007284:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007288:	6926      	ldr	r6, [r4, #16]
 800728a:	60c5      	str	r5, [r0, #12]
 800728c:	f109 0310 	add.w	r3, r9, #16
 8007290:	f109 0514 	add.w	r5, r9, #20
 8007294:	f104 0e14 	add.w	lr, r4, #20
 8007298:	f100 0b14 	add.w	fp, r0, #20
 800729c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80072a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	46d9      	mov	r9, fp
 80072a8:	f04f 0c00 	mov.w	ip, #0
 80072ac:	9b01      	ldr	r3, [sp, #4]
 80072ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80072b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	fa1f f38a 	uxth.w	r3, sl
 80072bc:	4619      	mov	r1, r3
 80072be:	b283      	uxth	r3, r0
 80072c0:	1acb      	subs	r3, r1, r3
 80072c2:	0c00      	lsrs	r0, r0, #16
 80072c4:	4463      	add	r3, ip
 80072c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80072ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80072d4:	4576      	cmp	r6, lr
 80072d6:	f849 3b04 	str.w	r3, [r9], #4
 80072da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072de:	d8e5      	bhi.n	80072ac <__mdiff+0x88>
 80072e0:	1b33      	subs	r3, r6, r4
 80072e2:	3b15      	subs	r3, #21
 80072e4:	f023 0303 	bic.w	r3, r3, #3
 80072e8:	3415      	adds	r4, #21
 80072ea:	3304      	adds	r3, #4
 80072ec:	42a6      	cmp	r6, r4
 80072ee:	bf38      	it	cc
 80072f0:	2304      	movcc	r3, #4
 80072f2:	441d      	add	r5, r3
 80072f4:	445b      	add	r3, fp
 80072f6:	461e      	mov	r6, r3
 80072f8:	462c      	mov	r4, r5
 80072fa:	4544      	cmp	r4, r8
 80072fc:	d30e      	bcc.n	800731c <__mdiff+0xf8>
 80072fe:	f108 0103 	add.w	r1, r8, #3
 8007302:	1b49      	subs	r1, r1, r5
 8007304:	f021 0103 	bic.w	r1, r1, #3
 8007308:	3d03      	subs	r5, #3
 800730a:	45a8      	cmp	r8, r5
 800730c:	bf38      	it	cc
 800730e:	2100      	movcc	r1, #0
 8007310:	440b      	add	r3, r1
 8007312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007316:	b191      	cbz	r1, 800733e <__mdiff+0x11a>
 8007318:	6117      	str	r7, [r2, #16]
 800731a:	e79d      	b.n	8007258 <__mdiff+0x34>
 800731c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007320:	46e6      	mov	lr, ip
 8007322:	0c08      	lsrs	r0, r1, #16
 8007324:	fa1c fc81 	uxtah	ip, ip, r1
 8007328:	4471      	add	r1, lr
 800732a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800732e:	b289      	uxth	r1, r1
 8007330:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007334:	f846 1b04 	str.w	r1, [r6], #4
 8007338:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800733c:	e7dd      	b.n	80072fa <__mdiff+0xd6>
 800733e:	3f01      	subs	r7, #1
 8007340:	e7e7      	b.n	8007312 <__mdiff+0xee>
 8007342:	bf00      	nop
 8007344:	080084ad 	.word	0x080084ad
 8007348:	0800851e 	.word	0x0800851e

0800734c <__ulp>:
 800734c:	b082      	sub	sp, #8
 800734e:	ed8d 0b00 	vstr	d0, [sp]
 8007352:	9a01      	ldr	r2, [sp, #4]
 8007354:	4b0f      	ldr	r3, [pc, #60]	@ (8007394 <__ulp+0x48>)
 8007356:	4013      	ands	r3, r2
 8007358:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800735c:	2b00      	cmp	r3, #0
 800735e:	dc08      	bgt.n	8007372 <__ulp+0x26>
 8007360:	425b      	negs	r3, r3
 8007362:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007366:	ea4f 5223 	mov.w	r2, r3, asr #20
 800736a:	da04      	bge.n	8007376 <__ulp+0x2a>
 800736c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007370:	4113      	asrs	r3, r2
 8007372:	2200      	movs	r2, #0
 8007374:	e008      	b.n	8007388 <__ulp+0x3c>
 8007376:	f1a2 0314 	sub.w	r3, r2, #20
 800737a:	2b1e      	cmp	r3, #30
 800737c:	bfda      	itte	le
 800737e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007382:	40da      	lsrle	r2, r3
 8007384:	2201      	movgt	r2, #1
 8007386:	2300      	movs	r3, #0
 8007388:	4619      	mov	r1, r3
 800738a:	4610      	mov	r0, r2
 800738c:	ec41 0b10 	vmov	d0, r0, r1
 8007390:	b002      	add	sp, #8
 8007392:	4770      	bx	lr
 8007394:	7ff00000 	.word	0x7ff00000

08007398 <__b2d>:
 8007398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739c:	6906      	ldr	r6, [r0, #16]
 800739e:	f100 0814 	add.w	r8, r0, #20
 80073a2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80073a6:	1f37      	subs	r7, r6, #4
 80073a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7ff fd4b 	bl	8006e48 <__hi0bits>
 80073b2:	f1c0 0320 	rsb	r3, r0, #32
 80073b6:	280a      	cmp	r0, #10
 80073b8:	600b      	str	r3, [r1, #0]
 80073ba:	491b      	ldr	r1, [pc, #108]	@ (8007428 <__b2d+0x90>)
 80073bc:	dc15      	bgt.n	80073ea <__b2d+0x52>
 80073be:	f1c0 0c0b 	rsb	ip, r0, #11
 80073c2:	fa22 f30c 	lsr.w	r3, r2, ip
 80073c6:	45b8      	cmp	r8, r7
 80073c8:	ea43 0501 	orr.w	r5, r3, r1
 80073cc:	bf34      	ite	cc
 80073ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80073d2:	2300      	movcs	r3, #0
 80073d4:	3015      	adds	r0, #21
 80073d6:	fa02 f000 	lsl.w	r0, r2, r0
 80073da:	fa23 f30c 	lsr.w	r3, r3, ip
 80073de:	4303      	orrs	r3, r0
 80073e0:	461c      	mov	r4, r3
 80073e2:	ec45 4b10 	vmov	d0, r4, r5
 80073e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ea:	45b8      	cmp	r8, r7
 80073ec:	bf3a      	itte	cc
 80073ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80073f2:	f1a6 0708 	subcc.w	r7, r6, #8
 80073f6:	2300      	movcs	r3, #0
 80073f8:	380b      	subs	r0, #11
 80073fa:	d012      	beq.n	8007422 <__b2d+0x8a>
 80073fc:	f1c0 0120 	rsb	r1, r0, #32
 8007400:	fa23 f401 	lsr.w	r4, r3, r1
 8007404:	4082      	lsls	r2, r0
 8007406:	4322      	orrs	r2, r4
 8007408:	4547      	cmp	r7, r8
 800740a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800740e:	bf8c      	ite	hi
 8007410:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007414:	2200      	movls	r2, #0
 8007416:	4083      	lsls	r3, r0
 8007418:	40ca      	lsrs	r2, r1
 800741a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800741e:	4313      	orrs	r3, r2
 8007420:	e7de      	b.n	80073e0 <__b2d+0x48>
 8007422:	ea42 0501 	orr.w	r5, r2, r1
 8007426:	e7db      	b.n	80073e0 <__b2d+0x48>
 8007428:	3ff00000 	.word	0x3ff00000

0800742c <__d2b>:
 800742c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007430:	460f      	mov	r7, r1
 8007432:	2101      	movs	r1, #1
 8007434:	ec59 8b10 	vmov	r8, r9, d0
 8007438:	4616      	mov	r6, r2
 800743a:	f7ff fc13 	bl	8006c64 <_Balloc>
 800743e:	4604      	mov	r4, r0
 8007440:	b930      	cbnz	r0, 8007450 <__d2b+0x24>
 8007442:	4602      	mov	r2, r0
 8007444:	4b23      	ldr	r3, [pc, #140]	@ (80074d4 <__d2b+0xa8>)
 8007446:	4824      	ldr	r0, [pc, #144]	@ (80074d8 <__d2b+0xac>)
 8007448:	f240 310f 	movw	r1, #783	@ 0x30f
 800744c:	f7fe ffa0 	bl	8006390 <__assert_func>
 8007450:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007454:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007458:	b10d      	cbz	r5, 800745e <__d2b+0x32>
 800745a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	f1b8 0300 	subs.w	r3, r8, #0
 8007464:	d023      	beq.n	80074ae <__d2b+0x82>
 8007466:	4668      	mov	r0, sp
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	f7ff fd0c 	bl	8006e86 <__lo0bits>
 800746e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007472:	b1d0      	cbz	r0, 80074aa <__d2b+0x7e>
 8007474:	f1c0 0320 	rsb	r3, r0, #32
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	430b      	orrs	r3, r1
 800747e:	40c2      	lsrs	r2, r0
 8007480:	6163      	str	r3, [r4, #20]
 8007482:	9201      	str	r2, [sp, #4]
 8007484:	9b01      	ldr	r3, [sp, #4]
 8007486:	61a3      	str	r3, [r4, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	bf0c      	ite	eq
 800748c:	2201      	moveq	r2, #1
 800748e:	2202      	movne	r2, #2
 8007490:	6122      	str	r2, [r4, #16]
 8007492:	b1a5      	cbz	r5, 80074be <__d2b+0x92>
 8007494:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007498:	4405      	add	r5, r0
 800749a:	603d      	str	r5, [r7, #0]
 800749c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80074a0:	6030      	str	r0, [r6, #0]
 80074a2:	4620      	mov	r0, r4
 80074a4:	b003      	add	sp, #12
 80074a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074aa:	6161      	str	r1, [r4, #20]
 80074ac:	e7ea      	b.n	8007484 <__d2b+0x58>
 80074ae:	a801      	add	r0, sp, #4
 80074b0:	f7ff fce9 	bl	8006e86 <__lo0bits>
 80074b4:	9b01      	ldr	r3, [sp, #4]
 80074b6:	6163      	str	r3, [r4, #20]
 80074b8:	3020      	adds	r0, #32
 80074ba:	2201      	movs	r2, #1
 80074bc:	e7e8      	b.n	8007490 <__d2b+0x64>
 80074be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80074c6:	6038      	str	r0, [r7, #0]
 80074c8:	6918      	ldr	r0, [r3, #16]
 80074ca:	f7ff fcbd 	bl	8006e48 <__hi0bits>
 80074ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074d2:	e7e5      	b.n	80074a0 <__d2b+0x74>
 80074d4:	080084ad 	.word	0x080084ad
 80074d8:	0800851e 	.word	0x0800851e

080074dc <__ratio>:
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	b085      	sub	sp, #20
 80074e2:	e9cd 1000 	strd	r1, r0, [sp]
 80074e6:	a902      	add	r1, sp, #8
 80074e8:	f7ff ff56 	bl	8007398 <__b2d>
 80074ec:	9800      	ldr	r0, [sp, #0]
 80074ee:	a903      	add	r1, sp, #12
 80074f0:	ec55 4b10 	vmov	r4, r5, d0
 80074f4:	f7ff ff50 	bl	8007398 <__b2d>
 80074f8:	9b01      	ldr	r3, [sp, #4]
 80074fa:	6919      	ldr	r1, [r3, #16]
 80074fc:	9b00      	ldr	r3, [sp, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	1ac9      	subs	r1, r1, r3
 8007502:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	ec5b ab10 	vmov	sl, fp, d0
 800750c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007510:	2b00      	cmp	r3, #0
 8007512:	bfce      	itee	gt
 8007514:	462a      	movgt	r2, r5
 8007516:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800751a:	465a      	movle	r2, fp
 800751c:	462f      	mov	r7, r5
 800751e:	46d9      	mov	r9, fp
 8007520:	bfcc      	ite	gt
 8007522:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007526:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800752a:	464b      	mov	r3, r9
 800752c:	4652      	mov	r2, sl
 800752e:	4620      	mov	r0, r4
 8007530:	4639      	mov	r1, r7
 8007532:	f7f9 f98b 	bl	800084c <__aeabi_ddiv>
 8007536:	ec41 0b10 	vmov	d0, r0, r1
 800753a:	b005      	add	sp, #20
 800753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007540 <__copybits>:
 8007540:	3901      	subs	r1, #1
 8007542:	b570      	push	{r4, r5, r6, lr}
 8007544:	1149      	asrs	r1, r1, #5
 8007546:	6914      	ldr	r4, [r2, #16]
 8007548:	3101      	adds	r1, #1
 800754a:	f102 0314 	add.w	r3, r2, #20
 800754e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007552:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007556:	1f05      	subs	r5, r0, #4
 8007558:	42a3      	cmp	r3, r4
 800755a:	d30c      	bcc.n	8007576 <__copybits+0x36>
 800755c:	1aa3      	subs	r3, r4, r2
 800755e:	3b11      	subs	r3, #17
 8007560:	f023 0303 	bic.w	r3, r3, #3
 8007564:	3211      	adds	r2, #17
 8007566:	42a2      	cmp	r2, r4
 8007568:	bf88      	it	hi
 800756a:	2300      	movhi	r3, #0
 800756c:	4418      	add	r0, r3
 800756e:	2300      	movs	r3, #0
 8007570:	4288      	cmp	r0, r1
 8007572:	d305      	bcc.n	8007580 <__copybits+0x40>
 8007574:	bd70      	pop	{r4, r5, r6, pc}
 8007576:	f853 6b04 	ldr.w	r6, [r3], #4
 800757a:	f845 6f04 	str.w	r6, [r5, #4]!
 800757e:	e7eb      	b.n	8007558 <__copybits+0x18>
 8007580:	f840 3b04 	str.w	r3, [r0], #4
 8007584:	e7f4      	b.n	8007570 <__copybits+0x30>

08007586 <__any_on>:
 8007586:	f100 0214 	add.w	r2, r0, #20
 800758a:	6900      	ldr	r0, [r0, #16]
 800758c:	114b      	asrs	r3, r1, #5
 800758e:	4298      	cmp	r0, r3
 8007590:	b510      	push	{r4, lr}
 8007592:	db11      	blt.n	80075b8 <__any_on+0x32>
 8007594:	dd0a      	ble.n	80075ac <__any_on+0x26>
 8007596:	f011 011f 	ands.w	r1, r1, #31
 800759a:	d007      	beq.n	80075ac <__any_on+0x26>
 800759c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80075a0:	fa24 f001 	lsr.w	r0, r4, r1
 80075a4:	fa00 f101 	lsl.w	r1, r0, r1
 80075a8:	428c      	cmp	r4, r1
 80075aa:	d10b      	bne.n	80075c4 <__any_on+0x3e>
 80075ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d803      	bhi.n	80075bc <__any_on+0x36>
 80075b4:	2000      	movs	r0, #0
 80075b6:	bd10      	pop	{r4, pc}
 80075b8:	4603      	mov	r3, r0
 80075ba:	e7f7      	b.n	80075ac <__any_on+0x26>
 80075bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075c0:	2900      	cmp	r1, #0
 80075c2:	d0f5      	beq.n	80075b0 <__any_on+0x2a>
 80075c4:	2001      	movs	r0, #1
 80075c6:	e7f6      	b.n	80075b6 <__any_on+0x30>

080075c8 <__ascii_wctomb>:
 80075c8:	4603      	mov	r3, r0
 80075ca:	4608      	mov	r0, r1
 80075cc:	b141      	cbz	r1, 80075e0 <__ascii_wctomb+0x18>
 80075ce:	2aff      	cmp	r2, #255	@ 0xff
 80075d0:	d904      	bls.n	80075dc <__ascii_wctomb+0x14>
 80075d2:	228a      	movs	r2, #138	@ 0x8a
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	f04f 30ff 	mov.w	r0, #4294967295
 80075da:	4770      	bx	lr
 80075dc:	700a      	strb	r2, [r1, #0]
 80075de:	2001      	movs	r0, #1
 80075e0:	4770      	bx	lr

080075e2 <__ssputs_r>:
 80075e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e6:	688e      	ldr	r6, [r1, #8]
 80075e8:	461f      	mov	r7, r3
 80075ea:	42be      	cmp	r6, r7
 80075ec:	680b      	ldr	r3, [r1, #0]
 80075ee:	4682      	mov	sl, r0
 80075f0:	460c      	mov	r4, r1
 80075f2:	4690      	mov	r8, r2
 80075f4:	d82d      	bhi.n	8007652 <__ssputs_r+0x70>
 80075f6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075fa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075fe:	d026      	beq.n	800764e <__ssputs_r+0x6c>
 8007600:	6965      	ldr	r5, [r4, #20]
 8007602:	6909      	ldr	r1, [r1, #16]
 8007604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007608:	eba3 0901 	sub.w	r9, r3, r1
 800760c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007610:	1c7b      	adds	r3, r7, #1
 8007612:	444b      	add	r3, r9
 8007614:	106d      	asrs	r5, r5, #1
 8007616:	429d      	cmp	r5, r3
 8007618:	bf38      	it	cc
 800761a:	461d      	movcc	r5, r3
 800761c:	0553      	lsls	r3, r2, #21
 800761e:	d527      	bpl.n	8007670 <__ssputs_r+0x8e>
 8007620:	4629      	mov	r1, r5
 8007622:	f7ff fa81 	bl	8006b28 <_malloc_r>
 8007626:	4606      	mov	r6, r0
 8007628:	b360      	cbz	r0, 8007684 <__ssputs_r+0xa2>
 800762a:	6921      	ldr	r1, [r4, #16]
 800762c:	464a      	mov	r2, r9
 800762e:	f7fe fe96 	bl	800635e <memcpy>
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	6126      	str	r6, [r4, #16]
 8007640:	6165      	str	r5, [r4, #20]
 8007642:	444e      	add	r6, r9
 8007644:	eba5 0509 	sub.w	r5, r5, r9
 8007648:	6026      	str	r6, [r4, #0]
 800764a:	60a5      	str	r5, [r4, #8]
 800764c:	463e      	mov	r6, r7
 800764e:	42be      	cmp	r6, r7
 8007650:	d900      	bls.n	8007654 <__ssputs_r+0x72>
 8007652:	463e      	mov	r6, r7
 8007654:	6820      	ldr	r0, [r4, #0]
 8007656:	4632      	mov	r2, r6
 8007658:	4641      	mov	r1, r8
 800765a:	f000 fb65 	bl	8007d28 <memmove>
 800765e:	68a3      	ldr	r3, [r4, #8]
 8007660:	1b9b      	subs	r3, r3, r6
 8007662:	60a3      	str	r3, [r4, #8]
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	4433      	add	r3, r6
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	2000      	movs	r0, #0
 800766c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007670:	462a      	mov	r2, r5
 8007672:	f000 fb9e 	bl	8007db2 <_realloc_r>
 8007676:	4606      	mov	r6, r0
 8007678:	2800      	cmp	r0, #0
 800767a:	d1e0      	bne.n	800763e <__ssputs_r+0x5c>
 800767c:	6921      	ldr	r1, [r4, #16]
 800767e:	4650      	mov	r0, sl
 8007680:	f7fe fea4 	bl	80063cc <_free_r>
 8007684:	230c      	movs	r3, #12
 8007686:	f8ca 3000 	str.w	r3, [sl]
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	f04f 30ff 	mov.w	r0, #4294967295
 8007696:	e7e9      	b.n	800766c <__ssputs_r+0x8a>

08007698 <_svfiprintf_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	4698      	mov	r8, r3
 800769e:	898b      	ldrh	r3, [r1, #12]
 80076a0:	061b      	lsls	r3, r3, #24
 80076a2:	b09d      	sub	sp, #116	@ 0x74
 80076a4:	4607      	mov	r7, r0
 80076a6:	460d      	mov	r5, r1
 80076a8:	4614      	mov	r4, r2
 80076aa:	d510      	bpl.n	80076ce <_svfiprintf_r+0x36>
 80076ac:	690b      	ldr	r3, [r1, #16]
 80076ae:	b973      	cbnz	r3, 80076ce <_svfiprintf_r+0x36>
 80076b0:	2140      	movs	r1, #64	@ 0x40
 80076b2:	f7ff fa39 	bl	8006b28 <_malloc_r>
 80076b6:	6028      	str	r0, [r5, #0]
 80076b8:	6128      	str	r0, [r5, #16]
 80076ba:	b930      	cbnz	r0, 80076ca <_svfiprintf_r+0x32>
 80076bc:	230c      	movs	r3, #12
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	f04f 30ff 	mov.w	r0, #4294967295
 80076c4:	b01d      	add	sp, #116	@ 0x74
 80076c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ca:	2340      	movs	r3, #64	@ 0x40
 80076cc:	616b      	str	r3, [r5, #20]
 80076ce:	2300      	movs	r3, #0
 80076d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80076d2:	2320      	movs	r3, #32
 80076d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80076dc:	2330      	movs	r3, #48	@ 0x30
 80076de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800787c <_svfiprintf_r+0x1e4>
 80076e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076e6:	f04f 0901 	mov.w	r9, #1
 80076ea:	4623      	mov	r3, r4
 80076ec:	469a      	mov	sl, r3
 80076ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076f2:	b10a      	cbz	r2, 80076f8 <_svfiprintf_r+0x60>
 80076f4:	2a25      	cmp	r2, #37	@ 0x25
 80076f6:	d1f9      	bne.n	80076ec <_svfiprintf_r+0x54>
 80076f8:	ebba 0b04 	subs.w	fp, sl, r4
 80076fc:	d00b      	beq.n	8007716 <_svfiprintf_r+0x7e>
 80076fe:	465b      	mov	r3, fp
 8007700:	4622      	mov	r2, r4
 8007702:	4629      	mov	r1, r5
 8007704:	4638      	mov	r0, r7
 8007706:	f7ff ff6c 	bl	80075e2 <__ssputs_r>
 800770a:	3001      	adds	r0, #1
 800770c:	f000 80a7 	beq.w	800785e <_svfiprintf_r+0x1c6>
 8007710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007712:	445a      	add	r2, fp
 8007714:	9209      	str	r2, [sp, #36]	@ 0x24
 8007716:	f89a 3000 	ldrb.w	r3, [sl]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 809f 	beq.w	800785e <_svfiprintf_r+0x1c6>
 8007720:	2300      	movs	r3, #0
 8007722:	f04f 32ff 	mov.w	r2, #4294967295
 8007726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800772a:	f10a 0a01 	add.w	sl, sl, #1
 800772e:	9304      	str	r3, [sp, #16]
 8007730:	9307      	str	r3, [sp, #28]
 8007732:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007736:	931a      	str	r3, [sp, #104]	@ 0x68
 8007738:	4654      	mov	r4, sl
 800773a:	2205      	movs	r2, #5
 800773c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007740:	484e      	ldr	r0, [pc, #312]	@ (800787c <_svfiprintf_r+0x1e4>)
 8007742:	f7f8 fd4d 	bl	80001e0 <memchr>
 8007746:	9a04      	ldr	r2, [sp, #16]
 8007748:	b9d8      	cbnz	r0, 8007782 <_svfiprintf_r+0xea>
 800774a:	06d0      	lsls	r0, r2, #27
 800774c:	bf44      	itt	mi
 800774e:	2320      	movmi	r3, #32
 8007750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007754:	0711      	lsls	r1, r2, #28
 8007756:	bf44      	itt	mi
 8007758:	232b      	movmi	r3, #43	@ 0x2b
 800775a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800775e:	f89a 3000 	ldrb.w	r3, [sl]
 8007762:	2b2a      	cmp	r3, #42	@ 0x2a
 8007764:	d015      	beq.n	8007792 <_svfiprintf_r+0xfa>
 8007766:	9a07      	ldr	r2, [sp, #28]
 8007768:	4654      	mov	r4, sl
 800776a:	2000      	movs	r0, #0
 800776c:	f04f 0c0a 	mov.w	ip, #10
 8007770:	4621      	mov	r1, r4
 8007772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007776:	3b30      	subs	r3, #48	@ 0x30
 8007778:	2b09      	cmp	r3, #9
 800777a:	d94b      	bls.n	8007814 <_svfiprintf_r+0x17c>
 800777c:	b1b0      	cbz	r0, 80077ac <_svfiprintf_r+0x114>
 800777e:	9207      	str	r2, [sp, #28]
 8007780:	e014      	b.n	80077ac <_svfiprintf_r+0x114>
 8007782:	eba0 0308 	sub.w	r3, r0, r8
 8007786:	fa09 f303 	lsl.w	r3, r9, r3
 800778a:	4313      	orrs	r3, r2
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	46a2      	mov	sl, r4
 8007790:	e7d2      	b.n	8007738 <_svfiprintf_r+0xa0>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	1d19      	adds	r1, r3, #4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	9103      	str	r1, [sp, #12]
 800779a:	2b00      	cmp	r3, #0
 800779c:	bfbb      	ittet	lt
 800779e:	425b      	neglt	r3, r3
 80077a0:	f042 0202 	orrlt.w	r2, r2, #2
 80077a4:	9307      	strge	r3, [sp, #28]
 80077a6:	9307      	strlt	r3, [sp, #28]
 80077a8:	bfb8      	it	lt
 80077aa:	9204      	strlt	r2, [sp, #16]
 80077ac:	7823      	ldrb	r3, [r4, #0]
 80077ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80077b0:	d10a      	bne.n	80077c8 <_svfiprintf_r+0x130>
 80077b2:	7863      	ldrb	r3, [r4, #1]
 80077b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80077b6:	d132      	bne.n	800781e <_svfiprintf_r+0x186>
 80077b8:	9b03      	ldr	r3, [sp, #12]
 80077ba:	1d1a      	adds	r2, r3, #4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	9203      	str	r2, [sp, #12]
 80077c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077c4:	3402      	adds	r4, #2
 80077c6:	9305      	str	r3, [sp, #20]
 80077c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800788c <_svfiprintf_r+0x1f4>
 80077cc:	7821      	ldrb	r1, [r4, #0]
 80077ce:	2203      	movs	r2, #3
 80077d0:	4650      	mov	r0, sl
 80077d2:	f7f8 fd05 	bl	80001e0 <memchr>
 80077d6:	b138      	cbz	r0, 80077e8 <_svfiprintf_r+0x150>
 80077d8:	9b04      	ldr	r3, [sp, #16]
 80077da:	eba0 000a 	sub.w	r0, r0, sl
 80077de:	2240      	movs	r2, #64	@ 0x40
 80077e0:	4082      	lsls	r2, r0
 80077e2:	4313      	orrs	r3, r2
 80077e4:	3401      	adds	r4, #1
 80077e6:	9304      	str	r3, [sp, #16]
 80077e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ec:	4824      	ldr	r0, [pc, #144]	@ (8007880 <_svfiprintf_r+0x1e8>)
 80077ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077f2:	2206      	movs	r2, #6
 80077f4:	f7f8 fcf4 	bl	80001e0 <memchr>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d036      	beq.n	800786a <_svfiprintf_r+0x1d2>
 80077fc:	4b21      	ldr	r3, [pc, #132]	@ (8007884 <_svfiprintf_r+0x1ec>)
 80077fe:	bb1b      	cbnz	r3, 8007848 <_svfiprintf_r+0x1b0>
 8007800:	9b03      	ldr	r3, [sp, #12]
 8007802:	3307      	adds	r3, #7
 8007804:	f023 0307 	bic.w	r3, r3, #7
 8007808:	3308      	adds	r3, #8
 800780a:	9303      	str	r3, [sp, #12]
 800780c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800780e:	4433      	add	r3, r6
 8007810:	9309      	str	r3, [sp, #36]	@ 0x24
 8007812:	e76a      	b.n	80076ea <_svfiprintf_r+0x52>
 8007814:	fb0c 3202 	mla	r2, ip, r2, r3
 8007818:	460c      	mov	r4, r1
 800781a:	2001      	movs	r0, #1
 800781c:	e7a8      	b.n	8007770 <_svfiprintf_r+0xd8>
 800781e:	2300      	movs	r3, #0
 8007820:	3401      	adds	r4, #1
 8007822:	9305      	str	r3, [sp, #20]
 8007824:	4619      	mov	r1, r3
 8007826:	f04f 0c0a 	mov.w	ip, #10
 800782a:	4620      	mov	r0, r4
 800782c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007830:	3a30      	subs	r2, #48	@ 0x30
 8007832:	2a09      	cmp	r2, #9
 8007834:	d903      	bls.n	800783e <_svfiprintf_r+0x1a6>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0c6      	beq.n	80077c8 <_svfiprintf_r+0x130>
 800783a:	9105      	str	r1, [sp, #20]
 800783c:	e7c4      	b.n	80077c8 <_svfiprintf_r+0x130>
 800783e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007842:	4604      	mov	r4, r0
 8007844:	2301      	movs	r3, #1
 8007846:	e7f0      	b.n	800782a <_svfiprintf_r+0x192>
 8007848:	ab03      	add	r3, sp, #12
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	462a      	mov	r2, r5
 800784e:	4b0e      	ldr	r3, [pc, #56]	@ (8007888 <_svfiprintf_r+0x1f0>)
 8007850:	a904      	add	r1, sp, #16
 8007852:	4638      	mov	r0, r7
 8007854:	f3af 8000 	nop.w
 8007858:	1c42      	adds	r2, r0, #1
 800785a:	4606      	mov	r6, r0
 800785c:	d1d6      	bne.n	800780c <_svfiprintf_r+0x174>
 800785e:	89ab      	ldrh	r3, [r5, #12]
 8007860:	065b      	lsls	r3, r3, #25
 8007862:	f53f af2d 	bmi.w	80076c0 <_svfiprintf_r+0x28>
 8007866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007868:	e72c      	b.n	80076c4 <_svfiprintf_r+0x2c>
 800786a:	ab03      	add	r3, sp, #12
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	462a      	mov	r2, r5
 8007870:	4b05      	ldr	r3, [pc, #20]	@ (8007888 <_svfiprintf_r+0x1f0>)
 8007872:	a904      	add	r1, sp, #16
 8007874:	4638      	mov	r0, r7
 8007876:	f000 f879 	bl	800796c <_printf_i>
 800787a:	e7ed      	b.n	8007858 <_svfiprintf_r+0x1c0>
 800787c:	08008779 	.word	0x08008779
 8007880:	08008783 	.word	0x08008783
 8007884:	00000000 	.word	0x00000000
 8007888:	080075e3 	.word	0x080075e3
 800788c:	0800877f 	.word	0x0800877f

08007890 <_printf_common>:
 8007890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007894:	4616      	mov	r6, r2
 8007896:	4698      	mov	r8, r3
 8007898:	688a      	ldr	r2, [r1, #8]
 800789a:	690b      	ldr	r3, [r1, #16]
 800789c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078a0:	4293      	cmp	r3, r2
 80078a2:	bfb8      	it	lt
 80078a4:	4613      	movlt	r3, r2
 80078a6:	6033      	str	r3, [r6, #0]
 80078a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078ac:	4607      	mov	r7, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	b10a      	cbz	r2, 80078b6 <_printf_common+0x26>
 80078b2:	3301      	adds	r3, #1
 80078b4:	6033      	str	r3, [r6, #0]
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	0699      	lsls	r1, r3, #26
 80078ba:	bf42      	ittt	mi
 80078bc:	6833      	ldrmi	r3, [r6, #0]
 80078be:	3302      	addmi	r3, #2
 80078c0:	6033      	strmi	r3, [r6, #0]
 80078c2:	6825      	ldr	r5, [r4, #0]
 80078c4:	f015 0506 	ands.w	r5, r5, #6
 80078c8:	d106      	bne.n	80078d8 <_printf_common+0x48>
 80078ca:	f104 0a19 	add.w	sl, r4, #25
 80078ce:	68e3      	ldr	r3, [r4, #12]
 80078d0:	6832      	ldr	r2, [r6, #0]
 80078d2:	1a9b      	subs	r3, r3, r2
 80078d4:	42ab      	cmp	r3, r5
 80078d6:	dc26      	bgt.n	8007926 <_printf_common+0x96>
 80078d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80078dc:	6822      	ldr	r2, [r4, #0]
 80078de:	3b00      	subs	r3, #0
 80078e0:	bf18      	it	ne
 80078e2:	2301      	movne	r3, #1
 80078e4:	0692      	lsls	r2, r2, #26
 80078e6:	d42b      	bmi.n	8007940 <_printf_common+0xb0>
 80078e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80078ec:	4641      	mov	r1, r8
 80078ee:	4638      	mov	r0, r7
 80078f0:	47c8      	blx	r9
 80078f2:	3001      	adds	r0, #1
 80078f4:	d01e      	beq.n	8007934 <_printf_common+0xa4>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	6922      	ldr	r2, [r4, #16]
 80078fa:	f003 0306 	and.w	r3, r3, #6
 80078fe:	2b04      	cmp	r3, #4
 8007900:	bf02      	ittt	eq
 8007902:	68e5      	ldreq	r5, [r4, #12]
 8007904:	6833      	ldreq	r3, [r6, #0]
 8007906:	1aed      	subeq	r5, r5, r3
 8007908:	68a3      	ldr	r3, [r4, #8]
 800790a:	bf0c      	ite	eq
 800790c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007910:	2500      	movne	r5, #0
 8007912:	4293      	cmp	r3, r2
 8007914:	bfc4      	itt	gt
 8007916:	1a9b      	subgt	r3, r3, r2
 8007918:	18ed      	addgt	r5, r5, r3
 800791a:	2600      	movs	r6, #0
 800791c:	341a      	adds	r4, #26
 800791e:	42b5      	cmp	r5, r6
 8007920:	d11a      	bne.n	8007958 <_printf_common+0xc8>
 8007922:	2000      	movs	r0, #0
 8007924:	e008      	b.n	8007938 <_printf_common+0xa8>
 8007926:	2301      	movs	r3, #1
 8007928:	4652      	mov	r2, sl
 800792a:	4641      	mov	r1, r8
 800792c:	4638      	mov	r0, r7
 800792e:	47c8      	blx	r9
 8007930:	3001      	adds	r0, #1
 8007932:	d103      	bne.n	800793c <_printf_common+0xac>
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793c:	3501      	adds	r5, #1
 800793e:	e7c6      	b.n	80078ce <_printf_common+0x3e>
 8007940:	18e1      	adds	r1, r4, r3
 8007942:	1c5a      	adds	r2, r3, #1
 8007944:	2030      	movs	r0, #48	@ 0x30
 8007946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800794a:	4422      	add	r2, r4
 800794c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007954:	3302      	adds	r3, #2
 8007956:	e7c7      	b.n	80078e8 <_printf_common+0x58>
 8007958:	2301      	movs	r3, #1
 800795a:	4622      	mov	r2, r4
 800795c:	4641      	mov	r1, r8
 800795e:	4638      	mov	r0, r7
 8007960:	47c8      	blx	r9
 8007962:	3001      	adds	r0, #1
 8007964:	d0e6      	beq.n	8007934 <_printf_common+0xa4>
 8007966:	3601      	adds	r6, #1
 8007968:	e7d9      	b.n	800791e <_printf_common+0x8e>
	...

0800796c <_printf_i>:
 800796c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007970:	7e0f      	ldrb	r7, [r1, #24]
 8007972:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007974:	2f78      	cmp	r7, #120	@ 0x78
 8007976:	4691      	mov	r9, r2
 8007978:	4680      	mov	r8, r0
 800797a:	460c      	mov	r4, r1
 800797c:	469a      	mov	sl, r3
 800797e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007982:	d807      	bhi.n	8007994 <_printf_i+0x28>
 8007984:	2f62      	cmp	r7, #98	@ 0x62
 8007986:	d80a      	bhi.n	800799e <_printf_i+0x32>
 8007988:	2f00      	cmp	r7, #0
 800798a:	f000 80d2 	beq.w	8007b32 <_printf_i+0x1c6>
 800798e:	2f58      	cmp	r7, #88	@ 0x58
 8007990:	f000 80b9 	beq.w	8007b06 <_printf_i+0x19a>
 8007994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800799c:	e03a      	b.n	8007a14 <_printf_i+0xa8>
 800799e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079a2:	2b15      	cmp	r3, #21
 80079a4:	d8f6      	bhi.n	8007994 <_printf_i+0x28>
 80079a6:	a101      	add	r1, pc, #4	@ (adr r1, 80079ac <_printf_i+0x40>)
 80079a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079ac:	08007a05 	.word	0x08007a05
 80079b0:	08007a19 	.word	0x08007a19
 80079b4:	08007995 	.word	0x08007995
 80079b8:	08007995 	.word	0x08007995
 80079bc:	08007995 	.word	0x08007995
 80079c0:	08007995 	.word	0x08007995
 80079c4:	08007a19 	.word	0x08007a19
 80079c8:	08007995 	.word	0x08007995
 80079cc:	08007995 	.word	0x08007995
 80079d0:	08007995 	.word	0x08007995
 80079d4:	08007995 	.word	0x08007995
 80079d8:	08007b19 	.word	0x08007b19
 80079dc:	08007a43 	.word	0x08007a43
 80079e0:	08007ad3 	.word	0x08007ad3
 80079e4:	08007995 	.word	0x08007995
 80079e8:	08007995 	.word	0x08007995
 80079ec:	08007b3b 	.word	0x08007b3b
 80079f0:	08007995 	.word	0x08007995
 80079f4:	08007a43 	.word	0x08007a43
 80079f8:	08007995 	.word	0x08007995
 80079fc:	08007995 	.word	0x08007995
 8007a00:	08007adb 	.word	0x08007adb
 8007a04:	6833      	ldr	r3, [r6, #0]
 8007a06:	1d1a      	adds	r2, r3, #4
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6032      	str	r2, [r6, #0]
 8007a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a14:	2301      	movs	r3, #1
 8007a16:	e09d      	b.n	8007b54 <_printf_i+0x1e8>
 8007a18:	6833      	ldr	r3, [r6, #0]
 8007a1a:	6820      	ldr	r0, [r4, #0]
 8007a1c:	1d19      	adds	r1, r3, #4
 8007a1e:	6031      	str	r1, [r6, #0]
 8007a20:	0606      	lsls	r6, r0, #24
 8007a22:	d501      	bpl.n	8007a28 <_printf_i+0xbc>
 8007a24:	681d      	ldr	r5, [r3, #0]
 8007a26:	e003      	b.n	8007a30 <_printf_i+0xc4>
 8007a28:	0645      	lsls	r5, r0, #25
 8007a2a:	d5fb      	bpl.n	8007a24 <_printf_i+0xb8>
 8007a2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a30:	2d00      	cmp	r5, #0
 8007a32:	da03      	bge.n	8007a3c <_printf_i+0xd0>
 8007a34:	232d      	movs	r3, #45	@ 0x2d
 8007a36:	426d      	negs	r5, r5
 8007a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a3c:	4859      	ldr	r0, [pc, #356]	@ (8007ba4 <_printf_i+0x238>)
 8007a3e:	230a      	movs	r3, #10
 8007a40:	e011      	b.n	8007a66 <_printf_i+0xfa>
 8007a42:	6821      	ldr	r1, [r4, #0]
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	0608      	lsls	r0, r1, #24
 8007a48:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a4c:	d402      	bmi.n	8007a54 <_printf_i+0xe8>
 8007a4e:	0649      	lsls	r1, r1, #25
 8007a50:	bf48      	it	mi
 8007a52:	b2ad      	uxthmi	r5, r5
 8007a54:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a56:	4853      	ldr	r0, [pc, #332]	@ (8007ba4 <_printf_i+0x238>)
 8007a58:	6033      	str	r3, [r6, #0]
 8007a5a:	bf14      	ite	ne
 8007a5c:	230a      	movne	r3, #10
 8007a5e:	2308      	moveq	r3, #8
 8007a60:	2100      	movs	r1, #0
 8007a62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a66:	6866      	ldr	r6, [r4, #4]
 8007a68:	60a6      	str	r6, [r4, #8]
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	bfa2      	ittt	ge
 8007a6e:	6821      	ldrge	r1, [r4, #0]
 8007a70:	f021 0104 	bicge.w	r1, r1, #4
 8007a74:	6021      	strge	r1, [r4, #0]
 8007a76:	b90d      	cbnz	r5, 8007a7c <_printf_i+0x110>
 8007a78:	2e00      	cmp	r6, #0
 8007a7a:	d04b      	beq.n	8007b14 <_printf_i+0x1a8>
 8007a7c:	4616      	mov	r6, r2
 8007a7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a82:	fb03 5711 	mls	r7, r3, r1, r5
 8007a86:	5dc7      	ldrb	r7, [r0, r7]
 8007a88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a8c:	462f      	mov	r7, r5
 8007a8e:	42bb      	cmp	r3, r7
 8007a90:	460d      	mov	r5, r1
 8007a92:	d9f4      	bls.n	8007a7e <_printf_i+0x112>
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d10b      	bne.n	8007ab0 <_printf_i+0x144>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	07df      	lsls	r7, r3, #31
 8007a9c:	d508      	bpl.n	8007ab0 <_printf_i+0x144>
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	6861      	ldr	r1, [r4, #4]
 8007aa2:	4299      	cmp	r1, r3
 8007aa4:	bfde      	ittt	le
 8007aa6:	2330      	movle	r3, #48	@ 0x30
 8007aa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ab0:	1b92      	subs	r2, r2, r6
 8007ab2:	6122      	str	r2, [r4, #16]
 8007ab4:	f8cd a000 	str.w	sl, [sp]
 8007ab8:	464b      	mov	r3, r9
 8007aba:	aa03      	add	r2, sp, #12
 8007abc:	4621      	mov	r1, r4
 8007abe:	4640      	mov	r0, r8
 8007ac0:	f7ff fee6 	bl	8007890 <_printf_common>
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d14a      	bne.n	8007b5e <_printf_i+0x1f2>
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	b004      	add	sp, #16
 8007ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	f043 0320 	orr.w	r3, r3, #32
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	4833      	ldr	r0, [pc, #204]	@ (8007ba8 <_printf_i+0x23c>)
 8007adc:	2778      	movs	r7, #120	@ 0x78
 8007ade:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	6831      	ldr	r1, [r6, #0]
 8007ae6:	061f      	lsls	r7, r3, #24
 8007ae8:	f851 5b04 	ldr.w	r5, [r1], #4
 8007aec:	d402      	bmi.n	8007af4 <_printf_i+0x188>
 8007aee:	065f      	lsls	r7, r3, #25
 8007af0:	bf48      	it	mi
 8007af2:	b2ad      	uxthmi	r5, r5
 8007af4:	6031      	str	r1, [r6, #0]
 8007af6:	07d9      	lsls	r1, r3, #31
 8007af8:	bf44      	itt	mi
 8007afa:	f043 0320 	orrmi.w	r3, r3, #32
 8007afe:	6023      	strmi	r3, [r4, #0]
 8007b00:	b11d      	cbz	r5, 8007b0a <_printf_i+0x19e>
 8007b02:	2310      	movs	r3, #16
 8007b04:	e7ac      	b.n	8007a60 <_printf_i+0xf4>
 8007b06:	4827      	ldr	r0, [pc, #156]	@ (8007ba4 <_printf_i+0x238>)
 8007b08:	e7e9      	b.n	8007ade <_printf_i+0x172>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	f023 0320 	bic.w	r3, r3, #32
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	e7f6      	b.n	8007b02 <_printf_i+0x196>
 8007b14:	4616      	mov	r6, r2
 8007b16:	e7bd      	b.n	8007a94 <_printf_i+0x128>
 8007b18:	6833      	ldr	r3, [r6, #0]
 8007b1a:	6825      	ldr	r5, [r4, #0]
 8007b1c:	6961      	ldr	r1, [r4, #20]
 8007b1e:	1d18      	adds	r0, r3, #4
 8007b20:	6030      	str	r0, [r6, #0]
 8007b22:	062e      	lsls	r6, r5, #24
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	d501      	bpl.n	8007b2c <_printf_i+0x1c0>
 8007b28:	6019      	str	r1, [r3, #0]
 8007b2a:	e002      	b.n	8007b32 <_printf_i+0x1c6>
 8007b2c:	0668      	lsls	r0, r5, #25
 8007b2e:	d5fb      	bpl.n	8007b28 <_printf_i+0x1bc>
 8007b30:	8019      	strh	r1, [r3, #0]
 8007b32:	2300      	movs	r3, #0
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	4616      	mov	r6, r2
 8007b38:	e7bc      	b.n	8007ab4 <_printf_i+0x148>
 8007b3a:	6833      	ldr	r3, [r6, #0]
 8007b3c:	1d1a      	adds	r2, r3, #4
 8007b3e:	6032      	str	r2, [r6, #0]
 8007b40:	681e      	ldr	r6, [r3, #0]
 8007b42:	6862      	ldr	r2, [r4, #4]
 8007b44:	2100      	movs	r1, #0
 8007b46:	4630      	mov	r0, r6
 8007b48:	f7f8 fb4a 	bl	80001e0 <memchr>
 8007b4c:	b108      	cbz	r0, 8007b52 <_printf_i+0x1e6>
 8007b4e:	1b80      	subs	r0, r0, r6
 8007b50:	6060      	str	r0, [r4, #4]
 8007b52:	6863      	ldr	r3, [r4, #4]
 8007b54:	6123      	str	r3, [r4, #16]
 8007b56:	2300      	movs	r3, #0
 8007b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b5c:	e7aa      	b.n	8007ab4 <_printf_i+0x148>
 8007b5e:	6923      	ldr	r3, [r4, #16]
 8007b60:	4632      	mov	r2, r6
 8007b62:	4649      	mov	r1, r9
 8007b64:	4640      	mov	r0, r8
 8007b66:	47d0      	blx	sl
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d0ad      	beq.n	8007ac8 <_printf_i+0x15c>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	079b      	lsls	r3, r3, #30
 8007b70:	d413      	bmi.n	8007b9a <_printf_i+0x22e>
 8007b72:	68e0      	ldr	r0, [r4, #12]
 8007b74:	9b03      	ldr	r3, [sp, #12]
 8007b76:	4298      	cmp	r0, r3
 8007b78:	bfb8      	it	lt
 8007b7a:	4618      	movlt	r0, r3
 8007b7c:	e7a6      	b.n	8007acc <_printf_i+0x160>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4632      	mov	r2, r6
 8007b82:	4649      	mov	r1, r9
 8007b84:	4640      	mov	r0, r8
 8007b86:	47d0      	blx	sl
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d09d      	beq.n	8007ac8 <_printf_i+0x15c>
 8007b8c:	3501      	adds	r5, #1
 8007b8e:	68e3      	ldr	r3, [r4, #12]
 8007b90:	9903      	ldr	r1, [sp, #12]
 8007b92:	1a5b      	subs	r3, r3, r1
 8007b94:	42ab      	cmp	r3, r5
 8007b96:	dcf2      	bgt.n	8007b7e <_printf_i+0x212>
 8007b98:	e7eb      	b.n	8007b72 <_printf_i+0x206>
 8007b9a:	2500      	movs	r5, #0
 8007b9c:	f104 0619 	add.w	r6, r4, #25
 8007ba0:	e7f5      	b.n	8007b8e <_printf_i+0x222>
 8007ba2:	bf00      	nop
 8007ba4:	0800878a 	.word	0x0800878a
 8007ba8:	0800879b 	.word	0x0800879b

08007bac <__sflush_r>:
 8007bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb4:	0716      	lsls	r6, r2, #28
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	460c      	mov	r4, r1
 8007bba:	d454      	bmi.n	8007c66 <__sflush_r+0xba>
 8007bbc:	684b      	ldr	r3, [r1, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	dc02      	bgt.n	8007bc8 <__sflush_r+0x1c>
 8007bc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dd48      	ble.n	8007c5a <__sflush_r+0xae>
 8007bc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bca:	2e00      	cmp	r6, #0
 8007bcc:	d045      	beq.n	8007c5a <__sflush_r+0xae>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bd4:	682f      	ldr	r7, [r5, #0]
 8007bd6:	6a21      	ldr	r1, [r4, #32]
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	d030      	beq.n	8007c3e <__sflush_r+0x92>
 8007bdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	0759      	lsls	r1, r3, #29
 8007be2:	d505      	bpl.n	8007bf0 <__sflush_r+0x44>
 8007be4:	6863      	ldr	r3, [r4, #4]
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bea:	b10b      	cbz	r3, 8007bf0 <__sflush_r+0x44>
 8007bec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bee:	1ad2      	subs	r2, r2, r3
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bf4:	6a21      	ldr	r1, [r4, #32]
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b0      	blx	r6
 8007bfa:	1c43      	adds	r3, r0, #1
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	d106      	bne.n	8007c0e <__sflush_r+0x62>
 8007c00:	6829      	ldr	r1, [r5, #0]
 8007c02:	291d      	cmp	r1, #29
 8007c04:	d82b      	bhi.n	8007c5e <__sflush_r+0xb2>
 8007c06:	4a2a      	ldr	r2, [pc, #168]	@ (8007cb0 <__sflush_r+0x104>)
 8007c08:	410a      	asrs	r2, r1
 8007c0a:	07d6      	lsls	r6, r2, #31
 8007c0c:	d427      	bmi.n	8007c5e <__sflush_r+0xb2>
 8007c0e:	2200      	movs	r2, #0
 8007c10:	6062      	str	r2, [r4, #4]
 8007c12:	04d9      	lsls	r1, r3, #19
 8007c14:	6922      	ldr	r2, [r4, #16]
 8007c16:	6022      	str	r2, [r4, #0]
 8007c18:	d504      	bpl.n	8007c24 <__sflush_r+0x78>
 8007c1a:	1c42      	adds	r2, r0, #1
 8007c1c:	d101      	bne.n	8007c22 <__sflush_r+0x76>
 8007c1e:	682b      	ldr	r3, [r5, #0]
 8007c20:	b903      	cbnz	r3, 8007c24 <__sflush_r+0x78>
 8007c22:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c26:	602f      	str	r7, [r5, #0]
 8007c28:	b1b9      	cbz	r1, 8007c5a <__sflush_r+0xae>
 8007c2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c2e:	4299      	cmp	r1, r3
 8007c30:	d002      	beq.n	8007c38 <__sflush_r+0x8c>
 8007c32:	4628      	mov	r0, r5
 8007c34:	f7fe fbca 	bl	80063cc <_free_r>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c3c:	e00d      	b.n	8007c5a <__sflush_r+0xae>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b0      	blx	r6
 8007c44:	4602      	mov	r2, r0
 8007c46:	1c50      	adds	r0, r2, #1
 8007c48:	d1c9      	bne.n	8007bde <__sflush_r+0x32>
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0c6      	beq.n	8007bde <__sflush_r+0x32>
 8007c50:	2b1d      	cmp	r3, #29
 8007c52:	d001      	beq.n	8007c58 <__sflush_r+0xac>
 8007c54:	2b16      	cmp	r3, #22
 8007c56:	d11e      	bne.n	8007c96 <__sflush_r+0xea>
 8007c58:	602f      	str	r7, [r5, #0]
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e022      	b.n	8007ca4 <__sflush_r+0xf8>
 8007c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c62:	b21b      	sxth	r3, r3
 8007c64:	e01b      	b.n	8007c9e <__sflush_r+0xf2>
 8007c66:	690f      	ldr	r7, [r1, #16]
 8007c68:	2f00      	cmp	r7, #0
 8007c6a:	d0f6      	beq.n	8007c5a <__sflush_r+0xae>
 8007c6c:	0793      	lsls	r3, r2, #30
 8007c6e:	680e      	ldr	r6, [r1, #0]
 8007c70:	bf08      	it	eq
 8007c72:	694b      	ldreq	r3, [r1, #20]
 8007c74:	600f      	str	r7, [r1, #0]
 8007c76:	bf18      	it	ne
 8007c78:	2300      	movne	r3, #0
 8007c7a:	eba6 0807 	sub.w	r8, r6, r7
 8007c7e:	608b      	str	r3, [r1, #8]
 8007c80:	f1b8 0f00 	cmp.w	r8, #0
 8007c84:	dde9      	ble.n	8007c5a <__sflush_r+0xae>
 8007c86:	6a21      	ldr	r1, [r4, #32]
 8007c88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c8a:	4643      	mov	r3, r8
 8007c8c:	463a      	mov	r2, r7
 8007c8e:	4628      	mov	r0, r5
 8007c90:	47b0      	blx	r6
 8007c92:	2800      	cmp	r0, #0
 8007c94:	dc08      	bgt.n	8007ca8 <__sflush_r+0xfc>
 8007c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca8:	4407      	add	r7, r0
 8007caa:	eba8 0800 	sub.w	r8, r8, r0
 8007cae:	e7e7      	b.n	8007c80 <__sflush_r+0xd4>
 8007cb0:	dfbffffe 	.word	0xdfbffffe

08007cb4 <_fflush_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	690b      	ldr	r3, [r1, #16]
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	b913      	cbnz	r3, 8007cc4 <_fflush_r+0x10>
 8007cbe:	2500      	movs	r5, #0
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	b118      	cbz	r0, 8007cce <_fflush_r+0x1a>
 8007cc6:	6a03      	ldr	r3, [r0, #32]
 8007cc8:	b90b      	cbnz	r3, 8007cce <_fflush_r+0x1a>
 8007cca:	f7fe f9a5 	bl	8006018 <__sinit>
 8007cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0f3      	beq.n	8007cbe <_fflush_r+0xa>
 8007cd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cd8:	07d0      	lsls	r0, r2, #31
 8007cda:	d404      	bmi.n	8007ce6 <_fflush_r+0x32>
 8007cdc:	0599      	lsls	r1, r3, #22
 8007cde:	d402      	bmi.n	8007ce6 <_fflush_r+0x32>
 8007ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce2:	f7fe fb3a 	bl	800635a <__retarget_lock_acquire_recursive>
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	4621      	mov	r1, r4
 8007cea:	f7ff ff5f 	bl	8007bac <__sflush_r>
 8007cee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cf0:	07da      	lsls	r2, r3, #31
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	d4e4      	bmi.n	8007cc0 <_fflush_r+0xc>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	059b      	lsls	r3, r3, #22
 8007cfa:	d4e1      	bmi.n	8007cc0 <_fflush_r+0xc>
 8007cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cfe:	f7fe fb2d 	bl	800635c <__retarget_lock_release_recursive>
 8007d02:	e7dd      	b.n	8007cc0 <_fflush_r+0xc>

08007d04 <fiprintf>:
 8007d04:	b40e      	push	{r1, r2, r3}
 8007d06:	b503      	push	{r0, r1, lr}
 8007d08:	4601      	mov	r1, r0
 8007d0a:	ab03      	add	r3, sp, #12
 8007d0c:	4805      	ldr	r0, [pc, #20]	@ (8007d24 <fiprintf+0x20>)
 8007d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	f000 f8a3 	bl	8007e60 <_vfiprintf_r>
 8007d1a:	b002      	add	sp, #8
 8007d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d20:	b003      	add	sp, #12
 8007d22:	4770      	bx	lr
 8007d24:	20000184 	.word	0x20000184

08007d28 <memmove>:
 8007d28:	4288      	cmp	r0, r1
 8007d2a:	b510      	push	{r4, lr}
 8007d2c:	eb01 0402 	add.w	r4, r1, r2
 8007d30:	d902      	bls.n	8007d38 <memmove+0x10>
 8007d32:	4284      	cmp	r4, r0
 8007d34:	4623      	mov	r3, r4
 8007d36:	d807      	bhi.n	8007d48 <memmove+0x20>
 8007d38:	1e43      	subs	r3, r0, #1
 8007d3a:	42a1      	cmp	r1, r4
 8007d3c:	d008      	beq.n	8007d50 <memmove+0x28>
 8007d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d46:	e7f8      	b.n	8007d3a <memmove+0x12>
 8007d48:	4402      	add	r2, r0
 8007d4a:	4601      	mov	r1, r0
 8007d4c:	428a      	cmp	r2, r1
 8007d4e:	d100      	bne.n	8007d52 <memmove+0x2a>
 8007d50:	bd10      	pop	{r4, pc}
 8007d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d5a:	e7f7      	b.n	8007d4c <memmove+0x24>

08007d5c <_sbrk_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	@ (8007d78 <_sbrk_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7f9 ffd8 	bl	8001d1c <_sbrk>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_sbrk_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_sbrk_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	200004cc 	.word	0x200004cc

08007d7c <abort>:
 8007d7c:	b508      	push	{r3, lr}
 8007d7e:	2006      	movs	r0, #6
 8007d80:	f000 fa42 	bl	8008208 <raise>
 8007d84:	2001      	movs	r0, #1
 8007d86:	f7f9 ff51 	bl	8001c2c <_exit>

08007d8a <_calloc_r>:
 8007d8a:	b570      	push	{r4, r5, r6, lr}
 8007d8c:	fba1 5402 	umull	r5, r4, r1, r2
 8007d90:	b93c      	cbnz	r4, 8007da2 <_calloc_r+0x18>
 8007d92:	4629      	mov	r1, r5
 8007d94:	f7fe fec8 	bl	8006b28 <_malloc_r>
 8007d98:	4606      	mov	r6, r0
 8007d9a:	b928      	cbnz	r0, 8007da8 <_calloc_r+0x1e>
 8007d9c:	2600      	movs	r6, #0
 8007d9e:	4630      	mov	r0, r6
 8007da0:	bd70      	pop	{r4, r5, r6, pc}
 8007da2:	220c      	movs	r2, #12
 8007da4:	6002      	str	r2, [r0, #0]
 8007da6:	e7f9      	b.n	8007d9c <_calloc_r+0x12>
 8007da8:	462a      	mov	r2, r5
 8007daa:	4621      	mov	r1, r4
 8007dac:	f7fe f9e1 	bl	8006172 <memset>
 8007db0:	e7f5      	b.n	8007d9e <_calloc_r+0x14>

08007db2 <_realloc_r>:
 8007db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db6:	4680      	mov	r8, r0
 8007db8:	4615      	mov	r5, r2
 8007dba:	460c      	mov	r4, r1
 8007dbc:	b921      	cbnz	r1, 8007dc8 <_realloc_r+0x16>
 8007dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	f7fe beb0 	b.w	8006b28 <_malloc_r>
 8007dc8:	b92a      	cbnz	r2, 8007dd6 <_realloc_r+0x24>
 8007dca:	f7fe faff 	bl	80063cc <_free_r>
 8007dce:	2400      	movs	r4, #0
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd6:	f000 fa33 	bl	8008240 <_malloc_usable_size_r>
 8007dda:	4285      	cmp	r5, r0
 8007ddc:	4606      	mov	r6, r0
 8007dde:	d802      	bhi.n	8007de6 <_realloc_r+0x34>
 8007de0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007de4:	d8f4      	bhi.n	8007dd0 <_realloc_r+0x1e>
 8007de6:	4629      	mov	r1, r5
 8007de8:	4640      	mov	r0, r8
 8007dea:	f7fe fe9d 	bl	8006b28 <_malloc_r>
 8007dee:	4607      	mov	r7, r0
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d0ec      	beq.n	8007dce <_realloc_r+0x1c>
 8007df4:	42b5      	cmp	r5, r6
 8007df6:	462a      	mov	r2, r5
 8007df8:	4621      	mov	r1, r4
 8007dfa:	bf28      	it	cs
 8007dfc:	4632      	movcs	r2, r6
 8007dfe:	f7fe faae 	bl	800635e <memcpy>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4640      	mov	r0, r8
 8007e06:	f7fe fae1 	bl	80063cc <_free_r>
 8007e0a:	463c      	mov	r4, r7
 8007e0c:	e7e0      	b.n	8007dd0 <_realloc_r+0x1e>

08007e0e <__sfputc_r>:
 8007e0e:	6893      	ldr	r3, [r2, #8]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	b410      	push	{r4}
 8007e16:	6093      	str	r3, [r2, #8]
 8007e18:	da08      	bge.n	8007e2c <__sfputc_r+0x1e>
 8007e1a:	6994      	ldr	r4, [r2, #24]
 8007e1c:	42a3      	cmp	r3, r4
 8007e1e:	db01      	blt.n	8007e24 <__sfputc_r+0x16>
 8007e20:	290a      	cmp	r1, #10
 8007e22:	d103      	bne.n	8007e2c <__sfputc_r+0x1e>
 8007e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e28:	f000 b932 	b.w	8008090 <__swbuf_r>
 8007e2c:	6813      	ldr	r3, [r2, #0]
 8007e2e:	1c58      	adds	r0, r3, #1
 8007e30:	6010      	str	r0, [r2, #0]
 8007e32:	7019      	strb	r1, [r3, #0]
 8007e34:	4608      	mov	r0, r1
 8007e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <__sfputs_r>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	4606      	mov	r6, r0
 8007e40:	460f      	mov	r7, r1
 8007e42:	4614      	mov	r4, r2
 8007e44:	18d5      	adds	r5, r2, r3
 8007e46:	42ac      	cmp	r4, r5
 8007e48:	d101      	bne.n	8007e4e <__sfputs_r+0x12>
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	e007      	b.n	8007e5e <__sfputs_r+0x22>
 8007e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e52:	463a      	mov	r2, r7
 8007e54:	4630      	mov	r0, r6
 8007e56:	f7ff ffda 	bl	8007e0e <__sfputc_r>
 8007e5a:	1c43      	adds	r3, r0, #1
 8007e5c:	d1f3      	bne.n	8007e46 <__sfputs_r+0xa>
 8007e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e60 <_vfiprintf_r>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	460d      	mov	r5, r1
 8007e66:	b09d      	sub	sp, #116	@ 0x74
 8007e68:	4614      	mov	r4, r2
 8007e6a:	4698      	mov	r8, r3
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	b118      	cbz	r0, 8007e78 <_vfiprintf_r+0x18>
 8007e70:	6a03      	ldr	r3, [r0, #32]
 8007e72:	b90b      	cbnz	r3, 8007e78 <_vfiprintf_r+0x18>
 8007e74:	f7fe f8d0 	bl	8006018 <__sinit>
 8007e78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e7a:	07d9      	lsls	r1, r3, #31
 8007e7c:	d405      	bmi.n	8007e8a <_vfiprintf_r+0x2a>
 8007e7e:	89ab      	ldrh	r3, [r5, #12]
 8007e80:	059a      	lsls	r2, r3, #22
 8007e82:	d402      	bmi.n	8007e8a <_vfiprintf_r+0x2a>
 8007e84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e86:	f7fe fa68 	bl	800635a <__retarget_lock_acquire_recursive>
 8007e8a:	89ab      	ldrh	r3, [r5, #12]
 8007e8c:	071b      	lsls	r3, r3, #28
 8007e8e:	d501      	bpl.n	8007e94 <_vfiprintf_r+0x34>
 8007e90:	692b      	ldr	r3, [r5, #16]
 8007e92:	b99b      	cbnz	r3, 8007ebc <_vfiprintf_r+0x5c>
 8007e94:	4629      	mov	r1, r5
 8007e96:	4630      	mov	r0, r6
 8007e98:	f000 f938 	bl	800810c <__swsetup_r>
 8007e9c:	b170      	cbz	r0, 8007ebc <_vfiprintf_r+0x5c>
 8007e9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ea0:	07dc      	lsls	r4, r3, #31
 8007ea2:	d504      	bpl.n	8007eae <_vfiprintf_r+0x4e>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	b01d      	add	sp, #116	@ 0x74
 8007eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eae:	89ab      	ldrh	r3, [r5, #12]
 8007eb0:	0598      	lsls	r0, r3, #22
 8007eb2:	d4f7      	bmi.n	8007ea4 <_vfiprintf_r+0x44>
 8007eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007eb6:	f7fe fa51 	bl	800635c <__retarget_lock_release_recursive>
 8007eba:	e7f3      	b.n	8007ea4 <_vfiprintf_r+0x44>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec0:	2320      	movs	r3, #32
 8007ec2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007eca:	2330      	movs	r3, #48	@ 0x30
 8007ecc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800807c <_vfiprintf_r+0x21c>
 8007ed0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ed4:	f04f 0901 	mov.w	r9, #1
 8007ed8:	4623      	mov	r3, r4
 8007eda:	469a      	mov	sl, r3
 8007edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ee0:	b10a      	cbz	r2, 8007ee6 <_vfiprintf_r+0x86>
 8007ee2:	2a25      	cmp	r2, #37	@ 0x25
 8007ee4:	d1f9      	bne.n	8007eda <_vfiprintf_r+0x7a>
 8007ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8007eea:	d00b      	beq.n	8007f04 <_vfiprintf_r+0xa4>
 8007eec:	465b      	mov	r3, fp
 8007eee:	4622      	mov	r2, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f7ff ffa2 	bl	8007e3c <__sfputs_r>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f000 80a7 	beq.w	800804c <_vfiprintf_r+0x1ec>
 8007efe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f00:	445a      	add	r2, fp
 8007f02:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f04:	f89a 3000 	ldrb.w	r3, [sl]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 809f 	beq.w	800804c <_vfiprintf_r+0x1ec>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295
 8007f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f18:	f10a 0a01 	add.w	sl, sl, #1
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	9307      	str	r3, [sp, #28]
 8007f20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f24:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f26:	4654      	mov	r4, sl
 8007f28:	2205      	movs	r2, #5
 8007f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2e:	4853      	ldr	r0, [pc, #332]	@ (800807c <_vfiprintf_r+0x21c>)
 8007f30:	f7f8 f956 	bl	80001e0 <memchr>
 8007f34:	9a04      	ldr	r2, [sp, #16]
 8007f36:	b9d8      	cbnz	r0, 8007f70 <_vfiprintf_r+0x110>
 8007f38:	06d1      	lsls	r1, r2, #27
 8007f3a:	bf44      	itt	mi
 8007f3c:	2320      	movmi	r3, #32
 8007f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f42:	0713      	lsls	r3, r2, #28
 8007f44:	bf44      	itt	mi
 8007f46:	232b      	movmi	r3, #43	@ 0x2b
 8007f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f52:	d015      	beq.n	8007f80 <_vfiprintf_r+0x120>
 8007f54:	9a07      	ldr	r2, [sp, #28]
 8007f56:	4654      	mov	r4, sl
 8007f58:	2000      	movs	r0, #0
 8007f5a:	f04f 0c0a 	mov.w	ip, #10
 8007f5e:	4621      	mov	r1, r4
 8007f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f64:	3b30      	subs	r3, #48	@ 0x30
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	d94b      	bls.n	8008002 <_vfiprintf_r+0x1a2>
 8007f6a:	b1b0      	cbz	r0, 8007f9a <_vfiprintf_r+0x13a>
 8007f6c:	9207      	str	r2, [sp, #28]
 8007f6e:	e014      	b.n	8007f9a <_vfiprintf_r+0x13a>
 8007f70:	eba0 0308 	sub.w	r3, r0, r8
 8007f74:	fa09 f303 	lsl.w	r3, r9, r3
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	46a2      	mov	sl, r4
 8007f7e:	e7d2      	b.n	8007f26 <_vfiprintf_r+0xc6>
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	1d19      	adds	r1, r3, #4
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	9103      	str	r1, [sp, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bfbb      	ittet	lt
 8007f8c:	425b      	neglt	r3, r3
 8007f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f92:	9307      	strge	r3, [sp, #28]
 8007f94:	9307      	strlt	r3, [sp, #28]
 8007f96:	bfb8      	it	lt
 8007f98:	9204      	strlt	r2, [sp, #16]
 8007f9a:	7823      	ldrb	r3, [r4, #0]
 8007f9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f9e:	d10a      	bne.n	8007fb6 <_vfiprintf_r+0x156>
 8007fa0:	7863      	ldrb	r3, [r4, #1]
 8007fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fa4:	d132      	bne.n	800800c <_vfiprintf_r+0x1ac>
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	1d1a      	adds	r2, r3, #4
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	9203      	str	r2, [sp, #12]
 8007fae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007fb2:	3402      	adds	r4, #2
 8007fb4:	9305      	str	r3, [sp, #20]
 8007fb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800808c <_vfiprintf_r+0x22c>
 8007fba:	7821      	ldrb	r1, [r4, #0]
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	f7f8 f90e 	bl	80001e0 <memchr>
 8007fc4:	b138      	cbz	r0, 8007fd6 <_vfiprintf_r+0x176>
 8007fc6:	9b04      	ldr	r3, [sp, #16]
 8007fc8:	eba0 000a 	sub.w	r0, r0, sl
 8007fcc:	2240      	movs	r2, #64	@ 0x40
 8007fce:	4082      	lsls	r2, r0
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	3401      	adds	r4, #1
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fda:	4829      	ldr	r0, [pc, #164]	@ (8008080 <_vfiprintf_r+0x220>)
 8007fdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007fe0:	2206      	movs	r2, #6
 8007fe2:	f7f8 f8fd 	bl	80001e0 <memchr>
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	d03f      	beq.n	800806a <_vfiprintf_r+0x20a>
 8007fea:	4b26      	ldr	r3, [pc, #152]	@ (8008084 <_vfiprintf_r+0x224>)
 8007fec:	bb1b      	cbnz	r3, 8008036 <_vfiprintf_r+0x1d6>
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	3307      	adds	r3, #7
 8007ff2:	f023 0307 	bic.w	r3, r3, #7
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	9303      	str	r3, [sp, #12]
 8007ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffc:	443b      	add	r3, r7
 8007ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008000:	e76a      	b.n	8007ed8 <_vfiprintf_r+0x78>
 8008002:	fb0c 3202 	mla	r2, ip, r2, r3
 8008006:	460c      	mov	r4, r1
 8008008:	2001      	movs	r0, #1
 800800a:	e7a8      	b.n	8007f5e <_vfiprintf_r+0xfe>
 800800c:	2300      	movs	r3, #0
 800800e:	3401      	adds	r4, #1
 8008010:	9305      	str	r3, [sp, #20]
 8008012:	4619      	mov	r1, r3
 8008014:	f04f 0c0a 	mov.w	ip, #10
 8008018:	4620      	mov	r0, r4
 800801a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800801e:	3a30      	subs	r2, #48	@ 0x30
 8008020:	2a09      	cmp	r2, #9
 8008022:	d903      	bls.n	800802c <_vfiprintf_r+0x1cc>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0c6      	beq.n	8007fb6 <_vfiprintf_r+0x156>
 8008028:	9105      	str	r1, [sp, #20]
 800802a:	e7c4      	b.n	8007fb6 <_vfiprintf_r+0x156>
 800802c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008030:	4604      	mov	r4, r0
 8008032:	2301      	movs	r3, #1
 8008034:	e7f0      	b.n	8008018 <_vfiprintf_r+0x1b8>
 8008036:	ab03      	add	r3, sp, #12
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	462a      	mov	r2, r5
 800803c:	4b12      	ldr	r3, [pc, #72]	@ (8008088 <_vfiprintf_r+0x228>)
 800803e:	a904      	add	r1, sp, #16
 8008040:	4630      	mov	r0, r6
 8008042:	f3af 8000 	nop.w
 8008046:	4607      	mov	r7, r0
 8008048:	1c78      	adds	r0, r7, #1
 800804a:	d1d6      	bne.n	8007ffa <_vfiprintf_r+0x19a>
 800804c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800804e:	07d9      	lsls	r1, r3, #31
 8008050:	d405      	bmi.n	800805e <_vfiprintf_r+0x1fe>
 8008052:	89ab      	ldrh	r3, [r5, #12]
 8008054:	059a      	lsls	r2, r3, #22
 8008056:	d402      	bmi.n	800805e <_vfiprintf_r+0x1fe>
 8008058:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800805a:	f7fe f97f 	bl	800635c <__retarget_lock_release_recursive>
 800805e:	89ab      	ldrh	r3, [r5, #12]
 8008060:	065b      	lsls	r3, r3, #25
 8008062:	f53f af1f 	bmi.w	8007ea4 <_vfiprintf_r+0x44>
 8008066:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008068:	e71e      	b.n	8007ea8 <_vfiprintf_r+0x48>
 800806a:	ab03      	add	r3, sp, #12
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	462a      	mov	r2, r5
 8008070:	4b05      	ldr	r3, [pc, #20]	@ (8008088 <_vfiprintf_r+0x228>)
 8008072:	a904      	add	r1, sp, #16
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff fc79 	bl	800796c <_printf_i>
 800807a:	e7e4      	b.n	8008046 <_vfiprintf_r+0x1e6>
 800807c:	08008779 	.word	0x08008779
 8008080:	08008783 	.word	0x08008783
 8008084:	00000000 	.word	0x00000000
 8008088:	08007e3d 	.word	0x08007e3d
 800808c:	0800877f 	.word	0x0800877f

08008090 <__swbuf_r>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	460e      	mov	r6, r1
 8008094:	4614      	mov	r4, r2
 8008096:	4605      	mov	r5, r0
 8008098:	b118      	cbz	r0, 80080a2 <__swbuf_r+0x12>
 800809a:	6a03      	ldr	r3, [r0, #32]
 800809c:	b90b      	cbnz	r3, 80080a2 <__swbuf_r+0x12>
 800809e:	f7fd ffbb 	bl	8006018 <__sinit>
 80080a2:	69a3      	ldr	r3, [r4, #24]
 80080a4:	60a3      	str	r3, [r4, #8]
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	071a      	lsls	r2, r3, #28
 80080aa:	d501      	bpl.n	80080b0 <__swbuf_r+0x20>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	b943      	cbnz	r3, 80080c2 <__swbuf_r+0x32>
 80080b0:	4621      	mov	r1, r4
 80080b2:	4628      	mov	r0, r5
 80080b4:	f000 f82a 	bl	800810c <__swsetup_r>
 80080b8:	b118      	cbz	r0, 80080c2 <__swbuf_r+0x32>
 80080ba:	f04f 37ff 	mov.w	r7, #4294967295
 80080be:	4638      	mov	r0, r7
 80080c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	6922      	ldr	r2, [r4, #16]
 80080c6:	1a98      	subs	r0, r3, r2
 80080c8:	6963      	ldr	r3, [r4, #20]
 80080ca:	b2f6      	uxtb	r6, r6
 80080cc:	4283      	cmp	r3, r0
 80080ce:	4637      	mov	r7, r6
 80080d0:	dc05      	bgt.n	80080de <__swbuf_r+0x4e>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4628      	mov	r0, r5
 80080d6:	f7ff fded 	bl	8007cb4 <_fflush_r>
 80080da:	2800      	cmp	r0, #0
 80080dc:	d1ed      	bne.n	80080ba <__swbuf_r+0x2a>
 80080de:	68a3      	ldr	r3, [r4, #8]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	60a3      	str	r3, [r4, #8]
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	6022      	str	r2, [r4, #0]
 80080ea:	701e      	strb	r6, [r3, #0]
 80080ec:	6962      	ldr	r2, [r4, #20]
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d004      	beq.n	80080fe <__swbuf_r+0x6e>
 80080f4:	89a3      	ldrh	r3, [r4, #12]
 80080f6:	07db      	lsls	r3, r3, #31
 80080f8:	d5e1      	bpl.n	80080be <__swbuf_r+0x2e>
 80080fa:	2e0a      	cmp	r6, #10
 80080fc:	d1df      	bne.n	80080be <__swbuf_r+0x2e>
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	f7ff fdd7 	bl	8007cb4 <_fflush_r>
 8008106:	2800      	cmp	r0, #0
 8008108:	d0d9      	beq.n	80080be <__swbuf_r+0x2e>
 800810a:	e7d6      	b.n	80080ba <__swbuf_r+0x2a>

0800810c <__swsetup_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4b29      	ldr	r3, [pc, #164]	@ (80081b4 <__swsetup_r+0xa8>)
 8008110:	4605      	mov	r5, r0
 8008112:	6818      	ldr	r0, [r3, #0]
 8008114:	460c      	mov	r4, r1
 8008116:	b118      	cbz	r0, 8008120 <__swsetup_r+0x14>
 8008118:	6a03      	ldr	r3, [r0, #32]
 800811a:	b90b      	cbnz	r3, 8008120 <__swsetup_r+0x14>
 800811c:	f7fd ff7c 	bl	8006018 <__sinit>
 8008120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008124:	0719      	lsls	r1, r3, #28
 8008126:	d422      	bmi.n	800816e <__swsetup_r+0x62>
 8008128:	06da      	lsls	r2, r3, #27
 800812a:	d407      	bmi.n	800813c <__swsetup_r+0x30>
 800812c:	2209      	movs	r2, #9
 800812e:	602a      	str	r2, [r5, #0]
 8008130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008134:	81a3      	strh	r3, [r4, #12]
 8008136:	f04f 30ff 	mov.w	r0, #4294967295
 800813a:	e033      	b.n	80081a4 <__swsetup_r+0x98>
 800813c:	0758      	lsls	r0, r3, #29
 800813e:	d512      	bpl.n	8008166 <__swsetup_r+0x5a>
 8008140:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008142:	b141      	cbz	r1, 8008156 <__swsetup_r+0x4a>
 8008144:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008148:	4299      	cmp	r1, r3
 800814a:	d002      	beq.n	8008152 <__swsetup_r+0x46>
 800814c:	4628      	mov	r0, r5
 800814e:	f7fe f93d 	bl	80063cc <_free_r>
 8008152:	2300      	movs	r3, #0
 8008154:	6363      	str	r3, [r4, #52]	@ 0x34
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800815c:	81a3      	strh	r3, [r4, #12]
 800815e:	2300      	movs	r3, #0
 8008160:	6063      	str	r3, [r4, #4]
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	6023      	str	r3, [r4, #0]
 8008166:	89a3      	ldrh	r3, [r4, #12]
 8008168:	f043 0308 	orr.w	r3, r3, #8
 800816c:	81a3      	strh	r3, [r4, #12]
 800816e:	6923      	ldr	r3, [r4, #16]
 8008170:	b94b      	cbnz	r3, 8008186 <__swsetup_r+0x7a>
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800817c:	d003      	beq.n	8008186 <__swsetup_r+0x7a>
 800817e:	4621      	mov	r1, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f000 f88b 	bl	800829c <__smakebuf_r>
 8008186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800818a:	f013 0201 	ands.w	r2, r3, #1
 800818e:	d00a      	beq.n	80081a6 <__swsetup_r+0x9a>
 8008190:	2200      	movs	r2, #0
 8008192:	60a2      	str	r2, [r4, #8]
 8008194:	6962      	ldr	r2, [r4, #20]
 8008196:	4252      	negs	r2, r2
 8008198:	61a2      	str	r2, [r4, #24]
 800819a:	6922      	ldr	r2, [r4, #16]
 800819c:	b942      	cbnz	r2, 80081b0 <__swsetup_r+0xa4>
 800819e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081a2:	d1c5      	bne.n	8008130 <__swsetup_r+0x24>
 80081a4:	bd38      	pop	{r3, r4, r5, pc}
 80081a6:	0799      	lsls	r1, r3, #30
 80081a8:	bf58      	it	pl
 80081aa:	6962      	ldrpl	r2, [r4, #20]
 80081ac:	60a2      	str	r2, [r4, #8]
 80081ae:	e7f4      	b.n	800819a <__swsetup_r+0x8e>
 80081b0:	2000      	movs	r0, #0
 80081b2:	e7f7      	b.n	80081a4 <__swsetup_r+0x98>
 80081b4:	20000184 	.word	0x20000184

080081b8 <_raise_r>:
 80081b8:	291f      	cmp	r1, #31
 80081ba:	b538      	push	{r3, r4, r5, lr}
 80081bc:	4605      	mov	r5, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	d904      	bls.n	80081cc <_raise_r+0x14>
 80081c2:	2316      	movs	r3, #22
 80081c4:	6003      	str	r3, [r0, #0]
 80081c6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80081ce:	b112      	cbz	r2, 80081d6 <_raise_r+0x1e>
 80081d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081d4:	b94b      	cbnz	r3, 80081ea <_raise_r+0x32>
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 f830 	bl	800823c <_getpid_r>
 80081dc:	4622      	mov	r2, r4
 80081de:	4601      	mov	r1, r0
 80081e0:	4628      	mov	r0, r5
 80081e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081e6:	f000 b817 	b.w	8008218 <_kill_r>
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d00a      	beq.n	8008204 <_raise_r+0x4c>
 80081ee:	1c59      	adds	r1, r3, #1
 80081f0:	d103      	bne.n	80081fa <_raise_r+0x42>
 80081f2:	2316      	movs	r3, #22
 80081f4:	6003      	str	r3, [r0, #0]
 80081f6:	2001      	movs	r0, #1
 80081f8:	e7e7      	b.n	80081ca <_raise_r+0x12>
 80081fa:	2100      	movs	r1, #0
 80081fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008200:	4620      	mov	r0, r4
 8008202:	4798      	blx	r3
 8008204:	2000      	movs	r0, #0
 8008206:	e7e0      	b.n	80081ca <_raise_r+0x12>

08008208 <raise>:
 8008208:	4b02      	ldr	r3, [pc, #8]	@ (8008214 <raise+0xc>)
 800820a:	4601      	mov	r1, r0
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	f7ff bfd3 	b.w	80081b8 <_raise_r>
 8008212:	bf00      	nop
 8008214:	20000184 	.word	0x20000184

08008218 <_kill_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4d07      	ldr	r5, [pc, #28]	@ (8008238 <_kill_r+0x20>)
 800821c:	2300      	movs	r3, #0
 800821e:	4604      	mov	r4, r0
 8008220:	4608      	mov	r0, r1
 8008222:	4611      	mov	r1, r2
 8008224:	602b      	str	r3, [r5, #0]
 8008226:	f7f9 fcf1 	bl	8001c0c <_kill>
 800822a:	1c43      	adds	r3, r0, #1
 800822c:	d102      	bne.n	8008234 <_kill_r+0x1c>
 800822e:	682b      	ldr	r3, [r5, #0]
 8008230:	b103      	cbz	r3, 8008234 <_kill_r+0x1c>
 8008232:	6023      	str	r3, [r4, #0]
 8008234:	bd38      	pop	{r3, r4, r5, pc}
 8008236:	bf00      	nop
 8008238:	200004cc 	.word	0x200004cc

0800823c <_getpid_r>:
 800823c:	f7f9 bcde 	b.w	8001bfc <_getpid>

08008240 <_malloc_usable_size_r>:
 8008240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008244:	1f18      	subs	r0, r3, #4
 8008246:	2b00      	cmp	r3, #0
 8008248:	bfbc      	itt	lt
 800824a:	580b      	ldrlt	r3, [r1, r0]
 800824c:	18c0      	addlt	r0, r0, r3
 800824e:	4770      	bx	lr

08008250 <__swhatbuf_r>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	460c      	mov	r4, r1
 8008254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008258:	2900      	cmp	r1, #0
 800825a:	b096      	sub	sp, #88	@ 0x58
 800825c:	4615      	mov	r5, r2
 800825e:	461e      	mov	r6, r3
 8008260:	da0d      	bge.n	800827e <__swhatbuf_r+0x2e>
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008268:	f04f 0100 	mov.w	r1, #0
 800826c:	bf14      	ite	ne
 800826e:	2340      	movne	r3, #64	@ 0x40
 8008270:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008274:	2000      	movs	r0, #0
 8008276:	6031      	str	r1, [r6, #0]
 8008278:	602b      	str	r3, [r5, #0]
 800827a:	b016      	add	sp, #88	@ 0x58
 800827c:	bd70      	pop	{r4, r5, r6, pc}
 800827e:	466a      	mov	r2, sp
 8008280:	f000 f848 	bl	8008314 <_fstat_r>
 8008284:	2800      	cmp	r0, #0
 8008286:	dbec      	blt.n	8008262 <__swhatbuf_r+0x12>
 8008288:	9901      	ldr	r1, [sp, #4]
 800828a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800828e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008292:	4259      	negs	r1, r3
 8008294:	4159      	adcs	r1, r3
 8008296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800829a:	e7eb      	b.n	8008274 <__swhatbuf_r+0x24>

0800829c <__smakebuf_r>:
 800829c:	898b      	ldrh	r3, [r1, #12]
 800829e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082a0:	079d      	lsls	r5, r3, #30
 80082a2:	4606      	mov	r6, r0
 80082a4:	460c      	mov	r4, r1
 80082a6:	d507      	bpl.n	80082b8 <__smakebuf_r+0x1c>
 80082a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	6123      	str	r3, [r4, #16]
 80082b0:	2301      	movs	r3, #1
 80082b2:	6163      	str	r3, [r4, #20]
 80082b4:	b003      	add	sp, #12
 80082b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b8:	ab01      	add	r3, sp, #4
 80082ba:	466a      	mov	r2, sp
 80082bc:	f7ff ffc8 	bl	8008250 <__swhatbuf_r>
 80082c0:	9f00      	ldr	r7, [sp, #0]
 80082c2:	4605      	mov	r5, r0
 80082c4:	4639      	mov	r1, r7
 80082c6:	4630      	mov	r0, r6
 80082c8:	f7fe fc2e 	bl	8006b28 <_malloc_r>
 80082cc:	b948      	cbnz	r0, 80082e2 <__smakebuf_r+0x46>
 80082ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d2:	059a      	lsls	r2, r3, #22
 80082d4:	d4ee      	bmi.n	80082b4 <__smakebuf_r+0x18>
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	f043 0302 	orr.w	r3, r3, #2
 80082de:	81a3      	strh	r3, [r4, #12]
 80082e0:	e7e2      	b.n	80082a8 <__smakebuf_r+0xc>
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	6020      	str	r0, [r4, #0]
 80082e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	9b01      	ldr	r3, [sp, #4]
 80082ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082f2:	b15b      	cbz	r3, 800830c <__smakebuf_r+0x70>
 80082f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082f8:	4630      	mov	r0, r6
 80082fa:	f000 f81d 	bl	8008338 <_isatty_r>
 80082fe:	b128      	cbz	r0, 800830c <__smakebuf_r+0x70>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	f043 0301 	orr.w	r3, r3, #1
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	431d      	orrs	r5, r3
 8008310:	81a5      	strh	r5, [r4, #12]
 8008312:	e7cf      	b.n	80082b4 <__smakebuf_r+0x18>

08008314 <_fstat_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d07      	ldr	r5, [pc, #28]	@ (8008334 <_fstat_r+0x20>)
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	4611      	mov	r1, r2
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	f7f9 fcd3 	bl	8001ccc <_fstat>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	d102      	bne.n	8008330 <_fstat_r+0x1c>
 800832a:	682b      	ldr	r3, [r5, #0]
 800832c:	b103      	cbz	r3, 8008330 <_fstat_r+0x1c>
 800832e:	6023      	str	r3, [r4, #0]
 8008330:	bd38      	pop	{r3, r4, r5, pc}
 8008332:	bf00      	nop
 8008334:	200004cc 	.word	0x200004cc

08008338 <_isatty_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d06      	ldr	r5, [pc, #24]	@ (8008354 <_isatty_r+0x1c>)
 800833c:	2300      	movs	r3, #0
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	602b      	str	r3, [r5, #0]
 8008344:	f7f9 fcd2 	bl	8001cec <_isatty>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_isatty_r+0x1a>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_isatty_r+0x1a>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	200004cc 	.word	0x200004cc

08008358 <_init>:
 8008358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835a:	bf00      	nop
 800835c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800835e:	bc08      	pop	{r3}
 8008360:	469e      	mov	lr, r3
 8008362:	4770      	bx	lr

08008364 <_fini>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	bf00      	nop
 8008368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800836a:	bc08      	pop	{r3}
 800836c:	469e      	mov	lr, r3
 800836e:	4770      	bx	lr
